
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf38  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800d170  0800d170  0000e170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d270  0800d270  0000e270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d278  0800d278  0000e278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d27c  0800d27c  0000e27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  0800d280  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dd4  2000000c  0800d289  0000f00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000de0  0800d289  0000fde0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000f009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002acdd  00000000  00000000  0000f03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000461f  00000000  00000000  00039d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002558  00000000  00000000  0003e340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d5b  00000000  00000000  00040898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a419  00000000  00000000  000425f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002fe34  00000000  00000000  0007ca0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c537  00000000  00000000  000ac840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00218d77  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a408  00000000  00000000  00218dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004c  00000000  00000000  002231c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800d158 	.word	0x0800d158

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800d158 	.word	0x0800d158

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f002 fa8e 	bl	8002ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f892 	bl	80006c0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800059c:	f000 f8f5 	bl	800078a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fe2a 	bl	80011f8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005a4:	f000 f964 	bl	8000870 <MX_GPDMA1_Init>
  MX_ADF1_Init();
 80005a8:	f000 f8f8 	bl	800079c <MX_ADF1_Init>
  MX_I2C1_Init();
 80005ac:	f000 f9a0 	bl	80008f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b0:	f000 f9de 	bl	8000970 <MX_I2C2_Init>
  MX_I2C3_Init();
 80005b4:	f000 fa1c 	bl	80009f0 <MX_I2C3_Init>
  MX_I2C4_Init();
 80005b8:	f000 fa5a 	bl	8000a70 <MX_I2C4_Init>
  MX_ICACHE_Init();
 80005bc:	f000 fa98 	bl	8000af0 <MX_ICACHE_Init>
  MX_RNG_Init();
 80005c0:	f000 faaa 	bl	8000b18 <MX_RNG_Init>
  MX_RTC_Init();
 80005c4:	f000 fabe 	bl	8000b44 <MX_RTC_Init>
  MX_SAI1_Init();
 80005c8:	f000 fb3e 	bl	8000c48 <MX_SAI1_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI1_Init();
 80005cc:	f000 fba6 	bl	8000d1c <MX_SPI1_Init>
  MX_SPI2_Init();
 80005d0:	f000 fc14 	bl	8000dfc <MX_SPI2_Init>
  MX_SPI3_Init();
 80005d4:	f000 fc84 	bl	8000ee0 <MX_SPI3_Init>
  MX_TIM2_Init();
 80005d8:	f000 fcf4 	bl	8000fc4 <MX_TIM2_Init>
  MX_UART4_Init();
 80005dc:	f000 fd42 	bl	8001064 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 fd8c 	bl	80010fc <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e4:	f000 fdd6 	bl	8001194 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80005e8:	4830      	ldr	r0, [pc, #192]	@ (80006ac <main+0x11c>)
 80005ea:	f00a fff7 	bl	800b5dc <HAL_TIM_Base_Start_IT>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <main+0x68>
  {
      /* Starting Error */
      Error_Handler();
 80005f4:	f001 f872 	bl	80016dc <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	   if (led_flag) {
 80005f8:	4b2d      	ldr	r3, [pc, #180]	@ (80006b0 <main+0x120>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0fa      	beq.n	80005f8 <main+0x68>
		led_flag = 0;
 8000602:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <main+0x120>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
	  	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_RESET);  // Turn off LED 1
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060e:	4829      	ldr	r0, [pc, #164]	@ (80006b4 <main+0x124>)
 8000610:	f004 fb1e 	bl	8004c50 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_RESET);  // Turn off LED 2
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800061a:	4826      	ldr	r0, [pc, #152]	@ (80006b4 <main+0x124>)
 800061c:	f004 fb18 	bl	8004c50 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);   // Turn off LED 3
 8000620:	2200      	movs	r2, #0
 8000622:	2140      	movs	r1, #64	@ 0x40
 8000624:	4824      	ldr	r0, [pc, #144]	@ (80006b8 <main+0x128>)
 8000626:	f004 fb13 	bl	8004c50 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);   // Turn off LED 4
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000630:	4821      	ldr	r0, [pc, #132]	@ (80006b8 <main+0x128>)
 8000632:	f004 fb0d 	bl	8004c50 <HAL_GPIO_WritePin>

	    // Turn on the current LED
	    switch (led_index)
 8000636:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <main+0x12c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b03      	cmp	r3, #3
 800063e:	d826      	bhi.n	800068e <main+0xfe>
 8000640:	a201      	add	r2, pc, #4	@ (adr r2, 8000648 <main+0xb8>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000659 	.word	0x08000659
 800064c:	08000667 	.word	0x08000667
 8000650:	08000675 	.word	0x08000675
 8000654:	08000681 	.word	0x08000681
	    {
	        case 0:
	            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_SET);  // Turn on LED 1
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065e:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <main+0x124>)
 8000660:	f004 faf6 	bl	8004c50 <HAL_GPIO_WritePin>
	            break;
 8000664:	e013      	b.n	800068e <main+0xfe>
	        case 1:
	            HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_SET);  // Turn on LED 2
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800066c:	4811      	ldr	r0, [pc, #68]	@ (80006b4 <main+0x124>)
 800066e:	f004 faef 	bl	8004c50 <HAL_GPIO_WritePin>
	            break;
 8000672:	e00c      	b.n	800068e <main+0xfe>
	        case 2:
	            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);   // Turn on LED 3
 8000674:	2201      	movs	r2, #1
 8000676:	2140      	movs	r1, #64	@ 0x40
 8000678:	480f      	ldr	r0, [pc, #60]	@ (80006b8 <main+0x128>)
 800067a:	f004 fae9 	bl	8004c50 <HAL_GPIO_WritePin>
	            break;
 800067e:	e006      	b.n	800068e <main+0xfe>
	        case 3:
	            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);   // Turn on LED 4
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000686:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <main+0x128>)
 8000688:	f004 fae2 	bl	8004c50 <HAL_GPIO_WritePin>
	            break;
 800068c:	bf00      	nop
	    }

	    // Move to the next LED
	    led_index= (led_index+1)%4;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <main+0x12c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3301      	adds	r3, #1
 8000696:	425a      	negs	r2, r3
 8000698:	f003 0303 	and.w	r3, r3, #3
 800069c:	f002 0203 	and.w	r2, r2, #3
 80006a0:	bf58      	it	pl
 80006a2:	4253      	negpl	r3, r2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <main+0x12c>)
 80006a8:	701a      	strb	r2, [r3, #0]
	   if (led_flag) {
 80006aa:	e7a5      	b.n	80005f8 <main+0x68>
 80006ac:	2000075c 	.word	0x2000075c
 80006b0:	20000029 	.word	0x20000029
 80006b4:	42021c00 	.word	0x42021c00
 80006b8:	42021400 	.word	0x42021400
 80006bc:	20000028 	.word	0x20000028

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09e      	sub	sp, #120	@ 0x78
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2260      	movs	r2, #96	@ 0x60
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00c fd15 	bl	800d0fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80006e8:	f005 fd50 	bl	800618c <HAL_PWREx_ControlVoltageScaling>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006f2:	f000 fff3 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006f6:	232b      	movs	r3, #43	@ 0x2b
 80006f8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000710:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	2303      	movs	r3, #3
 8000720:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 9;
 800072a:	2309      	movs	r3, #9
 800072c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000736:	2301      	movs	r3, #1
 8000738:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800073a:	230c      	movs	r3, #12
 800073c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	4618      	mov	r0, r3
 8000748:	f005 fddc 	bl	8006304 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000752:	f000 ffc3 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	231f      	movs	r3, #31
 8000758:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2303      	movs	r3, #3
 800075c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800075e:	2308      	movs	r3, #8
 8000760:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f006 fca2 	bl	80070bc <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 ffad 	bl	80016dc <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3778      	adds	r7, #120	@ 0x78
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800078e:	f005 fd99 	bl	80062c4 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000792:	f005 fda7 	bl	80062e4 <HAL_PWREx_DisableUCPDDeadBattery>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80007a0:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007a2:	4a31      	ldr	r2, [pc, #196]	@ (8000868 <MX_ADF1_Init+0xcc>)
 80007a4:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80007a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = ENABLE;
 80007ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.CommonParam.OutputClock.Pins = MDF_OUTPUT_CLOCK_0;
 80007b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007b4:	2220      	movs	r2, #32
 80007b6:	611a      	str	r2, [r3, #16]
  AdfHandle0.Init.CommonParam.OutputClock.Divider = 5;
 80007b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007ba:	2205      	movs	r2, #5
 80007bc:	615a      	str	r2, [r3, #20]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Activation = ENABLE;
 80007be:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	761a      	strb	r2, [r3, #24]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 80007c4:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Edge = MDF_CLOCK_TRIG_FALLING_EDGE;
 80007ca:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007d0:	621a      	str	r2, [r3, #32]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007dc:	2210      	movs	r2, #16
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80007e0:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 31;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007e8:	221f      	movs	r2, #31
 80007ea:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80007f2:	481c      	ldr	r0, [pc, #112]	@ (8000864 <MX_ADF1_Init+0xc8>)
 80007f4:	f005 f9f2 	bl	8005bdc <HAL_MDF_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADF1_Init+0x66>
  {
    Error_Handler();
 80007fe:	f000 ff6d 	bl	80016dc <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_ADF1_Init+0xd0>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000810:	2250      	movs	r2, #80	@ 0x50
 8000812:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 16;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000816:	2210      	movs	r2, #16
 8000818:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 1;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_ADF1_Init+0xd0>)
 800081c:	2201      	movs	r2, #1
 800081e:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = ENABLE;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000822:	2201      	movs	r2, #1
 8000824:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.ReshapeFilter.DecimationRatio = MDF_RSF_DECIMATION_RATIO_4;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  AdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_ADF1_Init+0xd0>)
 800082e:	2201      	movs	r2, #1
 8000830:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_ADF1_Init+0xd0>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_SYNC_CONT;
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000844:	2220      	movs	r2, #32
 8000846:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_ADF1_Init+0xd0>)
 800084a:	2200      	movs	r2, #0
 800084c:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000850:	2200      	movs	r2, #0
 8000852:	66da      	str	r2, [r3, #108]	@ 0x6c
  AdfFilterConfig0.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <MX_ADF1_Init+0xd0>)
 8000856:	2200      	movs	r2, #0
 8000858:	671a      	str	r2, [r3, #112]	@ 0x70
  AdfFilterConfig0.Trigger.Edge = MDF_FILTER_TRIG_RISING_EDGE;
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <MX_ADF1_Init+0xd0>)
 800085c:	2200      	movs	r2, #0
 800085e:	675a      	str	r2, [r3, #116]	@ 0x74
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000002c 	.word	0x2000002c
 8000868:	46024080 	.word	0x46024080
 800086c:	20000070 	.word	0x20000070

08000870 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_GPDMA1_Init+0x7c>)
 8000878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <MX_GPDMA1_Init+0x7c>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_GPDMA1_Init+0x7c>)
 8000888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	201d      	movs	r0, #29
 800089a:	f002 faad 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800089e:	201d      	movs	r0, #29
 80008a0:	f002 fac4 	bl	8002e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	201e      	movs	r0, #30
 80008aa:	f002 faa5 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80008ae:	201e      	movs	r0, #30
 80008b0:	f002 fabc 	bl	8002e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	201f      	movs	r0, #31
 80008ba:	f002 fa9d 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80008be:	201f      	movs	r0, #31
 80008c0:	f002 fab4 	bl	8002e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2020      	movs	r0, #32
 80008ca:	f002 fa95 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80008ce:	2020      	movs	r0, #32
 80008d0:	f002 faac 	bl	8002e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2022      	movs	r0, #34	@ 0x22
 80008da:	f002 fa8d 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80008de:	2022      	movs	r0, #34	@ 0x22
 80008e0:	f002 faa4 	bl	8002e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	46020c00 	.word	0x46020c00

080008f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_I2C1_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <MX_I2C1_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_I2C1_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <MX_I2C1_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <MX_I2C1_Init+0x74>)
 800092c:	f004 f9e4 	bl	8004cf8 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fed1 	bl	80016dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <MX_I2C1_Init+0x74>)
 800093e:	f005 f886 	bl	8005a4e <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fec8 	bl	80016dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000950:	f005 f8c8 	bl	8005ae4 <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 febf 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001a0 	.word	0x200001a0
 8000968:	40005400 	.word	0x40005400
 800096c:	00702681 	.word	0x00702681

08000970 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_I2C2_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	@ (80009e8 <MX_I2C2_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702681;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_I2C2_Init+0x74>)
 800097c:	4a1b      	ldr	r2, [pc, #108]	@ (80009ec <MX_I2C2_Init+0x7c>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_I2C2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <MX_I2C2_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009aa:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009ac:	f004 f9a4 	bl	8004cf8 <HAL_I2C_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009b6:	f000 fe91 	bl	80016dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009be:	f005 f846 	bl	8005a4e <HAL_I2CEx_ConfigAnalogFilter>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c8:	f000 fe88 	bl	80016dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009d0:	f005 f888 	bl	8005ae4 <HAL_I2CEx_ConfigDigitalFilter>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 fe7f 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200001f4 	.word	0x200001f4
 80009e8:	40005800 	.word	0x40005800
 80009ec:	00702681 	.word	0x00702681

080009f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_I2C3_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_I2C3_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702681;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_I2C3_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <MX_I2C3_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a2c:	f004 f964 	bl	8004cf8 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fe51 	bl	80016dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a3e:	f005 f806 	bl	8005a4e <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fe48 	bl	80016dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_I2C3_Init+0x74>)
 8000a50:	f005 f848 	bl	8005ae4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fe3f 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000248 	.word	0x20000248
 8000a68:	46002800 	.word	0x46002800
 8000a6c:	00702681 	.word	0x00702681

08000a70 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <MX_I2C4_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702681;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <MX_I2C4_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000aac:	f004 f924 	bl	8004cf8 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fe11 	bl	80016dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000abe:	f004 ffc6 	bl	8005a4e <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fe08 	bl	80016dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_I2C4_Init+0x74>)
 8000ad0:	f005 f808 	bl	8005ae4 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fdff 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000029c 	.word	0x2000029c
 8000ae8:	40008400 	.word	0x40008400
 8000aec:	00702681 	.word	0x00702681

08000af0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000af4:	2000      	movs	r0, #0
 8000af6:	f005 f841 	bl	8005b7c <HAL_ICACHE_ConfigAssociativityMode>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b00:	f000 fdec 	bl	80016dc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b04:	f005 f85a 	bl	8005bbc <HAL_ICACHE_Enable>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b0e:	f000 fde5 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_RNG_Init+0x24>)
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <MX_RNG_Init+0x28>)
 8000b20:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_RNG_Init+0x24>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_RNG_Init+0x24>)
 8000b2a:	f009 fb77 	bl	800a21c <HAL_RNG_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b34:	f000 fdd2 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200003e0 	.word	0x200003e0
 8000b40:	420c0800 	.word	0x420c0800

08000b44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	@ 0x38
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
 8000b5a:	615a      	str	r2, [r3, #20]
 8000b5c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b72:	4b33      	ldr	r3, [pc, #204]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000b74:	4a33      	ldr	r2, [pc, #204]	@ (8000c44 <MX_RTC_Init+0x100>)
 8000b76:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b78:	4b31      	ldr	r3, [pc, #196]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000b80:	227f      	movs	r2, #127	@ 0x7f
 8000b82:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b84:	4b2e      	ldr	r3, [pc, #184]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000b86:	22ff      	movs	r2, #255	@ 0xff
 8000b88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b9c:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ba2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000baa:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bb0:	4823      	ldr	r0, [pc, #140]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000bb2:	f009 fbcd 	bl	800a350 <HAL_RTC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 fd8e 	bl	80016dc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481a      	ldr	r0, [pc, #104]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000bd8:	f009 fe2a 	bl	800a830 <HAL_RTCEx_PrivilegeModeSet>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000be2:	f000 fd7b 	bl	80016dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	480f      	ldr	r0, [pc, #60]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000c04:	f009 fc26 	bl	800a454 <HAL_RTC_SetTime>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000c0e:	f000 fd65 	bl	80016dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c12:	2301      	movs	r3, #1
 8000c14:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c16:	2301      	movs	r3, #1
 8000c18:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_RTC_Init+0xfc>)
 8000c2a:	f009 fcaf 	bl	800a58c <HAL_RTC_SetDate>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000c34:	f000 fd52 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3738      	adds	r7, #56	@ 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200003f4 	.word	0x200003f4
 8000c44:	46007800 	.word	0x46007800

08000c48 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c4e:	4a31      	ldr	r2, [pc, #196]	@ (8000d14 <MX_SAI1_Init+0xcc>)
 8000c50:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c58:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c60:	2240      	movs	r2, #64	@ 0x40
 8000c62:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c64:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c70:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c76:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c82:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c88:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c8a:	4a23      	ldr	r2, [pc, #140]	@ (8000d18 <MX_SAI1_Init+0xd0>)
 8000c8c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c9a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_SAI1_Init+0xc8>)
 8000cfc:	f009 fdc6 	bl	800a88c <HAL_SAI_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_SAI1_Init+0xc2>
  {
    Error_Handler();
 8000d06:	f000 fce9 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000424 	.word	0x20000424
 8000d14:	40015404 	.word	0x40015404
 8000d18:	0002ee00 	.word	0x0002ee00

08000d1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d2c:	4b31      	ldr	r3, [pc, #196]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d2e:	4a32      	ldr	r2, [pc, #200]	@ (8000df8 <MX_SPI1_Init+0xdc>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b30      	ldr	r3, [pc, #192]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d42:	2207      	movs	r2, #7
 8000d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d46:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d56:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d5e:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d60:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000d64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d66:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d72:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000dbc:	f009 ff84 	bl	800acc8 <HAL_SPI_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8000dc6:	f000 fc89 	bl	80016dc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000dce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dd2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_SPI1_Init+0xd8>)
 8000dde:	f00a fb64 	bl	800b4aa <HAL_SPIEx_SetConfigAutonomousMode>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000de8:	f000 fc78 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200004bc 	.word	0x200004bc
 8000df8:	40013000 	.word	0x40013000

08000dfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e0c:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e0e:	4a33      	ldr	r2, [pc, #204]	@ (8000edc <MX_SPI2_Init+0xe0>)
 8000e10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e12:	4b31      	ldr	r3, [pc, #196]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e14:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e22:	2207      	movs	r2, #7
 8000e24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e2c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e36:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e38:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e46:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e76:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e84:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000e88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e9c:	480e      	ldr	r0, [pc, #56]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000e9e:	f009 ff13 	bl	800acc8 <HAL_SPI_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_SPI2_Init+0xb0>
  {
    Error_Handler();
 8000ea8:	f000 fc18 	bl	80016dc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000eb0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <MX_SPI2_Init+0xdc>)
 8000ec0:	f00a faf3 	bl	800b4aa <HAL_SPIEx_SetConfigAutonomousMode>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_SPI2_Init+0xd2>
  {
    Error_Handler();
 8000eca:	f000 fc07 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000054c 	.word	0x2000054c
 8000edc:	40003800 	.word	0x40003800

08000ee0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ef0:	4b32      	ldr	r3, [pc, #200]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000ef2:	4a33      	ldr	r2, [pc, #204]	@ (8000fc0 <MX_SPI3_Init+0xe0>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000ef8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000efc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b2f      	ldr	r3, [pc, #188]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f18:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f1a:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f1c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f20:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f22:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f80:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000f82:	f009 fea1 	bl	800acc8 <HAL_SPI_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_SPI3_Init+0xb0>
  {
    Error_Handler();
 8000f8c:	f000 fba6 	bl	80016dc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_ENABLE;
 8000f90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f94:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 8000f96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f9a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_SPI3_Init+0xdc>)
 8000fa6:	f00a fa80 	bl	800b4aa <HAL_SPIEx_SetConfigAutonomousMode>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_SPI3_Init+0xd4>
  {
    Error_Handler();
 8000fb0:	f000 fb94 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200005dc 	.word	0x200005dc
 8000fc0:	46002000 	.word	0x46002000

08000fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <MX_TIM2_Init+0x98>)
 8000fe4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <MX_TIM2_Init+0x98>)
 8000fec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ff0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <MX_TIM2_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 71999;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	@ (800105c <MX_TIM2_Init+0x98>)
 8000ffa:	4a19      	ldr	r2, [pc, #100]	@ (8001060 <MX_TIM2_Init+0x9c>)
 8000ffc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_TIM2_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	@ (800105c <MX_TIM2_Init+0x98>)
 8001006:	2280      	movs	r2, #128	@ 0x80
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800100a:	4814      	ldr	r0, [pc, #80]	@ (800105c <MX_TIM2_Init+0x98>)
 800100c:	f00a fa8e 	bl	800b52c <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001016:	f000 fb61 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_TIM2_Init+0x98>)
 8001028:	f00a fcc8 	bl	800b9bc <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001032:	f000 fb53 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <MX_TIM2_Init+0x98>)
 8001044:	f00a ff90 	bl	800bf68 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800104e:	f000 fb45 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000075c 	.word	0x2000075c
 8001060:	0001193f 	.word	0x0001193f

08001064 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001068:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <MX_UART4_Init+0x90>)
 800106a:	4a23      	ldr	r2, [pc, #140]	@ (80010f8 <MX_UART4_Init+0x94>)
 800106c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <MX_UART4_Init+0x90>)
 8001070:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001074:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_UART4_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_UART4_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_UART4_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_UART4_Init+0x90>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_UART4_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_UART4_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_UART4_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_UART4_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_UART4_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <MX_UART4_Init+0x90>)
 80010ae:	f00b f863 	bl	800c178 <HAL_UART_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80010b8:	f000 fb10 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010bc:	2100      	movs	r1, #0
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <MX_UART4_Init+0x90>)
 80010c0:	f00b fca4 	bl	800ca0c <HAL_UARTEx_SetTxFifoThreshold>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80010ca:	f000 fb07 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <MX_UART4_Init+0x90>)
 80010d2:	f00b fcd9 	bl	800ca88 <HAL_UARTEx_SetRxFifoThreshold>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 fafe 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_UART4_Init+0x90>)
 80010e2:	f00b fc5a 	bl	800c99a <HAL_UARTEx_DisableFifoMode>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f000 faf6 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200007a8 	.word	0x200007a8
 80010f8:	40004c00 	.word	0x40004c00

080010fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <MX_USART2_UART_Init+0x94>)
 8001104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001108:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800110c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001144:	4811      	ldr	r0, [pc, #68]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001146:	f00b f817 	bl	800c178 <HAL_UART_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 fac4 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_USART2_UART_Init+0x90>)
 8001158:	f00b fc58 	bl	800ca0c <HAL_UARTEx_SetTxFifoThreshold>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001162:	f000 fabb 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800116a:	f00b fc8d 	bl	800ca88 <HAL_UARTEx_SetRxFifoThreshold>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001174:	f000 fab2 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_USART2_UART_Init+0x90>)
 800117a:	f00b fc0e 	bl	800c99a <HAL_UARTEx_DisableFifoMode>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 faaa 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000083c 	.word	0x2000083c
 8001190:	40004400 	.word	0x40004400

08001194 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800119a:	4a16      	ldr	r2, [pc, #88]	@ (80011f4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800119c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a0:	2206      	movs	r2, #6
 80011a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011dc:	f004 fe9a 	bl	8005f14 <HAL_PCD_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011e6:	f000 fa79 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200008d0 	.word	0x200008d0
 80011f4:	42040000 	.word	0x42040000

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	@ 0x38
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120e:	4bc0      	ldr	r3, [pc, #768]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001214:	4abe      	ldr	r2, [pc, #760]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800121e:	4bbc      	ldr	r3, [pc, #752]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800122c:	4bb8      	ldr	r3, [pc, #736]	@ (8001510 <MX_GPIO_Init+0x318>)
 800122e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001232:	4ab7      	ldr	r2, [pc, #732]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001238:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800123c:	4bb4      	ldr	r3, [pc, #720]	@ (8001510 <MX_GPIO_Init+0x318>)
 800123e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124a:	4bb1      	ldr	r3, [pc, #708]	@ (8001510 <MX_GPIO_Init+0x318>)
 800124c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001250:	4aaf      	ldr	r2, [pc, #700]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001256:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800125a:	4bad      	ldr	r3, [pc, #692]	@ (8001510 <MX_GPIO_Init+0x318>)
 800125c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001268:	4ba9      	ldr	r3, [pc, #676]	@ (8001510 <MX_GPIO_Init+0x318>)
 800126a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800126e:	4aa8      	ldr	r2, [pc, #672]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001278:	4ba5      	ldr	r3, [pc, #660]	@ (8001510 <MX_GPIO_Init+0x318>)
 800127a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4ba2      	ldr	r3, [pc, #648]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800128c:	4aa0      	ldr	r2, [pc, #640]	@ (8001510 <MX_GPIO_Init+0x318>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001296:	4b9e      	ldr	r3, [pc, #632]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012aa:	4a99      	ldr	r2, [pc, #612]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012b4:	4b96      	ldr	r3, [pc, #600]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	4b93      	ldr	r3, [pc, #588]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c8:	4a91      	ldr	r2, [pc, #580]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012d2:	4b8f      	ldr	r3, [pc, #572]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e6:	4a8a      	ldr	r2, [pc, #552]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012f0:	4b87      	ldr	r3, [pc, #540]	@ (8001510 <MX_GPIO_Init+0x318>)
 80012f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fe:	4b84      	ldr	r3, [pc, #528]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001304:	4a82      	ldr	r2, [pc, #520]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001306:	f043 0320 	orr.w	r3, r3, #32
 800130a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800130e:	4b80      	ldr	r3, [pc, #512]	@ (8001510 <MX_GPIO_Init+0x318>)
 8001310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, SPI_SEN_CS_G_Pin|MCU_SEL_Pin|SPI_SEN_CS_A_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	21a1      	movs	r1, #161	@ 0xa1
 8001320:	487c      	ldr	r0, [pc, #496]	@ (8001514 <MX_GPIO_Init+0x31c>)
 8001322:	f003 fc95 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED3_Pin|EN_SD_Pin|LED2_Pin|SEL_SD_V_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 51e8 	mov.w	r1, #7424	@ 0x1d00
 800132c:	487a      	ldr	r0, [pc, #488]	@ (8001518 <MX_GPIO_Init+0x320>)
 800132e:	f003 fc8f 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(V_BT_E1_GPIO_Port, V_BT_E1_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	2102      	movs	r1, #2
 8001336:	4879      	ldr	r0, [pc, #484]	@ (800151c <MX_GPIO_Init+0x324>)
 8001338:	f003 fc8a 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BLE_RST_Pin|BT_BOOT_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2112      	movs	r1, #18
 8001340:	4877      	ldr	r0, [pc, #476]	@ (8001520 <MX_GPIO_Init+0x328>)
 8001342:	f003 fc85 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SPI_DUT_CS2_Pin|SPI_DUT_CS_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f241 0102 	movw	r1, #4098	@ 0x1002
 800134c:	4875      	ldr	r0, [pc, #468]	@ (8001524 <MX_GPIO_Init+0x32c>)
 800134e:	f003 fc7f 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USB_ENUM_LED_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001358:	4873      	ldr	r0, [pc, #460]	@ (8001528 <MX_GPIO_Init+0x330>)
 800135a:	f003 fc79 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2108      	movs	r1, #8
 8001362:	4872      	ldr	r0, [pc, #456]	@ (800152c <MX_GPIO_Init+0x334>)
 8001364:	f003 fc74 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2104      	movs	r1, #4
 800136c:	4870      	ldr	r0, [pc, #448]	@ (8001530 <MX_GPIO_Init+0x338>)
 800136e:	f003 fc6f 	bl	8004c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : V4_GOOD_Pin */
  GPIO_InitStruct.Pin = V4_GOOD_Pin;
 8001372:	2340      	movs	r3, #64	@ 0x40
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(V4_GOOD_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4863      	ldr	r0, [pc, #396]	@ (8001514 <MX_GPIO_Init+0x31c>)
 8001386:	f003 fa8b 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin DIL_INT2_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|DIL_INT2_Pin;
 800138a:	f248 0340 	movw	r3, #32832	@ 0x8040
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001390:	2303      	movs	r3, #3
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4861      	ldr	r0, [pc, #388]	@ (8001524 <MX_GPIO_Init+0x32c>)
 80013a0:	f003 fa7e 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SEN_CS_G_Pin MCU_SEL_Pin SPI_SEN_CS_A_Pin */
  GPIO_InitStruct.Pin = SPI_SEN_CS_G_Pin|MCU_SEL_Pin|SPI_SEN_CS_A_Pin;
 80013a4:	23a1      	movs	r3, #161	@ 0xa1
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4856      	ldr	r0, [pc, #344]	@ (8001514 <MX_GPIO_Init+0x31c>)
 80013bc:	f003 fa70 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin EN_SD_Pin LED2_Pin SEL_SD_V_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|EN_SD_Pin|LED2_Pin|SEL_SD_V_Pin;
 80013c0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	484f      	ldr	r0, [pc, #316]	@ (8001518 <MX_GPIO_Init+0x320>)
 80013da:	f003 fa61 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDF1_SDI3_Pin GPIO_JP4_Pin MDF1_SDI2_Pin */
  GPIO_InitStruct.Pin = MDF1_SDI3_Pin|GPIO_JP4_Pin|MDF1_SDI2_Pin;
 80013de:	23b0      	movs	r3, #176	@ 0xb0
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	484a      	ldr	r0, [pc, #296]	@ (800151c <MX_GPIO_Init+0x324>)
 80013f2:	f003 fa55 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_BT_E1_Pin */
  GPIO_InitStruct.Pin = V_BT_E1_Pin;
 80013f6:	2302      	movs	r3, #2
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(V_BT_E1_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4843      	ldr	r0, [pc, #268]	@ (800151c <MX_GPIO_Init+0x324>)
 800140e:	f003 fa47 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_RST_Pin BT_BOOT_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin|BT_BOOT_Pin;
 8001412:	2312      	movs	r3, #18
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	483d      	ldr	r0, [pc, #244]	@ (8001520 <MX_GPIO_Init+0x328>)
 800142a:	f003 fa39 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WC_INTB_Pin SW2_Pin MAG_DRDY_Pin PRESS_INT_Pin
                           NFC_GPO_Pin */
  GPIO_InitStruct.Pin = WC_INTB_Pin|SW2_Pin|MAG_DRDY_Pin|PRESS_INT_Pin
 800142e:	f241 1349 	movw	r3, #4425	@ 0x1149
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
                          |NFC_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001434:	4b3f      	ldr	r3, [pc, #252]	@ (8001534 <MX_GPIO_Init+0x33c>)
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4836      	ldr	r0, [pc, #216]	@ (800151c <MX_GPIO_Init+0x324>)
 8001444:	f003 fa2c 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MDF1_SDI0_Pin */
  GPIO_InitStruct.Pin = MDF1_SDI0_Pin;
 8001448:	2308      	movs	r3, #8
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MDF1_SDI0_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	4831      	ldr	r0, [pc, #196]	@ (8001520 <MX_GPIO_Init+0x328>)
 800145c:	f003 fa20 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin BUTTON_PWR_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|BUTTON_PWR_Pin|SD_DETECT_Pin;
 8001460:	f242 0322 	movw	r3, #8226	@ 0x2022
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001466:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <MX_GPIO_Init+0x33c>)
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	482d      	ldr	r0, [pc, #180]	@ (800152c <MX_GPIO_Init+0x334>)
 8001476:	f003 fa13 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_DUT_CS2_Pin SPI_DUT_CS_Pin */
  GPIO_InitStruct.Pin = SPI_DUT_CS2_Pin|SPI_DUT_CS_Pin;
 800147a:	f241 0302 	movw	r3, #4098	@ 0x1002
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4824      	ldr	r0, [pc, #144]	@ (8001524 <MX_GPIO_Init+0x32c>)
 8001494:	f003 fa04 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_ON_Pin WC_RSTB_Pin MDF1_CCK_Pin */
  GPIO_InitStruct.Pin = SW_ON_Pin|WC_RSTB_Pin|MDF1_CCK_Pin;
 8001498:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	481e      	ldr	r0, [pc, #120]	@ (8001528 <MX_GPIO_Init+0x330>)
 80014ae:	f003 f9f7 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin;
 80014b2:	2304      	movs	r3, #4
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <MX_GPIO_Init+0x33c>)
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ba:	2302      	movs	r3, #2
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ACC_INT1_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4818      	ldr	r0, [pc, #96]	@ (8001528 <MX_GPIO_Init+0x330>)
 80014c6:	f003 f9eb 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ENUM_LED_Pin LED1_Pin */
  GPIO_InitStruct.Pin = USB_ENUM_LED_Pin|LED1_Pin;
 80014ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4811      	ldr	r0, [pc, #68]	@ (8001528 <MX_GPIO_Init+0x330>)
 80014e4:	f003 f9dc 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_1v8_Pin */
  GPIO_InitStruct.Pin = LOCK_1v8_Pin;
 80014e8:	2301      	movs	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LOCK_1v8_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	480c      	ldr	r0, [pc, #48]	@ (800152c <MX_GPIO_Init+0x334>)
 80014fc:	f003 f9d0 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001500:	2308      	movs	r3, #8
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800150c:	e014      	b.n	8001538 <MX_GPIO_Init+0x340>
 800150e:	bf00      	nop
 8001510:	46020c00 	.word	0x46020c00
 8001514:	42022000 	.word	0x42022000
 8001518:	42021c00 	.word	0x42021c00
 800151c:	42021000 	.word	0x42021000
 8001520:	42020c00 	.word	0x42020c00
 8001524:	42021800 	.word	0x42021800
 8001528:	42021400 	.word	0x42021400
 800152c:	42020800 	.word	0x42020800
 8001530:	42020000 	.word	0x42020000
 8001534:	10110000 	.word	0x10110000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	485f      	ldr	r0, [pc, #380]	@ (80016c0 <MX_GPIO_Init+0x4c8>)
 8001544:	f003 f9ac 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBATT_Pin */
  GPIO_InitStruct.Pin = VBATT_Pin;
 8001548:	2301      	movs	r3, #1
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154c:	2303      	movs	r3, #3
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBATT_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	485a      	ldr	r0, [pc, #360]	@ (80016c4 <MX_GPIO_Init+0x4cc>)
 800155c:	f003 f9a0 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIL_INT1_Pin */
  GPIO_InitStruct.Pin = DIL_INT1_Pin;
 8001560:	2304      	movs	r3, #4
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DIL_INT1_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	4855      	ldr	r0, [pc, #340]	@ (80016c8 <MX_GPIO_Init+0x4d0>)
 8001574:	f003 f994 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_OUT_T1_C3_Pin */
  GPIO_InitStruct.Pin = PWM_OUT_T1_C3_Pin;
 8001578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800158a:	2301      	movs	r3, #1
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(PWM_OUT_T1_C3_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	484d      	ldr	r0, [pc, #308]	@ (80016cc <MX_GPIO_Init+0x4d4>)
 8001596:	f003 f983 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800159a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a0:	4b4b      	ldr	r3, [pc, #300]	@ (80016d0 <MX_GPIO_Init+0x4d8>)
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4845      	ldr	r0, [pc, #276]	@ (80016c4 <MX_GPIO_Init+0x4cc>)
 80015b0:	f003 f976 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDF1_SDI1_Pin TEMP_INT_Pin PB1 */
  GPIO_InitStruct.Pin = MDF1_SDI1_Pin|TEMP_INT_Pin|GPIO_PIN_1;
 80015b4:	f249 0302 	movw	r3, #36866	@ 0x9002
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	483e      	ldr	r0, [pc, #248]	@ (80016c4 <MX_GPIO_Init+0x4cc>)
 80015ca:	f003 f969 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 80015ce:	2304      	movs	r3, #4
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	483b      	ldr	r0, [pc, #236]	@ (80016d4 <MX_GPIO_Init+0x4dc>)
 80015e6:	f003 f95b 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDO_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin;
 80015ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	2303      	movs	r3, #3
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LDO_EN_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4833      	ldr	r0, [pc, #204]	@ (80016cc <MX_GPIO_Init+0x4d4>)
 8001600:	f003 f94e 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001604:	2310      	movs	r3, #16
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001608:	4b31      	ldr	r3, [pc, #196]	@ (80016d0 <MX_GPIO_Init+0x4d8>)
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	482f      	ldr	r0, [pc, #188]	@ (80016d4 <MX_GPIO_Init+0x4dc>)
 8001618:	f003 f942 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 800161c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001622:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <MX_GPIO_Init+0x4d8>)
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	4829      	ldr	r0, [pc, #164]	@ (80016d8 <MX_GPIO_Init+0x4e0>)
 8001632:	f003 f935 	bl	80048a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2107      	movs	r1, #7
 800163a:	200b      	movs	r0, #11
 800163c:	f001 fbdc 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2107      	movs	r1, #7
 8001644:	200c      	movs	r0, #12
 8001646:	f001 fbd7 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2107      	movs	r1, #7
 800164e:	200d      	movs	r0, #13
 8001650:	f001 fbd2 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2107      	movs	r1, #7
 8001658:	200e      	movs	r0, #14
 800165a:	f001 fbcd 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2107      	movs	r1, #7
 8001662:	200f      	movs	r0, #15
 8001664:	f001 fbc8 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2107      	movs	r1, #7
 800166c:	2010      	movs	r0, #16
 800166e:	f001 fbc3 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2107      	movs	r1, #7
 8001676:	2011      	movs	r0, #17
 8001678:	f001 fbbe 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2107      	movs	r1, #7
 8001680:	2013      	movs	r0, #19
 8001682:	f001 fbb9 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001686:	2013      	movs	r0, #19
 8001688:	f001 fbd0 	bl	8002e2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2016      	movs	r0, #22
 8001692:	f001 fbb1 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001696:	2016      	movs	r0, #22
 8001698:	f001 fbc8 	bl	8002e2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2018      	movs	r0, #24
 80016a2:	f001 fba9 	bl	8002df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80016a6:	2018      	movs	r0, #24
 80016a8:	f001 fbc0 	bl	8002e2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 7, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2107      	movs	r1, #7
 80016b0:	201a      	movs	r0, #26
 80016b2:	f001 fba1 	bl	8002df8 <HAL_NVIC_SetPriority>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b6:	bf00      	nop
 80016b8:	3738      	adds	r7, #56	@ 0x38
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	42020800 	.word	0x42020800
 80016c4:	42020400 	.word	0x42020400
 80016c8:	42021800 	.word	0x42021800
 80016cc:	42021000 	.word	0x42021000
 80016d0:	10110000 	.word	0x10110000
 80016d4:	42020000 	.word	0x42020000
 80016d8:	42021400 	.word	0x42021400

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <Error_Handler+0x8>

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_MspInit+0x30>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f4:	4a08      	ldr	r2, [pc, #32]	@ (8001718 <HAL_MspInit+0x30>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_MspInit+0x30>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	46020c00 	.word	0x46020c00

0800171c <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0d6      	sub	sp, #344	@ 0x158
 8001720:	af00      	add	r7, sp, #0
 8001722:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001726:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800172a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800173c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001740:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001744:	4618      	mov	r0, r3
 8001746:	23c8      	movs	r3, #200	@ 0xc8
 8001748:	461a      	mov	r2, r3
 800174a:	2100      	movs	r1, #0
 800174c:	f00b fcd7 	bl	800d0fe <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001750:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001754:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a96      	ldr	r2, [pc, #600]	@ (80019b8 <HAL_MDF_MspInit+0x29c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	f040 8125 	bne.w	80019ae <HAL_MDF_MspInit+0x292>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001764:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001768:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 800176c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_PLL3;
 8001778:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800177c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001780:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001788:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800178c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001790:	2203      	movs	r2, #3
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
    PeriphClkInit.PLL3.PLL3M = 2;
 8001794:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001798:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800179c:	2202      	movs	r2, #2
 800179e:	631a      	str	r2, [r3, #48]	@ 0x30
    PeriphClkInit.PLL3.PLL3N = 48;
 80017a0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80017a4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017a8:	2230      	movs	r2, #48	@ 0x30
 80017aa:	635a      	str	r2, [r3, #52]	@ 0x34
    PeriphClkInit.PLL3.PLL3P = 2;
 80017ac:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80017b0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017b4:	2202      	movs	r2, #2
 80017b6:	639a      	str	r2, [r3, #56]	@ 0x38
    PeriphClkInit.PLL3.PLL3Q = 25;
 80017b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80017bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017c0:	2219      	movs	r2, #25
 80017c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    PeriphClkInit.PLL3.PLL3R = 2;
 80017c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80017c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017cc:	2202      	movs	r2, #2
 80017ce:	641a      	str	r2, [r3, #64]	@ 0x40
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_1;
 80017d0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80017d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017d8:	220c      	movs	r2, #12
 80017da:	645a      	str	r2, [r3, #68]	@ 0x44
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 80017dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80017e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017e4:	2200      	movs	r2, #0
 80017e6:	649a      	str	r2, [r3, #72]	@ 0x48
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP;
 80017e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80017ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 f82e 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_MDF_MspInit+0xee>
    {
      Error_Handler();
 8001806:	f7ff ff69 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800180a:	4b6c      	ldr	r3, [pc, #432]	@ (80019bc <HAL_MDF_MspInit+0x2a0>)
 800180c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001810:	4a6a      	ldr	r2, [pc, #424]	@ (80019bc <HAL_MDF_MspInit+0x2a0>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001816:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800181a:	4b68      	ldr	r3, [pc, #416]	@ (80019bc <HAL_MDF_MspInit+0x2a0>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001820:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001824:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001828:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001832:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001836:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001838:	4b60      	ldr	r3, [pc, #384]	@ (80019bc <HAL_MDF_MspInit+0x2a0>)
 800183a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800183e:	4a5f      	ldr	r2, [pc, #380]	@ (80019bc <HAL_MDF_MspInit+0x2a0>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001848:	4b5c      	ldr	r3, [pc, #368]	@ (80019bc <HAL_MDF_MspInit+0x2a0>)
 800184a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184e:	f003 0210 	and.w	r2, r3, #16
 8001852:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001856:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001860:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001864:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001866:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800186a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001886:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 800188a:	4619      	mov	r1, r3
 800188c:	484c      	ldr	r0, [pc, #304]	@ (80019c0 <HAL_MDF_MspInit+0x2a4>)
 800188e:	f003 f807 	bl	80048a0 <HAL_GPIO_Init>

    /* ADF1 DMA Init */
    /* GPDMA1_REQUEST_ADF1_FLT0 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001892:	2321      	movs	r3, #33	@ 0x21
 8001894:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADF1_FLT0;
 8001898:	2362      	movs	r3, #98	@ 0x62
 800189a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80018b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80018b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80018be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.SrcBurstLength = 1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.DestBurstLength = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80018d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80018da:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80018de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Mode = DMA_NORMAL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_UNPACK;
 80018f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 80018fc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001900:	4930      	ldr	r1, [pc, #192]	@ (80019c4 <HAL_MDF_MspInit+0x2a8>)
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fa00 	bl	8003d08 <HAL_DMAEx_List_BuildNode>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_MDF_MspInit+0x1f6>
    {
      Error_Handler();
 800190e:	f7ff fee5 	bl	80016dc <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 8001912:	4a2c      	ldr	r2, [pc, #176]	@ (80019c4 <HAL_MDF_MspInit+0x2a8>)
 8001914:	2100      	movs	r1, #0
 8001916:	482c      	ldr	r0, [pc, #176]	@ (80019c8 <HAL_MDF_MspInit+0x2ac>)
 8001918:	f002 fa0c 	bl	8003d34 <HAL_DMAEx_List_InsertNode>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_MDF_MspInit+0x20a>
    {
      Error_Handler();
 8001922:	f7ff fedb 	bl	80016dc <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 8001926:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <HAL_MDF_MspInit+0x2ac>)
 8001928:	f002 facd 	bl	8003ec6 <HAL_DMAEx_List_SetCircularMode>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_MDF_MspInit+0x21a>
    {
      Error_Handler();
 8001932:	f7ff fed3 	bl	80016dc <Error_Handler>
    }

    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8001936:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 8001938:	4a25      	ldr	r2, [pc, #148]	@ (80019d0 <HAL_MDF_MspInit+0x2b4>)
 800193a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 800193c:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 800193e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001942:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001944:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 8001946:	2200      	movs	r2, #0
 8001948:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 800194c:	2200      	movs	r2, #0
 800194e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001950:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 8001952:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001956:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001958:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 800195a:	2281      	movs	r2, #129	@ 0x81
 800195c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 800195e:	481b      	ldr	r0, [pc, #108]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 8001960:	f002 f8a6 	bl	8003ab0 <HAL_DMAEx_List_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_MDF_MspInit+0x252>
    {
      Error_Handler();
 800196a:	f7ff feb7 	bl	80016dc <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 800196e:	4916      	ldr	r1, [pc, #88]	@ (80019c8 <HAL_MDF_MspInit+0x2ac>)
 8001970:	4816      	ldr	r0, [pc, #88]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 8001972:	f002 fb09 	bl	8003f88 <HAL_DMAEx_List_LinkQ>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_MDF_MspInit+0x264>
    {
      Error_Handler();
 800197c:	f7ff feae 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(hmdf, hdma, handle_GPDMA1_Channel5);
 8001980:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001984:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a10      	ldr	r2, [pc, #64]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 800198c:	639a      	str	r2, [r3, #56]	@ 0x38
 800198e:	4a0f      	ldr	r2, [pc, #60]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 8001990:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001994:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 800199c:	2110      	movs	r1, #16
 800199e:	480b      	ldr	r0, [pc, #44]	@ (80019cc <HAL_MDF_MspInit+0x2b0>)
 80019a0:	f001 fdca 	bl	8003538 <HAL_DMA_ConfigChannelAttributes>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_MDF_MspInit+0x292>
    {
      Error_Handler();
 80019aa:	f7ff fe97 	bl	80016dc <Error_Handler>

  /* USER CODE END ADF1_MspInit 1 */

  }

}
 80019ae:	bf00      	nop
 80019b0:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	46024080 	.word	0x46024080
 80019bc:	46020c00 	.word	0x46020c00
 80019c0:	42021000 	.word	0x42021000
 80019c4:	200000ec 	.word	0x200000ec
 80019c8:	20000110 	.word	0x20000110
 80019cc:	20000128 	.word	0x20000128
 80019d0:	400202d0 	.word	0x400202d0

080019d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0c2      	sub	sp, #264	@ 0x108
 80019d8:	af00      	add	r7, sp, #0
 80019da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80019de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019e2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019f8:	22c8      	movs	r2, #200	@ 0xc8
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00b fb7e 	bl	800d0fe <memset>
  if(hi2c->Instance==I2C1)
 8001a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4aa8      	ldr	r2, [pc, #672]	@ (8001cb0 <HAL_I2C_MspInit+0x2dc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	f040 80eb 	bne.w	8001bec <HAL_I2C_MspInit+0x218>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a16:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f005 ff15 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_MspInit+0x68>
    {
      Error_Handler();
 8001a38:	f7ff fe50 	bl	80016dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	4b9d      	ldr	r3, [pc, #628]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a42:	4a9c      	ldr	r2, [pc, #624]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a4c:	4b99      	ldr	r3, [pc, #612]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5a:	23c0      	movs	r3, #192	@ 0xc0
 8001a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a72:	2304      	movs	r3, #4
 8001a74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	488e      	ldr	r0, [pc, #568]	@ (8001cb8 <HAL_I2C_MspInit+0x2e4>)
 8001a80:	f002 ff0e 	bl	80048a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a84:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a8a:	4a8a      	ldr	r2, [pc, #552]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001a8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a90:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a94:	4b87      	ldr	r3, [pc, #540]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	6a3b      	ldr	r3, [r7, #32]

    /* I2C1 DMA Init */
    /* GPDMA1_REQUEST_I2C1_TX Init */
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001aa2:	4b86      	ldr	r3, [pc, #536]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001aa4:	4a86      	ldr	r2, [pc, #536]	@ (8001cc0 <HAL_I2C_MspInit+0x2ec>)
 8001aa6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C1_TX;
 8001aa8:	4b84      	ldr	r3, [pc, #528]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001aaa:	220d      	movs	r2, #13
 8001aac:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001aae:	4b83      	ldr	r3, [pc, #524]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab4:	4b81      	ldr	r3, [pc, #516]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aba:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001abc:	4b7f      	ldr	r3, [pc, #508]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001abe:	2208      	movs	r2, #8
 8001ac0:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001ac8:	4b7c      	ldr	r3, [pc, #496]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001ace:	4b7b      	ldr	r3, [pc, #492]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001ad4:	4b79      	ldr	r3, [pc, #484]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001ada:	4b78      	ldr	r3, [pc, #480]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001ae0:	4b76      	ldr	r3, [pc, #472]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001ae6:	4b75      	ldr	r3, [pc, #468]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001aec:	4b73      	ldr	r3, [pc, #460]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001af2:	4b72      	ldr	r3, [pc, #456]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001af8:	4870      	ldr	r0, [pc, #448]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001afa:	f001 fa59 	bl	8002fb0 <HAL_DMA_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_MspInit+0x134>
    {
      Error_Handler();
 8001b04:	f7ff fdea 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 8001b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6a      	ldr	r2, [pc, #424]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001b14:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b16:	4a69      	ldr	r2, [pc, #420]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b24:	2110      	movs	r1, #16
 8001b26:	4865      	ldr	r0, [pc, #404]	@ (8001cbc <HAL_I2C_MspInit+0x2e8>)
 8001b28:	f001 fd06 	bl	8003538 <HAL_DMA_ConfigChannelAttributes>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_MspInit+0x162>
    {
      Error_Handler();
 8001b32:	f7ff fdd3 	bl	80016dc <Error_Handler>
    }

    /* GPDMA1_REQUEST_I2C1_RX Init */
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001b36:	4b63      	ldr	r3, [pc, #396]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b38:	4a63      	ldr	r2, [pc, #396]	@ (8001cc8 <HAL_I2C_MspInit+0x2f4>)
 8001b3a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C1_RX;
 8001b3c:	4b61      	ldr	r3, [pc, #388]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b42:	4b60      	ldr	r3, [pc, #384]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b48:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b54:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b56:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b5a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001b5c:	4b59      	ldr	r3, [pc, #356]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001b62:	4b58      	ldr	r3, [pc, #352]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b68:	4b56      	ldr	r3, [pc, #344]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001b6e:	4b55      	ldr	r3, [pc, #340]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001b74:	4b53      	ldr	r3, [pc, #332]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b7a:	4b52      	ldr	r3, [pc, #328]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001b80:	4b50      	ldr	r3, [pc, #320]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001b86:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001b8c:	484d      	ldr	r0, [pc, #308]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001b8e:	f001 fa0f 	bl	8002fb0 <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_MspInit+0x1c8>
    {
      Error_Handler();
 8001b98:	f7ff fda0 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 8001b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a47      	ldr	r2, [pc, #284]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001baa:	4a46      	ldr	r2, [pc, #280]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4842      	ldr	r0, [pc, #264]	@ (8001cc4 <HAL_I2C_MspInit+0x2f0>)
 8001bbc:	f001 fcbc 	bl	8003538 <HAL_DMA_ConfigChannelAttributes>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_MspInit+0x1f6>
    {
      Error_Handler();
 8001bc6:	f7ff fd89 	bl	80016dc <Error_Handler>
    }

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2037      	movs	r0, #55	@ 0x37
 8001bd0:	f001 f912 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bd4:	2037      	movs	r0, #55	@ 0x37
 8001bd6:	f001 f929 	bl	8002e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2038      	movs	r0, #56	@ 0x38
 8001be0:	f001 f90a 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001be4:	2038      	movs	r0, #56	@ 0x38
 8001be6:	f001 f921 	bl	8002e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001bea:	e12a      	b.n	8001e42 <HAL_I2C_MspInit+0x46e>
  else if(hi2c->Instance==I2C2)
 8001bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a34      	ldr	r2, [pc, #208]	@ (8001ccc <HAL_I2C_MspInit+0x2f8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d168      	bne.n	8001cd0 <HAL_I2C_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bfe:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 fe21 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_I2C_MspInit+0x250>
      Error_Handler();
 8001c20:	f7ff fd5c 	bl	80016dc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c2a:	4a22      	ldr	r2, [pc, #136]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001c42:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001c46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4a:	2312      	movs	r3, #18
 8001c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4813      	ldr	r0, [pc, #76]	@ (8001cb8 <HAL_I2C_MspInit+0x2e4>)
 8001c6a:	f002 fe19 	bl	80048a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c74:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001c76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c7a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_I2C_MspInit+0x2e0>)
 8001c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2039      	movs	r0, #57	@ 0x39
 8001c92:	f001 f8b1 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001c96:	2039      	movs	r0, #57	@ 0x39
 8001c98:	f001 f8c8 	bl	8002e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	203a      	movs	r0, #58	@ 0x3a
 8001ca2:	f001 f8a9 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ca6:	203a      	movs	r0, #58	@ 0x3a
 8001ca8:	f001 f8c0 	bl	8002e2c <HAL_NVIC_EnableIRQ>
}
 8001cac:	e0c9      	b.n	8001e42 <HAL_I2C_MspInit+0x46e>
 8001cae:	bf00      	nop
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	46020c00 	.word	0x46020c00
 8001cb8:	42020400 	.word	0x42020400
 8001cbc:	200002f0 	.word	0x200002f0
 8001cc0:	400201d0 	.word	0x400201d0
 8001cc4:	20000368 	.word	0x20000368
 8001cc8:	40020150 	.word	0x40020150
 8001ccc:	40005800 	.word	0x40005800
  else if(hi2c->Instance==I2C3)
 8001cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a5b      	ldr	r2, [pc, #364]	@ (8001e4c <HAL_I2C_MspInit+0x478>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d147      	bne.n	8001d72 <HAL_I2C_MspInit+0x39e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001ce2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f005 fdaf 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_I2C_MspInit+0x334>
      Error_Handler();
 8001d04:	f7ff fcea 	bl	80016dc <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d08:	4b51      	ldr	r3, [pc, #324]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d0e:	4a50      	ldr	r2, [pc, #320]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001d10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d18:	4b4d      	ldr	r3, [pc, #308]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d26:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001d2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2e:	2312      	movs	r3, #18
 8001d30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d40:	2304      	movs	r3, #4
 8001d42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d46:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4841      	ldr	r0, [pc, #260]	@ (8001e54 <HAL_I2C_MspInit+0x480>)
 8001d4e:	f002 fda7 	bl	80048a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d52:	4b3f      	ldr	r3, [pc, #252]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001d54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d58:	4a3d      	ldr	r2, [pc, #244]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d5e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001d62:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001d64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
}
 8001d70:	e067      	b.n	8001e42 <HAL_I2C_MspInit+0x46e>
  else if(hi2c->Instance==I2C4)
 8001d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a36      	ldr	r2, [pc, #216]	@ (8001e58 <HAL_I2C_MspInit+0x484>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d15e      	bne.n	8001e42 <HAL_I2C_MspInit+0x46e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001d84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f005 fd5e 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_MspInit+0x3d6>
      Error_Handler();
 8001da6:	f7ff fc99 	bl	80016dc <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	4b29      	ldr	r3, [pc, #164]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db0:	4a27      	ldr	r2, [pc, #156]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001db2:	f043 0308 	orr.w	r3, r3, #8
 8001db6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dba:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001dc8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001de2:	2304      	movs	r3, #4
 8001de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001dec:	4619      	mov	r1, r3
 8001dee:	481b      	ldr	r0, [pc, #108]	@ (8001e5c <HAL_I2C_MspInit+0x488>)
 8001df0:	f002 fd56 	bl	80048a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001df6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001dfa:	4a15      	ldr	r2, [pc, #84]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_I2C_MspInit+0x47c>)
 8001e06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001e0a:	f003 0202 	and.w	r2, r3, #2
 8001e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e12:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e1c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e20:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2065      	movs	r0, #101	@ 0x65
 8001e28:	f000 ffe6 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001e2c:	2065      	movs	r0, #101	@ 0x65
 8001e2e:	f000 fffd 	bl	8002e2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2064      	movs	r0, #100	@ 0x64
 8001e38:	f000 ffde 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001e3c:	2064      	movs	r0, #100	@ 0x64
 8001e3e:	f000 fff5 	bl	8002e2c <HAL_NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	46002800 	.word	0x46002800
 8001e50:	46020c00 	.word	0x46020c00
 8001e54:	42021800 	.word	0x42021800
 8001e58:	40008400 	.word	0x40008400
 8001e5c:	42020c00 	.word	0x42020c00

08001e60 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b0b6      	sub	sp, #216	@ 0xd8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	22c8      	movs	r2, #200	@ 0xc8
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00b f944 	bl	800d0fe <memset>
  if(hrng->Instance==RNG)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <HAL_RNG_MspInit+0x6c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d121      	bne.n	8001ec4 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001e80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	4618      	mov	r0, r3
 8001e98:	f005 fce0 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001ea2:	f7ff fc1b 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <HAL_RNG_MspInit+0x70>)
 8001ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eac:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_RNG_MspInit+0x70>)
 8001eae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_RNG_MspInit+0x70>)
 8001eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001ec4:	bf00      	nop
 8001ec6:	37d8      	adds	r7, #216	@ 0xd8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	420c0800 	.word	0x420c0800
 8001ed0:	46020c00 	.word	0x46020c00

08001ed4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	22c8      	movs	r2, #200	@ 0xc8
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f00b f90a 	bl	800d0fe <memset>
  if(hrtc->Instance==RTC)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1d      	ldr	r2, [pc, #116]	@ (8001f64 <HAL_RTC_MspInit+0x90>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d132      	bne.n	8001f5a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ef4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 fca5 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001f18:	f7ff fbe0 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_RTC_MspInit+0x94>)
 8001f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f22:	4a11      	ldr	r2, [pc, #68]	@ (8001f68 <HAL_RTC_MspInit+0x94>)
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <HAL_RTC_MspInit+0x94>)
 8001f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001f32:	4a0d      	ldr	r2, [pc, #52]	@ (8001f68 <HAL_RTC_MspInit+0x94>)
 8001f34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f38:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_RTC_MspInit+0x94>)
 8001f3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001f42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <HAL_RTC_MspInit+0x94>)
 8001f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f50:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <HAL_RTC_MspInit+0x94>)
 8001f52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001f5a:	bf00      	nop
 8001f5c:	37d8      	adds	r7, #216	@ 0xd8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	46007800 	.word	0x46007800
 8001f68:	46020c00 	.word	0x46020c00

08001f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0c2      	sub	sp, #264	@ 0x108
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f7a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f90:	22c8      	movs	r2, #200	@ 0xc8
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00b f8b2 	bl	800d0fe <memset>
  if(hspi->Instance==SPI1)
 8001f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4ab3      	ldr	r2, [pc, #716]	@ (8002274 <HAL_SPI_MspInit+0x308>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d15c      	bne.n	8002066 <HAL_SPI_MspInit+0xfa>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001fac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001fb8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 fc49 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8001fd0:	f7ff fb84 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fd4:	4ba8      	ldr	r3, [pc, #672]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 8001fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fda:	4aa7      	ldr	r2, [pc, #668]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 8001fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fe0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001fe4:	4ba4      	ldr	r3, [pc, #656]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 8001fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4ba1      	ldr	r3, [pc, #644]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 8001ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff8:	4a9f      	ldr	r2, [pc, #636]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002002:	4b9d      	ldr	r3, [pc, #628]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	623b      	str	r3, [r7, #32]
 800200e:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002010:	23c0      	movs	r3, #192	@ 0xc0
 8002012:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002028:	2305      	movs	r3, #5
 800202a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002032:	4619      	mov	r1, r3
 8002034:	4891      	ldr	r0, [pc, #580]	@ (800227c <HAL_SPI_MspInit+0x310>)
 8002036:	f002 fc33 	bl	80048a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800203a:	2320      	movs	r3, #32
 800203c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002046:	2301      	movs	r3, #1
 8002048:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204c:	2302      	movs	r3, #2
 800204e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002052:	2305      	movs	r3, #5
 8002054:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800205c:	4619      	mov	r1, r3
 800205e:	4887      	ldr	r0, [pc, #540]	@ (800227c <HAL_SPI_MspInit+0x310>)
 8002060:	f002 fc1e 	bl	80048a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002064:	e1a3      	b.n	80023ae <HAL_SPI_MspInit+0x442>
  else if(hspi->Instance==SPI2)
 8002066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800206a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a83      	ldr	r2, [pc, #524]	@ (8002280 <HAL_SPI_MspInit+0x314>)
 8002074:	4293      	cmp	r3, r2
 8002076:	f040 810f 	bne.w	8002298 <HAL_SPI_MspInit+0x32c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800207a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002090:	4618      	mov	r0, r3
 8002092:	f005 fbe3 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_SPI_MspInit+0x134>
      Error_Handler();
 800209c:	f7ff fb1e 	bl	80016dc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a0:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 80020a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020a6:	4a74      	ldr	r2, [pc, #464]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80020b0:	4b71      	ldr	r3, [pc, #452]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 80020b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020be:	4b6e      	ldr	r3, [pc, #440]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 80020c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020c4:	4a6c      	ldr	r2, [pc, #432]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <HAL_SPI_MspInit+0x30c>)
 80020d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020f4:	2305      	movs	r3, #5
 80020f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020fa:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80020fe:	4619      	mov	r1, r3
 8002100:	4860      	ldr	r0, [pc, #384]	@ (8002284 <HAL_SPI_MspInit+0x318>)
 8002102:	f002 fbcd 	bl	80048a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002106:	230c      	movs	r3, #12
 8002108:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002118:	2302      	movs	r3, #2
 800211a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800211e:	2305      	movs	r3, #5
 8002120:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002124:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002128:	4619      	mov	r1, r3
 800212a:	4856      	ldr	r0, [pc, #344]	@ (8002284 <HAL_SPI_MspInit+0x318>)
 800212c:	f002 fbb8 	bl	80048a0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002130:	4b55      	ldr	r3, [pc, #340]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002132:	4a56      	ldr	r2, [pc, #344]	@ (800228c <HAL_SPI_MspInit+0x320>)
 8002134:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 8002136:	4b54      	ldr	r3, [pc, #336]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002138:	2209      	movs	r2, #9
 800213a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800213c:	4b52      	ldr	r3, [pc, #328]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002142:	4b51      	ldr	r3, [pc, #324]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002144:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002148:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 800214a:	4b4f      	ldr	r3, [pc, #316]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 800214c:	2208      	movs	r2, #8
 800214e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8002150:	4b4d      	ldr	r3, [pc, #308]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002156:	4b4c      	ldr	r3, [pc, #304]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800215c:	4b4a      	ldr	r3, [pc, #296]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002162:	4b49      	ldr	r3, [pc, #292]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002164:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002168:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 800216a:	4b47      	ldr	r3, [pc, #284]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 800216c:	2201      	movs	r2, #1
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8002170:	4b45      	ldr	r3, [pc, #276]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002172:	2201      	movs	r2, #1
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002176:	4b44      	ldr	r3, [pc, #272]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002178:	2200      	movs	r2, #0
 800217a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800217c:	4b42      	ldr	r3, [pc, #264]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8002182:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 8002184:	2200      	movs	r2, #0
 8002186:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002188:	483f      	ldr	r0, [pc, #252]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 800218a:	f000 ff11 	bl	8002fb0 <HAL_DMA_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_SPI_MspInit+0x22c>
      Error_Handler();
 8002194:	f7ff faa2 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8002198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800219c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a39      	ldr	r2, [pc, #228]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 80021a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80021a8:	4a37      	ldr	r2, [pc, #220]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 80021aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80021b6:	2110      	movs	r1, #16
 80021b8:	4833      	ldr	r0, [pc, #204]	@ (8002288 <HAL_SPI_MspInit+0x31c>)
 80021ba:	f001 f9bd 	bl	8003538 <HAL_DMA_ConfigChannelAttributes>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_SPI_MspInit+0x25c>
      Error_Handler();
 80021c4:	f7ff fa8a 	bl	80016dc <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80021c8:	4b31      	ldr	r3, [pc, #196]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021ca:	4a32      	ldr	r2, [pc, #200]	@ (8002294 <HAL_SPI_MspInit+0x328>)
 80021cc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80021ce:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021d0:	2208      	movs	r2, #8
 80021d2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80021d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021da:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80021e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021ec:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80021ee:	4b28      	ldr	r3, [pc, #160]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80021f4:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80021fa:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 80021fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002200:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8002202:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 8002204:	2201      	movs	r2, #1
 8002206:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8002208:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 800220a:	2201      	movs	r2, #1
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 8002210:	2200      	movs	r2, #0
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800221a:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 800221c:	2200      	movs	r2, #0
 800221e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002220:	481b      	ldr	r0, [pc, #108]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 8002222:	f000 fec5 	bl	8002fb0 <HAL_DMA_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_SPI_MspInit+0x2c4>
      Error_Handler();
 800222c:	f7ff fa56 	bl	80016dc <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 8002230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 800223c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002240:	4a13      	ldr	r2, [pc, #76]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 8002242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800224e:	2110      	movs	r1, #16
 8002250:	480f      	ldr	r0, [pc, #60]	@ (8002290 <HAL_SPI_MspInit+0x324>)
 8002252:	f001 f971 	bl	8003538 <HAL_DMA_ConfigChannelAttributes>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_SPI_MspInit+0x2f4>
      Error_Handler();
 800225c:	f7ff fa3e 	bl	80016dc <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	203c      	movs	r0, #60	@ 0x3c
 8002266:	f000 fdc7 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800226a:	203c      	movs	r0, #60	@ 0x3c
 800226c:	f000 fdde 	bl	8002e2c <HAL_NVIC_EnableIRQ>
}
 8002270:	e09d      	b.n	80023ae <HAL_SPI_MspInit+0x442>
 8002272:	bf00      	nop
 8002274:	40013000 	.word	0x40013000
 8002278:	46020c00 	.word	0x46020c00
 800227c:	42020000 	.word	0x42020000
 8002280:	40003800 	.word	0x40003800
 8002284:	42022000 	.word	0x42022000
 8002288:	2000066c 	.word	0x2000066c
 800228c:	400200d0 	.word	0x400200d0
 8002290:	200006e4 	.word	0x200006e4
 8002294:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 8002298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800229c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a44      	ldr	r2, [pc, #272]	@ (80023b8 <HAL_SPI_MspInit+0x44c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	f040 8081 	bne.w	80023ae <HAL_SPI_MspInit+0x442>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80022ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 80022b8:	2310      	movs	r3, #16
 80022ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 faca 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_SPI_MspInit+0x366>
      Error_Handler();
 80022ce:	f7ff fa05 	bl	80016dc <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022d2:	4b3a      	ldr	r3, [pc, #232]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 80022d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022d8:	4a38      	ldr	r2, [pc, #224]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 80022da:	f043 0320 	orr.w	r3, r3, #32
 80022de:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80022e2:	4b36      	ldr	r3, [pc, #216]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 80022e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022f0:	4b32      	ldr	r3, [pc, #200]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 80022f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f6:	4a31      	ldr	r2, [pc, #196]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 80022f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002300:	4b2e      	ldr	r3, [pc, #184]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 8002302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 8002310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002314:	4a29      	ldr	r2, [pc, #164]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800231e:	4b27      	ldr	r3, [pc, #156]	@ (80023bc <HAL_SPI_MspInit+0x450>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800232c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002330:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233a:	2301      	movs	r3, #1
 800233c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002346:	2306      	movs	r3, #6
 8002348:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800234c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002350:	4619      	mov	r1, r3
 8002352:	481b      	ldr	r0, [pc, #108]	@ (80023c0 <HAL_SPI_MspInit+0x454>)
 8002354:	f002 faa4 	bl	80048a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002358:	2320      	movs	r3, #32
 800235a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002370:	2306      	movs	r3, #6
 8002372:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800237a:	4619      	mov	r1, r3
 800237c:	4811      	ldr	r0, [pc, #68]	@ (80023c4 <HAL_SPI_MspInit+0x458>)
 800237e:	f002 fa8f 	bl	80048a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002386:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002396:	2302      	movs	r3, #2
 8002398:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800239c:	2306      	movs	r3, #6
 800239e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4805      	ldr	r0, [pc, #20]	@ (80023c0 <HAL_SPI_MspInit+0x454>)
 80023aa:	f002 fa79 	bl	80048a0 <HAL_GPIO_Init>
}
 80023ae:	bf00      	nop
 80023b0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	46002000 	.word	0x46002000
 80023bc:	46020c00 	.word	0x46020c00
 80023c0:	42021800 	.word	0x42021800
 80023c4:	42020400 	.word	0x42020400

080023c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	@ 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e8:	d136      	bne.n	8002458 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <HAL_TIM_Base_MspInit+0x98>)
 80023ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002460 <HAL_TIM_Base_MspInit+0x98>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80023fa:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <HAL_TIM_Base_MspInit+0x98>)
 80023fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002408:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <HAL_TIM_Base_MspInit+0x98>)
 800240a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800240e:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <HAL_TIM_Base_MspInit+0x98>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_TIM_Base_MspInit+0x98>)
 800241a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002438:	2301      	movs	r3, #1
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	4808      	ldr	r0, [pc, #32]	@ (8002464 <HAL_TIM_Base_MspInit+0x9c>)
 8002444:	f002 fa2c 	bl	80048a0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	202d      	movs	r0, #45	@ 0x2d
 800244e:	f000 fcd3 	bl	8002df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002452:	202d      	movs	r0, #45	@ 0x2d
 8002454:	f000 fcea 	bl	8002e2c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	@ 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	46020c00 	.word	0x46020c00
 8002464:	42020400 	.word	0x42020400

08002468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0be      	sub	sp, #248	@ 0xf8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002480:	f107 0318 	add.w	r3, r7, #24
 8002484:	22c8      	movs	r2, #200	@ 0xc8
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f00a fe38 	bl	800d0fe <memset>
  if(huart->Instance==UART4)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a4b      	ldr	r2, [pc, #300]	@ (80025c0 <HAL_UART_MspInit+0x158>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d145      	bne.n	8002524 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002498:	f04f 0208 	mov.w	r2, #8
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	4618      	mov	r0, r3
 80024ae:	f005 f9d5 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80024b8:	f7ff f910 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024bc:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 80024be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024c2:	4a40      	ldr	r2, [pc, #256]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 80024c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024c8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80024cc:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 80024ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 80024dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e0:	4a38      	ldr	r2, [pc, #224]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ea:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 80024ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002510:	2308      	movs	r3, #8
 8002512:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800251a:	4619      	mov	r1, r3
 800251c:	482a      	ldr	r0, [pc, #168]	@ (80025c8 <HAL_UART_MspInit+0x160>)
 800251e:	f002 f9bf 	bl	80048a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002522:	e049      	b.n	80025b8 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <HAL_UART_MspInit+0x164>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d144      	bne.n	80025b8 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800252e:	f04f 0202 	mov.w	r2, #2
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800253a:	2300      	movs	r3, #0
 800253c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800253e:	f107 0318 	add.w	r3, r7, #24
 8002542:	4618      	mov	r0, r3
 8002544:	f005 f98a 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_UART_MspInit+0xea>
      Error_Handler();
 800254e:	f7ff f8c5 	bl	80016dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002552:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 8002554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002558:	4a1a      	ldr	r2, [pc, #104]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 800255a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800255e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002562:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 8002564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002570:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 8002572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002576:	4a13      	ldr	r2, [pc, #76]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002580:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <HAL_UART_MspInit+0x15c>)
 8002582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 800258e:	2360      	movs	r3, #96	@ 0x60
 8002590:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025a6:	2307      	movs	r3, #7
 80025a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4807      	ldr	r0, [pc, #28]	@ (80025d0 <HAL_UART_MspInit+0x168>)
 80025b4:	f002 f974 	bl	80048a0 <HAL_GPIO_Init>
}
 80025b8:	bf00      	nop
 80025ba:	37f8      	adds	r7, #248	@ 0xf8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40004c00 	.word	0x40004c00
 80025c4:	46020c00 	.word	0x46020c00
 80025c8:	42020000 	.word	0x42020000
 80025cc:	40004400 	.word	0x40004400
 80025d0:	42020c00 	.word	0x42020c00

080025d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b0be      	sub	sp, #248	@ 0xf8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ec:	f107 0318 	add.w	r3, r7, #24
 80025f0:	22c8      	movs	r2, #200	@ 0xc8
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00a fd82 	bl	800d0fe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a38      	ldr	r2, [pc, #224]	@ (80026e0 <HAL_PCD_MspInit+0x10c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d169      	bne.n	80026d8 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002604:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	4618      	mov	r0, r3
 800261c:	f005 f91e 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8002626:	f7ff f859 	bl	80016dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b2e      	ldr	r3, [pc, #184]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 800262c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002630:	4a2c      	ldr	r2, [pc, #176]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 800263c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002648:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800264c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002662:	230a      	movs	r3, #10
 8002664:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002668:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800266c:	4619      	mov	r1, r3
 800266e:	481e      	ldr	r0, [pc, #120]	@ (80026e8 <HAL_PCD_MspInit+0x114>)
 8002670:	f002 f916 	bl	80048a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 8002676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800267a:	4a1a      	ldr	r2, [pc, #104]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002680:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 8002686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800268a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d119      	bne.n	80026d4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a6:	4a0f      	ldr	r2, [pc, #60]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80026be:	f003 fdf1 	bl	80062a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c2:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 80026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c8:	4a06      	ldr	r2, [pc, #24]	@ (80026e4 <HAL_PCD_MspInit+0x110>)
 80026ca:	f023 0304 	bic.w	r3, r3, #4
 80026ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80026d2:	e001      	b.n	80026d8 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 80026d4:	f003 fde6 	bl	80062a4 <HAL_PWREx_EnableVddUSB>
}
 80026d8:	bf00      	nop
 80026da:	37f8      	adds	r7, #248	@ 0xf8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	42040000 	.word	0x42040000
 80026e4:	46020c00 	.word	0x46020c00
 80026e8:	42020000 	.word	0x42020000

080026ec <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b0bc      	sub	sp, #240	@ 0xf0
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	22c8      	movs	r2, #200	@ 0xc8
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f00a fcfe 	bl	800d0fe <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2e      	ldr	r2, [pc, #184]	@ (80027c0 <HAL_SAI_MspInit+0xd4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d155      	bne.n	80027b8 <HAL_SAI_MspInit+0xcc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800270c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 8002718:	2340      	movs	r3, #64	@ 0x40
 800271a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	4618      	mov	r0, r3
 8002724:	f005 f89a 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_SAI_MspInit+0x46>
    {
      Error_Handler();
 800272e:	f7fe ffd5 	bl	80016dc <Error_Handler>
    }

    if (SAI1_client == 0)
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_SAI_MspInit+0xd8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <HAL_SAI_MspInit+0x6c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800273a:	4b23      	ldr	r3, [pc, #140]	@ (80027c8 <HAL_SAI_MspInit+0xdc>)
 800273c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002740:	4a21      	ldr	r2, [pc, #132]	@ (80027c8 <HAL_SAI_MspInit+0xdc>)
 8002742:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002746:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800274a:	4b1f      	ldr	r3, [pc, #124]	@ (80027c8 <HAL_SAI_MspInit+0xdc>)
 800274c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002758:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_SAI_MspInit+0xd8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <HAL_SAI_MspInit+0xd8>)
 8002760:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PA10     ------> SAI1_SD_A
    PA8     ------> SAI1_SCK_A
    PA9     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002762:	2304      	movs	r3, #4
 8002764:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800277a:	230d      	movs	r3, #13
 800277c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002780:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002784:	4619      	mov	r1, r3
 8002786:	4811      	ldr	r0, [pc, #68]	@ (80027cc <HAL_SAI_MspInit+0xe0>)
 8002788:	f002 f88a 	bl	80048a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 800278c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002790:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80027a6:	230d      	movs	r3, #13
 80027a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027b0:	4619      	mov	r1, r3
 80027b2:	4807      	ldr	r0, [pc, #28]	@ (80027d0 <HAL_SAI_MspInit+0xe4>)
 80027b4:	f002 f874 	bl	80048a0 <HAL_GPIO_Init>

    }
}
 80027b8:	bf00      	nop
 80027ba:	37f0      	adds	r7, #240	@ 0xf0
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40015404 	.word	0x40015404
 80027c4:	20000db4 	.word	0x20000db4
 80027c8:	46020c00 	.word	0x46020c00
 80027cc:	42021000 	.word	0x42021000
 80027d0:	42020000 	.word	0x42020000

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <NMI_Handler+0x4>

080027dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <HardFault_Handler+0x4>

080027e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <MemManage_Handler+0x4>

080027ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282a:	f000 f9e9 	bl	8002c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}

08002832 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8002836:	2001      	movs	r0, #1
 8002838:	f002 fa22 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}

08002840 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8002844:	2002      	movs	r0, #2
 8002846:	f002 fa1b 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}

0800284e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8002852:	2004      	movs	r0, #4
 8002854:	f002 fa14 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}

0800285c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WC_INTB_Pin);
 8002860:	2008      	movs	r0, #8
 8002862:	f002 fa0d 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}

0800286a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 800286e:	2010      	movs	r0, #16
 8002870:	f002 fa06 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_Pin);
 800287c:	2020      	movs	r0, #32
 800287e:	f002 f9ff 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}

08002886 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 800288a:	2040      	movs	r0, #64	@ 0x40
 800288c:	f002 f9f8 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}

08002894 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PRESS_INT_Pin);
 8002898:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800289c:	f002 f9f0 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80028a8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80028ac:	f002 f9e8 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 80028b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028bc:	f002 f9e0 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 80028c8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80028cc:	f002 f9d8 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */

  /* USER CODE END EXTI15_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80028d8:	4802      	ldr	r0, [pc, #8]	@ (80028e4 <GPDMA1_Channel0_IRQHandler+0x10>)
 80028da:	f000 fcbe 	bl	800325a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200006e4 	.word	0x200006e4

080028e8 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <GPDMA1_Channel1_IRQHandler+0x10>)
 80028ee:	f000 fcb4 	bl	800325a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000066c 	.word	0x2000066c

080028fc <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <GPDMA1_Channel2_IRQHandler+0x10>)
 8002902:	f000 fcaa 	bl	800325a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000368 	.word	0x20000368

08002910 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <GPDMA1_Channel3_IRQHandler+0x10>)
 8002916:	f000 fca0 	bl	800325a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200002f0 	.word	0x200002f0

08002924 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <GPDMA1_Channel5_IRQHandler+0x10>)
 800292a:	f000 fc96 	bl	800325a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000128 	.word	0x20000128

08002938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800293c:	4807      	ldr	r0, [pc, #28]	@ (800295c <TIM2_IRQHandler+0x24>)
 800293e:	f008 feed 	bl	800b71c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_flag = !led_flag;
 8002942:	4b07      	ldr	r3, [pc, #28]	@ (8002960 <TIM2_IRQHandler+0x28>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	4b02      	ldr	r3, [pc, #8]	@ (8002960 <TIM2_IRQHandler+0x28>)
 8002956:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}
 800295c:	2000075c 	.word	0x2000075c
 8002960:	20000029 	.word	0x20000029

08002964 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <I2C1_EV_IRQHandler+0x10>)
 800296a:	f002 fa60 	bl	8004e2e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200001a0 	.word	0x200001a0

08002978 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800297c:	4802      	ldr	r0, [pc, #8]	@ (8002988 <I2C1_ER_IRQHandler+0x10>)
 800297e:	f002 fa70 	bl	8004e62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200001a0 	.word	0x200001a0

0800298c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002990:	4802      	ldr	r0, [pc, #8]	@ (800299c <I2C2_EV_IRQHandler+0x10>)
 8002992:	f002 fa4c 	bl	8004e2e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200001f4 	.word	0x200001f4

080029a0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80029a4:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <I2C2_ER_IRQHandler+0x10>)
 80029a6:	f002 fa5c 	bl	8004e62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200001f4 	.word	0x200001f4

080029b4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80029b8:	4802      	ldr	r0, [pc, #8]	@ (80029c4 <SPI2_IRQHandler+0x10>)
 80029ba:	f008 fa9b 	bl	800aef4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000054c 	.word	0x2000054c

080029c8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 Error interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80029cc:	4802      	ldr	r0, [pc, #8]	@ (80029d8 <I2C4_EV_IRQHandler+0x10>)
 80029ce:	f002 fa2e 	bl	8004e2e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000029c 	.word	0x2000029c

080029dc <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 Event interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80029e0:	4802      	ldr	r0, [pc, #8]	@ (80029ec <I2C4_ER_IRQHandler+0x10>)
 80029e2:	f002 fa3e 	bl	8004e62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000029c 	.word	0x2000029c

080029f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029f4:	4b18      	ldr	r3, [pc, #96]	@ (8002a58 <SystemInit+0x68>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fa:	4a17      	ldr	r2, [pc, #92]	@ (8002a58 <SystemInit+0x68>)
 80029fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002a04:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <SystemInit+0x6c>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002a0a:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <SystemInit+0x6c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a10:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <SystemInit+0x6c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a16:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <SystemInit+0x6c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <SystemInit+0x6c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0e      	ldr	r2, [pc, #56]	@ (8002a5c <SystemInit+0x6c>)
 8002a22:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a26:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <SystemInit+0x6c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <SystemInit+0x6c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a09      	ldr	r2, [pc, #36]	@ (8002a5c <SystemInit+0x6c>)
 8002a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <SystemInit+0x6c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a44:	4b04      	ldr	r3, [pc, #16]	@ (8002a58 <SystemInit+0x68>)
 8002a46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a4a:	609a      	str	r2, [r3, #8]
  #endif
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00
 8002a5c:	46020c00 	.word	0x46020c00

08002a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a98 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a64:	f7ff ffc4 	bl	80029f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a6a:	e003      	b.n	8002a74 <LoopCopyDataInit>

08002a6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a72:	3104      	adds	r1, #4

08002a74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a74:	480a      	ldr	r0, [pc, #40]	@ (8002aa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a76:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a7c:	d3f6      	bcc.n	8002a6c <CopyDataInit>
	ldr	r2, =_sbss
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a80:	e002      	b.n	8002a88 <LoopFillZerobss>

08002a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a84:	f842 3b04 	str.w	r3, [r2], #4

08002a88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a88:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <LoopForever+0x16>)
	cmp	r2, r3
 8002a8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a8c:	d3f9      	bcc.n	8002a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f00a fb3f 	bl	800d110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a92:	f7fd fd7d 	bl	8000590 <main>

08002a96 <LoopForever>:

LoopForever:
    b LoopForever
 8002a96:	e7fe      	b.n	8002a96 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002a98:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002a9c:	0800d280 	.word	0x0800d280
	ldr	r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002aa4:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8002aa8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002aac:	20000de0 	.word	0x20000de0

08002ab0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC1_IRQHandler>
	...

08002ab4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab8:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <HAL_Init+0x50>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <HAL_Init+0x50>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f000 f98c 	bl	8002de2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002aca:	f004 fce9 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_Init+0x54>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	490c      	ldr	r1, [pc, #48]	@ (8002b0c <HAL_Init+0x58>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8002b10 <HAL_Init+0x5c>)
 8002ae2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ae4:	2004      	movs	r0, #4
 8002ae6:	f000 f9d1 	bl	8002e8c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aea:	200f      	movs	r0, #15
 8002aec:	f000 f812 	bl	8002b14 <HAL_InitTick>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e002      	b.n	8002b00 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002afa:	f7fe fdf5 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40022000 	.word	0x40022000
 8002b08:	46020c00 	.word	0x46020c00
 8002b0c:	0800d170 	.word	0x0800d170
 8002b10:	20000000 	.word	0x20000000

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b20:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <HAL_InitTick+0xdc>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e05c      	b.n	8002be6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b2c:	4b31      	ldr	r3, [pc, #196]	@ (8002bf4 <HAL_InitTick+0xe0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d10c      	bne.n	8002b52 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b38:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf8 <HAL_InitTick+0xe4>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <HAL_InitTick+0xdc>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e037      	b.n	8002bc2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002b52:	f000 f9f3 	bl	8002f3c <HAL_SYSTICK_GetCLKSourceConfig>
 8002b56:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d023      	beq.n	8002ba6 <HAL_InitTick+0x92>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d82d      	bhi.n	8002bc0 <HAL_InitTick+0xac>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_InitTick+0x5e>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d00d      	beq.n	8002b8c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002b70:	e026      	b.n	8002bc0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002b72:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <HAL_InitTick+0xe4>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <HAL_InitTick+0xdc>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	60fb      	str	r3, [r7, #12]
        break;
 8002b8a:	e01a      	b.n	8002bc2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002b8c:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <HAL_InitTick+0xdc>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b96:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b9a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	60fb      	str	r3, [r7, #12]
        break;
 8002ba4:	e00d      	b.n	8002bc2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002ba6:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <HAL_InitTick+0xdc>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
        break;
 8002bbe:	e000      	b.n	8002bc2 <HAL_InitTick+0xae>
        break;
 8002bc0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f940 	bl	8002e48 <HAL_SYSTICK_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e009      	b.n	8002be6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bda:	f000 f90d 	bl	8002df8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002bde:	4a07      	ldr	r2, [pc, #28]	@ (8002bfc <HAL_InitTick+0xe8>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000008 	.word	0x20000008
 8002bf4:	e000e010 	.word	0xe000e010
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000004 	.word	0x20000004

08002c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_IncTick+0x20>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_IncTick+0x24>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a04      	ldr	r2, [pc, #16]	@ (8002c24 <HAL_IncTick+0x24>)
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000008 	.word	0x20000008
 8002c24:	20000db8 	.word	0x20000db8

08002c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_GetTick+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000db8 	.word	0x20000db8

08002c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff ffee 	bl	8002c28 <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c58:	d005      	beq.n	8002c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <HAL_Delay+0x44>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c66:	bf00      	nop
 8002c68:	f7ff ffde 	bl	8002c28 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d8f7      	bhi.n	8002c68 <HAL_Delay+0x28>
  {
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000008 	.word	0x20000008

08002c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x44>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cba:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x44>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60d3      	str	r3, [r2, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	f003 0307 	and.w	r3, r3, #7
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db0b      	blt.n	8002d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	4907      	ldr	r1, [pc, #28]	@ (8002d24 <__NVIC_EnableIRQ+0x38>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100

08002d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	db0a      	blt.n	8002d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	490c      	ldr	r1, [pc, #48]	@ (8002d74 <__NVIC_SetPriority+0x4c>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d50:	e00a      	b.n	8002d68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4908      	ldr	r1, [pc, #32]	@ (8002d78 <__NVIC_SetPriority+0x50>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	3b04      	subs	r3, #4
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	440b      	add	r3, r1
 8002d66:	761a      	strb	r2, [r3, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000e100 	.word	0xe000e100
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	@ 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f1c3 0307 	rsb	r3, r3, #7
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	bf28      	it	cs
 8002d9a:	2304      	movcs	r3, #4
 8002d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3304      	adds	r3, #4
 8002da2:	2b06      	cmp	r3, #6
 8002da4:	d902      	bls.n	8002dac <NVIC_EncodePriority+0x30>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3b03      	subs	r3, #3
 8002daa:	e000      	b.n	8002dae <NVIC_EncodePriority+0x32>
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	43d9      	mvns	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	4313      	orrs	r3, r2
         );
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3724      	adds	r7, #36	@ 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ff4c 	bl	8002c88 <__NVIC_SetPriorityGrouping>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e06:	f7ff ff63 	bl	8002cd0 <__NVIC_GetPriorityGrouping>
 8002e0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	6978      	ldr	r0, [r7, #20]
 8002e12:	f7ff ffb3 	bl	8002d7c <NVIC_EncodePriority>
 8002e16:	4602      	mov	r2, r0
 8002e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff82 	bl	8002d28 <__NVIC_SetPriority>
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff56 	bl	8002cec <__NVIC_EnableIRQ>
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e58:	d301      	bcc.n	8002e5e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00d      	b.n	8002e7a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <HAL_SYSTICK_Config+0x40>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <HAL_SYSTICK_Config+0x40>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_SYSTICK_Config+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <HAL_SYSTICK_Config+0x40>)
 8002e72:	f043 0303 	orr.w	r3, r3, #3
 8002e76:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000e010 	.word	0xe000e010

08002e8c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d844      	bhi.n	8002f24 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ec3 	.word	0x08002ec3
 8002ea4:	08002ee1 	.word	0x08002ee1
 8002ea8:	08002f03 	.word	0x08002f03
 8002eac:	08002f25 	.word	0x08002f25
 8002eb0:	08002eb5 	.word	0x08002eb5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6013      	str	r3, [r2, #0]
      break;
 8002ec0:	e031      	b.n	8002f26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ed4:	4a18      	ldr	r2, [pc, #96]	@ (8002f38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ed6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002eda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002ede:	e022      	b.n	8002f26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002ee0:	4b14      	ldr	r3, [pc, #80]	@ (8002f34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002eec:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002ef6:	4a10      	ldr	r2, [pc, #64]	@ (8002f38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ef8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002efc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f00:	e011      	b.n	8002f26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f02:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a0b      	ldr	r2, [pc, #44]	@ (8002f34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f14:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f18:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f22:	e000      	b.n	8002f26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002f24:	bf00      	nop
  }
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000e010 	.word	0xe000e010
 8002f38:	46020c00 	.word	0x46020c00

08002f3c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002f4e:	2304      	movs	r3, #4
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	e021      	b.n	8002f98 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002f54:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f5a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002f5e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f66:	d011      	beq.n	8002f8c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f6e:	d810      	bhi.n	8002f92 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f7c:	d003      	beq.n	8002f86 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002f7e:	e008      	b.n	8002f92 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002f80:	2300      	movs	r3, #0
 8002f82:	607b      	str	r3, [r7, #4]
        break;
 8002f84:	e008      	b.n	8002f98 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002f86:	2301      	movs	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	607b      	str	r3, [r7, #4]
        break;
 8002f90:	e002      	b.n	8002f98 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
        break;
 8002f96:	bf00      	nop
    }
  }
  return systick_source;
 8002f98:	687b      	ldr	r3, [r7, #4]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010
 8002fac:	46020c00 	.word	0x46020c00

08002fb0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff fe36 	bl	8002c28 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0db      	b.n	8003180 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8003188 <HAL_DMA_Init+0x1d8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	f000 809f 	beq.w	8003112 <HAL_DMA_Init+0x162>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6c      	ldr	r2, [pc, #432]	@ (800318c <HAL_DMA_Init+0x1dc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f000 8099 	beq.w	8003112 <HAL_DMA_Init+0x162>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8003190 <HAL_DMA_Init+0x1e0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	f000 8093 	beq.w	8003112 <HAL_DMA_Init+0x162>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a68      	ldr	r2, [pc, #416]	@ (8003194 <HAL_DMA_Init+0x1e4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	f000 808d 	beq.w	8003112 <HAL_DMA_Init+0x162>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a66      	ldr	r2, [pc, #408]	@ (8003198 <HAL_DMA_Init+0x1e8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	f000 8087 	beq.w	8003112 <HAL_DMA_Init+0x162>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a64      	ldr	r2, [pc, #400]	@ (800319c <HAL_DMA_Init+0x1ec>)
 800300a:	4293      	cmp	r3, r2
 800300c:	f000 8081 	beq.w	8003112 <HAL_DMA_Init+0x162>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a62      	ldr	r2, [pc, #392]	@ (80031a0 <HAL_DMA_Init+0x1f0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d07b      	beq.n	8003112 <HAL_DMA_Init+0x162>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a61      	ldr	r2, [pc, #388]	@ (80031a4 <HAL_DMA_Init+0x1f4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d076      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a5f      	ldr	r2, [pc, #380]	@ (80031a8 <HAL_DMA_Init+0x1f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d071      	beq.n	8003112 <HAL_DMA_Init+0x162>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5e      	ldr	r2, [pc, #376]	@ (80031ac <HAL_DMA_Init+0x1fc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d06c      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5c      	ldr	r2, [pc, #368]	@ (80031b0 <HAL_DMA_Init+0x200>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d067      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a5b      	ldr	r2, [pc, #364]	@ (80031b4 <HAL_DMA_Init+0x204>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d062      	beq.n	8003112 <HAL_DMA_Init+0x162>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a59      	ldr	r2, [pc, #356]	@ (80031b8 <HAL_DMA_Init+0x208>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d05d      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a58      	ldr	r2, [pc, #352]	@ (80031bc <HAL_DMA_Init+0x20c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d058      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a56      	ldr	r2, [pc, #344]	@ (80031c0 <HAL_DMA_Init+0x210>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d053      	beq.n	8003112 <HAL_DMA_Init+0x162>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a55      	ldr	r2, [pc, #340]	@ (80031c4 <HAL_DMA_Init+0x214>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d04e      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a53      	ldr	r2, [pc, #332]	@ (80031c8 <HAL_DMA_Init+0x218>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d049      	beq.n	8003112 <HAL_DMA_Init+0x162>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a52      	ldr	r2, [pc, #328]	@ (80031cc <HAL_DMA_Init+0x21c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d044      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a50      	ldr	r2, [pc, #320]	@ (80031d0 <HAL_DMA_Init+0x220>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d03f      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a4f      	ldr	r2, [pc, #316]	@ (80031d4 <HAL_DMA_Init+0x224>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d03a      	beq.n	8003112 <HAL_DMA_Init+0x162>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a4d      	ldr	r2, [pc, #308]	@ (80031d8 <HAL_DMA_Init+0x228>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d035      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4c      	ldr	r2, [pc, #304]	@ (80031dc <HAL_DMA_Init+0x22c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d030      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a4a      	ldr	r2, [pc, #296]	@ (80031e0 <HAL_DMA_Init+0x230>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02b      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a49      	ldr	r2, [pc, #292]	@ (80031e4 <HAL_DMA_Init+0x234>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d026      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a47      	ldr	r2, [pc, #284]	@ (80031e8 <HAL_DMA_Init+0x238>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d021      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a46      	ldr	r2, [pc, #280]	@ (80031ec <HAL_DMA_Init+0x23c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d01c      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a44      	ldr	r2, [pc, #272]	@ (80031f0 <HAL_DMA_Init+0x240>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d017      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a43      	ldr	r2, [pc, #268]	@ (80031f4 <HAL_DMA_Init+0x244>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d012      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a41      	ldr	r2, [pc, #260]	@ (80031f8 <HAL_DMA_Init+0x248>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_DMA_Init+0x162>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a40      	ldr	r2, [pc, #256]	@ (80031fc <HAL_DMA_Init+0x24c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d008      	beq.n	8003112 <HAL_DMA_Init+0x162>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a3e      	ldr	r2, [pc, #248]	@ (8003200 <HAL_DMA_Init+0x250>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <HAL_DMA_Init+0x162>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a3d      	ldr	r2, [pc, #244]	@ (8003204 <HAL_DMA_Init+0x254>)
 8003110:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0206 	orr.w	r2, r2, #6
 8003130:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003132:	e00f      	b.n	8003154 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003134:	f7ff fd78 	bl	8002c28 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b05      	cmp	r3, #5
 8003140:	d908      	bls.n	8003154 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2210      	movs	r2, #16
 8003146:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2203      	movs	r2, #3
 800314c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e015      	b.n	8003180 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e8      	bne.n	8003134 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa24 	bl	80035b0 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40020050 	.word	0x40020050
 800318c:	50020050 	.word	0x50020050
 8003190:	400200d0 	.word	0x400200d0
 8003194:	500200d0 	.word	0x500200d0
 8003198:	40020150 	.word	0x40020150
 800319c:	50020150 	.word	0x50020150
 80031a0:	400201d0 	.word	0x400201d0
 80031a4:	500201d0 	.word	0x500201d0
 80031a8:	40020250 	.word	0x40020250
 80031ac:	50020250 	.word	0x50020250
 80031b0:	400202d0 	.word	0x400202d0
 80031b4:	500202d0 	.word	0x500202d0
 80031b8:	40020350 	.word	0x40020350
 80031bc:	50020350 	.word	0x50020350
 80031c0:	400203d0 	.word	0x400203d0
 80031c4:	500203d0 	.word	0x500203d0
 80031c8:	40020450 	.word	0x40020450
 80031cc:	50020450 	.word	0x50020450
 80031d0:	400204d0 	.word	0x400204d0
 80031d4:	500204d0 	.word	0x500204d0
 80031d8:	40020550 	.word	0x40020550
 80031dc:	50020550 	.word	0x50020550
 80031e0:	400205d0 	.word	0x400205d0
 80031e4:	500205d0 	.word	0x500205d0
 80031e8:	40020650 	.word	0x40020650
 80031ec:	50020650 	.word	0x50020650
 80031f0:	400206d0 	.word	0x400206d0
 80031f4:	500206d0 	.word	0x500206d0
 80031f8:	40020750 	.word	0x40020750
 80031fc:	50020750 	.word	0x50020750
 8003200:	400207d0 	.word	0x400207d0
 8003204:	500207d0 	.word	0x500207d0

08003208 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e019      	b.n	800324e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d004      	beq.n	8003230 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e00e      	b.n	800324e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2204      	movs	r2, #4
 8003234:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800326a:	f023 030f 	bic.w	r3, r3, #15
 800326e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	3b50      	subs	r3, #80	@ 0x50
 800327a:	09db      	lsrs	r3, r3, #7
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2201      	movs	r2, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 813b 	beq.w	8003510 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d011      	beq.n	80032cc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032be:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d011      	beq.n	80032fe <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032f0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f6:	f043 0202 	orr.w	r2, r3, #2
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d011      	beq.n	8003330 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003322:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d011      	beq.n	8003362 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003354:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	f043 0208 	orr.w	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00c      	beq.n	8003398 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003386:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d04c      	beq.n	8003440 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d045      	beq.n	8003440 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033bc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d12e      	bne.n	8003428 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033d8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0202 	orr.w	r2, r2, #2
 80033e8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003402:	2201      	movs	r2, #1
 8003404:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2200      	movs	r2, #0
 800340c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d07a      	beq.n	8003514 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
        }

        return;
 8003426:	e075      	b.n	8003514 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2205      	movs	r2, #5
 800342c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d039      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d032      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d116      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003488:	2201      	movs	r2, #1
 800348a:	731a      	strb	r2, [r3, #12]
 800348c:	e008      	b.n	80034a0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80034a8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d025      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0202 	orr.w	r2, r2, #2
 80034d8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f2:	2201      	movs	r2, #1
 80034f4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
 800350e:	e002      	b.n	8003516 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003514:	bf00      	nop
    }
  }
}
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800352a:	b2db      	uxtb	r3, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e02b      	b.n	80035a4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003554:	f023 030f 	bic.w	r3, r3, #15
 8003558:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003562:	3b50      	subs	r3, #80	@ 0x50
 8003564:	09db      	lsrs	r3, r3, #7
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2201      	movs	r2, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d012      	beq.n	80035a2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f003 0311 	and.w	r3, r3, #17
 8003582:	2b11      	cmp	r3, #17
 8003584:	d106      	bne.n	8003594 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e006      	b.n	80035a2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	43db      	mvns	r3, r3
 800359c:	401a      	ands	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a53      	ldr	r2, [pc, #332]	@ (800373c <DMA_Init+0x18c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	f000 80a0 	beq.w	8003736 <DMA_Init+0x186>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a51      	ldr	r2, [pc, #324]	@ (8003740 <DMA_Init+0x190>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	f000 809a 	beq.w	8003736 <DMA_Init+0x186>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a4f      	ldr	r2, [pc, #316]	@ (8003744 <DMA_Init+0x194>)
 8003608:	4293      	cmp	r3, r2
 800360a:	f000 8094 	beq.w	8003736 <DMA_Init+0x186>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4d      	ldr	r2, [pc, #308]	@ (8003748 <DMA_Init+0x198>)
 8003614:	4293      	cmp	r3, r2
 8003616:	f000 808e 	beq.w	8003736 <DMA_Init+0x186>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a4b      	ldr	r2, [pc, #300]	@ (800374c <DMA_Init+0x19c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	f000 8088 	beq.w	8003736 <DMA_Init+0x186>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a49      	ldr	r2, [pc, #292]	@ (8003750 <DMA_Init+0x1a0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	f000 8082 	beq.w	8003736 <DMA_Init+0x186>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a47      	ldr	r2, [pc, #284]	@ (8003754 <DMA_Init+0x1a4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d07c      	beq.n	8003736 <DMA_Init+0x186>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a45      	ldr	r2, [pc, #276]	@ (8003758 <DMA_Init+0x1a8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d077      	beq.n	8003736 <DMA_Init+0x186>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a44      	ldr	r2, [pc, #272]	@ (800375c <DMA_Init+0x1ac>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d072      	beq.n	8003736 <DMA_Init+0x186>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a42      	ldr	r2, [pc, #264]	@ (8003760 <DMA_Init+0x1b0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d06d      	beq.n	8003736 <DMA_Init+0x186>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a41      	ldr	r2, [pc, #260]	@ (8003764 <DMA_Init+0x1b4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d068      	beq.n	8003736 <DMA_Init+0x186>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3f      	ldr	r2, [pc, #252]	@ (8003768 <DMA_Init+0x1b8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d063      	beq.n	8003736 <DMA_Init+0x186>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3e      	ldr	r2, [pc, #248]	@ (800376c <DMA_Init+0x1bc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d05e      	beq.n	8003736 <DMA_Init+0x186>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a3c      	ldr	r2, [pc, #240]	@ (8003770 <DMA_Init+0x1c0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d059      	beq.n	8003736 <DMA_Init+0x186>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a3b      	ldr	r2, [pc, #236]	@ (8003774 <DMA_Init+0x1c4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d054      	beq.n	8003736 <DMA_Init+0x186>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a39      	ldr	r2, [pc, #228]	@ (8003778 <DMA_Init+0x1c8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04f      	beq.n	8003736 <DMA_Init+0x186>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a38      	ldr	r2, [pc, #224]	@ (800377c <DMA_Init+0x1cc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d04a      	beq.n	8003736 <DMA_Init+0x186>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a36      	ldr	r2, [pc, #216]	@ (8003780 <DMA_Init+0x1d0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d045      	beq.n	8003736 <DMA_Init+0x186>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a35      	ldr	r2, [pc, #212]	@ (8003784 <DMA_Init+0x1d4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d040      	beq.n	8003736 <DMA_Init+0x186>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a33      	ldr	r2, [pc, #204]	@ (8003788 <DMA_Init+0x1d8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d03b      	beq.n	8003736 <DMA_Init+0x186>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a32      	ldr	r2, [pc, #200]	@ (800378c <DMA_Init+0x1dc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d036      	beq.n	8003736 <DMA_Init+0x186>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a30      	ldr	r2, [pc, #192]	@ (8003790 <DMA_Init+0x1e0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d031      	beq.n	8003736 <DMA_Init+0x186>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003794 <DMA_Init+0x1e4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d02c      	beq.n	8003736 <DMA_Init+0x186>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003798 <DMA_Init+0x1e8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d027      	beq.n	8003736 <DMA_Init+0x186>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2c      	ldr	r2, [pc, #176]	@ (800379c <DMA_Init+0x1ec>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d022      	beq.n	8003736 <DMA_Init+0x186>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <DMA_Init+0x1f0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01d      	beq.n	8003736 <DMA_Init+0x186>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a29      	ldr	r2, [pc, #164]	@ (80037a4 <DMA_Init+0x1f4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d018      	beq.n	8003736 <DMA_Init+0x186>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a27      	ldr	r2, [pc, #156]	@ (80037a8 <DMA_Init+0x1f8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <DMA_Init+0x186>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a26      	ldr	r2, [pc, #152]	@ (80037ac <DMA_Init+0x1fc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <DMA_Init+0x186>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a24      	ldr	r2, [pc, #144]	@ (80037b0 <DMA_Init+0x200>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d009      	beq.n	8003736 <DMA_Init+0x186>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a23      	ldr	r2, [pc, #140]	@ (80037b4 <DMA_Init+0x204>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <DMA_Init+0x186>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a21      	ldr	r2, [pc, #132]	@ (80037b8 <DMA_Init+0x208>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d142      	bne.n	80037bc <DMA_Init+0x20c>
 8003736:	2301      	movs	r3, #1
 8003738:	e041      	b.n	80037be <DMA_Init+0x20e>
 800373a:	bf00      	nop
 800373c:	40020050 	.word	0x40020050
 8003740:	50020050 	.word	0x50020050
 8003744:	400200d0 	.word	0x400200d0
 8003748:	500200d0 	.word	0x500200d0
 800374c:	40020150 	.word	0x40020150
 8003750:	50020150 	.word	0x50020150
 8003754:	400201d0 	.word	0x400201d0
 8003758:	500201d0 	.word	0x500201d0
 800375c:	40020250 	.word	0x40020250
 8003760:	50020250 	.word	0x50020250
 8003764:	400202d0 	.word	0x400202d0
 8003768:	500202d0 	.word	0x500202d0
 800376c:	40020350 	.word	0x40020350
 8003770:	50020350 	.word	0x50020350
 8003774:	400203d0 	.word	0x400203d0
 8003778:	500203d0 	.word	0x500203d0
 800377c:	40020450 	.word	0x40020450
 8003780:	50020450 	.word	0x50020450
 8003784:	400204d0 	.word	0x400204d0
 8003788:	500204d0 	.word	0x500204d0
 800378c:	40020550 	.word	0x40020550
 8003790:	50020550 	.word	0x50020550
 8003794:	400205d0 	.word	0x400205d0
 8003798:	500205d0 	.word	0x500205d0
 800379c:	40020650 	.word	0x40020650
 80037a0:	50020650 	.word	0x50020650
 80037a4:	400206d0 	.word	0x400206d0
 80037a8:	500206d0 	.word	0x500206d0
 80037ac:	40020750 	.word	0x40020750
 80037b0:	50020750 	.word	0x50020750
 80037b4:	400207d0 	.word	0x400207d0
 80037b8:	500207d0 	.word	0x500207d0
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	051b      	lsls	r3, r3, #20
 80037ce:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80037d2:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	3b01      	subs	r3, #1
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80037e0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381a:	f040 80b0 	bne.w	800397e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a82      	ldr	r2, [pc, #520]	@ (8003a2c <DMA_Init+0x47c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	f000 80a0 	beq.w	800396a <DMA_Init+0x3ba>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a80      	ldr	r2, [pc, #512]	@ (8003a30 <DMA_Init+0x480>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f000 809a 	beq.w	800396a <DMA_Init+0x3ba>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a34 <DMA_Init+0x484>)
 800383c:	4293      	cmp	r3, r2
 800383e:	f000 8094 	beq.w	800396a <DMA_Init+0x3ba>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7c      	ldr	r2, [pc, #496]	@ (8003a38 <DMA_Init+0x488>)
 8003848:	4293      	cmp	r3, r2
 800384a:	f000 808e 	beq.w	800396a <DMA_Init+0x3ba>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7a      	ldr	r2, [pc, #488]	@ (8003a3c <DMA_Init+0x48c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	f000 8088 	beq.w	800396a <DMA_Init+0x3ba>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a78      	ldr	r2, [pc, #480]	@ (8003a40 <DMA_Init+0x490>)
 8003860:	4293      	cmp	r3, r2
 8003862:	f000 8082 	beq.w	800396a <DMA_Init+0x3ba>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a76      	ldr	r2, [pc, #472]	@ (8003a44 <DMA_Init+0x494>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d07c      	beq.n	800396a <DMA_Init+0x3ba>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a74      	ldr	r2, [pc, #464]	@ (8003a48 <DMA_Init+0x498>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d077      	beq.n	800396a <DMA_Init+0x3ba>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a73      	ldr	r2, [pc, #460]	@ (8003a4c <DMA_Init+0x49c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d072      	beq.n	800396a <DMA_Init+0x3ba>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a71      	ldr	r2, [pc, #452]	@ (8003a50 <DMA_Init+0x4a0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d06d      	beq.n	800396a <DMA_Init+0x3ba>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a70      	ldr	r2, [pc, #448]	@ (8003a54 <DMA_Init+0x4a4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d068      	beq.n	800396a <DMA_Init+0x3ba>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a58 <DMA_Init+0x4a8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d063      	beq.n	800396a <DMA_Init+0x3ba>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6d      	ldr	r2, [pc, #436]	@ (8003a5c <DMA_Init+0x4ac>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d05e      	beq.n	800396a <DMA_Init+0x3ba>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003a60 <DMA_Init+0x4b0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d059      	beq.n	800396a <DMA_Init+0x3ba>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003a64 <DMA_Init+0x4b4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d054      	beq.n	800396a <DMA_Init+0x3ba>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a68      	ldr	r2, [pc, #416]	@ (8003a68 <DMA_Init+0x4b8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d04f      	beq.n	800396a <DMA_Init+0x3ba>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a67      	ldr	r2, [pc, #412]	@ (8003a6c <DMA_Init+0x4bc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <DMA_Init+0x3ba>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a65      	ldr	r2, [pc, #404]	@ (8003a70 <DMA_Init+0x4c0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <DMA_Init+0x3ba>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a64      	ldr	r2, [pc, #400]	@ (8003a74 <DMA_Init+0x4c4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <DMA_Init+0x3ba>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a62      	ldr	r2, [pc, #392]	@ (8003a78 <DMA_Init+0x4c8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <DMA_Init+0x3ba>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a61      	ldr	r2, [pc, #388]	@ (8003a7c <DMA_Init+0x4cc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <DMA_Init+0x3ba>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5f      	ldr	r2, [pc, #380]	@ (8003a80 <DMA_Init+0x4d0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <DMA_Init+0x3ba>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a5e      	ldr	r2, [pc, #376]	@ (8003a84 <DMA_Init+0x4d4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <DMA_Init+0x3ba>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5c      	ldr	r2, [pc, #368]	@ (8003a88 <DMA_Init+0x4d8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <DMA_Init+0x3ba>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a8c <DMA_Init+0x4dc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <DMA_Init+0x3ba>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a59      	ldr	r2, [pc, #356]	@ (8003a90 <DMA_Init+0x4e0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <DMA_Init+0x3ba>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a58      	ldr	r2, [pc, #352]	@ (8003a94 <DMA_Init+0x4e4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <DMA_Init+0x3ba>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a56      	ldr	r2, [pc, #344]	@ (8003a98 <DMA_Init+0x4e8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <DMA_Init+0x3ba>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a55      	ldr	r2, [pc, #340]	@ (8003a9c <DMA_Init+0x4ec>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <DMA_Init+0x3ba>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a53      	ldr	r2, [pc, #332]	@ (8003aa0 <DMA_Init+0x4f0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <DMA_Init+0x3ba>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a52      	ldr	r2, [pc, #328]	@ (8003aa4 <DMA_Init+0x4f4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <DMA_Init+0x3ba>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a50      	ldr	r2, [pc, #320]	@ (8003aa8 <DMA_Init+0x4f8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <DMA_Init+0x3be>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <DMA_Init+0x3c0>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e008      	b.n	8003990 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003986:	d103      	bne.n	8003990 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800398e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003996:	4b45      	ldr	r3, [pc, #276]	@ (8003aac <DMA_Init+0x4fc>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a36      	ldr	r2, [pc, #216]	@ (8003a8c <DMA_Init+0x4dc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d022      	beq.n	80039fc <DMA_Init+0x44c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a35      	ldr	r2, [pc, #212]	@ (8003a90 <DMA_Init+0x4e0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d01d      	beq.n	80039fc <DMA_Init+0x44c>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a33      	ldr	r2, [pc, #204]	@ (8003a94 <DMA_Init+0x4e4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d018      	beq.n	80039fc <DMA_Init+0x44c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a32      	ldr	r2, [pc, #200]	@ (8003a98 <DMA_Init+0x4e8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d013      	beq.n	80039fc <DMA_Init+0x44c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a30      	ldr	r2, [pc, #192]	@ (8003a9c <DMA_Init+0x4ec>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00e      	beq.n	80039fc <DMA_Init+0x44c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2f      	ldr	r2, [pc, #188]	@ (8003aa0 <DMA_Init+0x4f0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d009      	beq.n	80039fc <DMA_Init+0x44c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa4 <DMA_Init+0x4f4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <DMA_Init+0x44c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa8 <DMA_Init+0x4f8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <DMA_Init+0x450>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <DMA_Init+0x452>
 8003a00:	2300      	movs	r3, #0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40020050 	.word	0x40020050
 8003a30:	50020050 	.word	0x50020050
 8003a34:	400200d0 	.word	0x400200d0
 8003a38:	500200d0 	.word	0x500200d0
 8003a3c:	40020150 	.word	0x40020150
 8003a40:	50020150 	.word	0x50020150
 8003a44:	400201d0 	.word	0x400201d0
 8003a48:	500201d0 	.word	0x500201d0
 8003a4c:	40020250 	.word	0x40020250
 8003a50:	50020250 	.word	0x50020250
 8003a54:	400202d0 	.word	0x400202d0
 8003a58:	500202d0 	.word	0x500202d0
 8003a5c:	40020350 	.word	0x40020350
 8003a60:	50020350 	.word	0x50020350
 8003a64:	400203d0 	.word	0x400203d0
 8003a68:	500203d0 	.word	0x500203d0
 8003a6c:	40020450 	.word	0x40020450
 8003a70:	50020450 	.word	0x50020450
 8003a74:	400204d0 	.word	0x400204d0
 8003a78:	500204d0 	.word	0x500204d0
 8003a7c:	40020550 	.word	0x40020550
 8003a80:	50020550 	.word	0x50020550
 8003a84:	400205d0 	.word	0x400205d0
 8003a88:	500205d0 	.word	0x500205d0
 8003a8c:	40020650 	.word	0x40020650
 8003a90:	50020650 	.word	0x50020650
 8003a94:	400206d0 	.word	0x400206d0
 8003a98:	500206d0 	.word	0x500206d0
 8003a9c:	40020750 	.word	0x40020750
 8003aa0:	50020750 	.word	0x50020750
 8003aa4:	400207d0 	.word	0x400207d0
 8003aa8:	500207d0 	.word	0x500207d0
 8003aac:	3cc03180 	.word	0x3cc03180

08003ab0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff f8b6 	bl	8002c28 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0db      	b.n	8003c80 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6e      	ldr	r2, [pc, #440]	@ (8003c88 <HAL_DMAEx_List_Init+0x1d8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	f000 809f 	beq.w	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6c      	ldr	r2, [pc, #432]	@ (8003c8c <HAL_DMAEx_List_Init+0x1dc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f000 8099 	beq.w	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c90 <HAL_DMAEx_List_Init+0x1e0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	f000 8093 	beq.w	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a68      	ldr	r2, [pc, #416]	@ (8003c94 <HAL_DMAEx_List_Init+0x1e4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	f000 808d 	beq.w	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a66      	ldr	r2, [pc, #408]	@ (8003c98 <HAL_DMAEx_List_Init+0x1e8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	f000 8087 	beq.w	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a64      	ldr	r2, [pc, #400]	@ (8003c9c <HAL_DMAEx_List_Init+0x1ec>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	f000 8081 	beq.w	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a62      	ldr	r2, [pc, #392]	@ (8003ca0 <HAL_DMAEx_List_Init+0x1f0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d07b      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a61      	ldr	r2, [pc, #388]	@ (8003ca4 <HAL_DMAEx_List_Init+0x1f4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d076      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca8 <HAL_DMAEx_List_Init+0x1f8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d071      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5e      	ldr	r2, [pc, #376]	@ (8003cac <HAL_DMAEx_List_Init+0x1fc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d06c      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb0 <HAL_DMAEx_List_Init+0x200>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d067      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb4 <HAL_DMAEx_List_Init+0x204>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d062      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a59      	ldr	r2, [pc, #356]	@ (8003cb8 <HAL_DMAEx_List_Init+0x208>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d05d      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a58      	ldr	r2, [pc, #352]	@ (8003cbc <HAL_DMAEx_List_Init+0x20c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d058      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a56      	ldr	r2, [pc, #344]	@ (8003cc0 <HAL_DMAEx_List_Init+0x210>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d053      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a55      	ldr	r2, [pc, #340]	@ (8003cc4 <HAL_DMAEx_List_Init+0x214>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d04e      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a53      	ldr	r2, [pc, #332]	@ (8003cc8 <HAL_DMAEx_List_Init+0x218>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d049      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a52      	ldr	r2, [pc, #328]	@ (8003ccc <HAL_DMAEx_List_Init+0x21c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d044      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a50      	ldr	r2, [pc, #320]	@ (8003cd0 <HAL_DMAEx_List_Init+0x220>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d03f      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a4f      	ldr	r2, [pc, #316]	@ (8003cd4 <HAL_DMAEx_List_Init+0x224>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d03a      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a4d      	ldr	r2, [pc, #308]	@ (8003cd8 <HAL_DMAEx_List_Init+0x228>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d035      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a4c      	ldr	r2, [pc, #304]	@ (8003cdc <HAL_DMAEx_List_Init+0x22c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d030      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce0 <HAL_DMAEx_List_Init+0x230>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d02b      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a49      	ldr	r2, [pc, #292]	@ (8003ce4 <HAL_DMAEx_List_Init+0x234>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d026      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a47      	ldr	r2, [pc, #284]	@ (8003ce8 <HAL_DMAEx_List_Init+0x238>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d021      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a46      	ldr	r2, [pc, #280]	@ (8003cec <HAL_DMAEx_List_Init+0x23c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d01c      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a44      	ldr	r2, [pc, #272]	@ (8003cf0 <HAL_DMAEx_List_Init+0x240>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d017      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a43      	ldr	r2, [pc, #268]	@ (8003cf4 <HAL_DMAEx_List_Init+0x244>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d012      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a41      	ldr	r2, [pc, #260]	@ (8003cf8 <HAL_DMAEx_List_Init+0x248>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00d      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a40      	ldr	r2, [pc, #256]	@ (8003cfc <HAL_DMAEx_List_Init+0x24c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d008      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a3e      	ldr	r2, [pc, #248]	@ (8003d00 <HAL_DMAEx_List_Init+0x250>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <HAL_DMAEx_List_Init+0x162>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a3d      	ldr	r2, [pc, #244]	@ (8003d04 <HAL_DMAEx_List_Init+0x254>)
 8003c10:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0206 	orr.w	r2, r2, #6
 8003c30:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003c32:	e00f      	b.n	8003c54 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003c34:	f7fe fff8 	bl	8002c28 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d908      	bls.n	8003c54 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2210      	movs	r2, #16
 8003c46:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e015      	b.n	8003c80 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e8      	bne.n	8003c34 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa36 	bl	80040d4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40020050 	.word	0x40020050
 8003c8c:	50020050 	.word	0x50020050
 8003c90:	400200d0 	.word	0x400200d0
 8003c94:	500200d0 	.word	0x500200d0
 8003c98:	40020150 	.word	0x40020150
 8003c9c:	50020150 	.word	0x50020150
 8003ca0:	400201d0 	.word	0x400201d0
 8003ca4:	500201d0 	.word	0x500201d0
 8003ca8:	40020250 	.word	0x40020250
 8003cac:	50020250 	.word	0x50020250
 8003cb0:	400202d0 	.word	0x400202d0
 8003cb4:	500202d0 	.word	0x500202d0
 8003cb8:	40020350 	.word	0x40020350
 8003cbc:	50020350 	.word	0x50020350
 8003cc0:	400203d0 	.word	0x400203d0
 8003cc4:	500203d0 	.word	0x500203d0
 8003cc8:	40020450 	.word	0x40020450
 8003ccc:	50020450 	.word	0x50020450
 8003cd0:	400204d0 	.word	0x400204d0
 8003cd4:	500204d0 	.word	0x500204d0
 8003cd8:	40020550 	.word	0x40020550
 8003cdc:	50020550 	.word	0x50020550
 8003ce0:	400205d0 	.word	0x400205d0
 8003ce4:	500205d0 	.word	0x500205d0
 8003ce8:	40020650 	.word	0x40020650
 8003cec:	50020650 	.word	0x50020650
 8003cf0:	400206d0 	.word	0x400206d0
 8003cf4:	500206d0 	.word	0x500206d0
 8003cf8:	40020750 	.word	0x40020750
 8003cfc:	50020750 	.word	0x50020750
 8003d00:	400207d0 	.word	0x400207d0
 8003d04:	500207d0 	.word	0x500207d0

08003d08 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_DMAEx_List_BuildNode+0x16>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e004      	b.n	8003d2c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fb2d 	bl	8004384 <DMA_List_BuildNode>

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08c      	sub	sp, #48	@ 0x30
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_DMAEx_List_InsertNode+0x18>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b6      	b.n	8003ebe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d104      	bne.n	8003d62 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0ad      	b.n	8003ebe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fc5c 	bl	8004628 <DMA_List_CheckNodesBaseAddresses>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2205      	movs	r2, #5
 8003d7a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e09e      	b.n	8003ebe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fc7d 	bl	8004688 <DMA_List_CheckNodesTypes>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2204      	movs	r2, #4
 8003d98:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e08f      	b.n	8003ebe <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2202      	movs	r2, #2
 8003da2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003daa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fca3 	bl	8004700 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11a      	bne.n	8003df8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	e06c      	b.n	8003eb0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003de2:	4013      	ands	r3, r2
 8003de4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003de8:	4319      	orrs	r1, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2202      	movs	r2, #2
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	e05b      	b.n	8003eb0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003e08:	4013      	ands	r3, r2
 8003e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e0e:	4319      	orrs	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e043      	b.n	8003ea6 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8003e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e20:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	461a      	mov	r2, r3
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fc98 	bl	8004760 <DMA_List_FindNode>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d132      	bne.n	8003e9c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d11a      	bne.n	8003e76 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003e52:	4013      	ands	r3, r2
 8003e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e58:	4319      	orrs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003e66:	4013      	ands	r3, r2
 8003e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e6c:	4319      	orrs	r1, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e74:	e017      	b.n	8003ea6 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8003e76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e92:	4319      	orrs	r1, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e9a:	e004      	b.n	8003ea6 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2206      	movs	r2, #6
 8003ea0:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00b      	b.n	8003ebe <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3730      	adds	r7, #48	@ 0x30
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08a      	sub	sp, #40	@ 0x28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e052      	b.n	8003f7e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e049      	b.n	8003f7e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d101      	bne.n	8003f02 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e03d      	b.n	8003f7e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2204      	movs	r2, #4
 8003f06:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e038      	b.n	8003f7e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d104      	bne.n	8003f1e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2204      	movs	r2, #4
 8003f18:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e02f      	b.n	8003f7e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f107 0220 	add.w	r2, r7, #32
 8003f32:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fbe2 	bl	8004700 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	461a      	mov	r2, r3
 8003f46:	2100      	movs	r1, #0
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fc09 	bl	8004760 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003f58:	4013      	ands	r3, r2
 8003f5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4610      	mov	r0, r2
 8003f60:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003f62:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003f64:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3728      	adds	r7, #40	@ 0x28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_DMAEx_List_LinkQ+0x16>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e072      	b.n	8004088 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003fa8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d002      	beq.n	8003fbc <HAL_DMAEx_List_LinkQ+0x34>
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d108      	bne.n	8003fce <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2240      	movs	r2, #64	@ 0x40
 8003fc0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e05c      	b.n	8004088 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	7b1b      	ldrb	r3, [r3, #12]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d104      	bne.n	8003fe2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e052      	b.n	8004088 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2b      	ldr	r2, [pc, #172]	@ (8004094 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_DMAEx_List_LinkQ+0xaa>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a29      	ldr	r2, [pc, #164]	@ (8004098 <HAL_DMAEx_List_LinkQ+0x110>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01d      	beq.n	8004032 <HAL_DMAEx_List_LinkQ+0xaa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a28      	ldr	r2, [pc, #160]	@ (800409c <HAL_DMAEx_List_LinkQ+0x114>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_DMAEx_List_LinkQ+0xaa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a26      	ldr	r2, [pc, #152]	@ (80040a0 <HAL_DMAEx_List_LinkQ+0x118>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_DMAEx_List_LinkQ+0xaa>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a25      	ldr	r2, [pc, #148]	@ (80040a4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_DMAEx_List_LinkQ+0xaa>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a23      	ldr	r2, [pc, #140]	@ (80040a8 <HAL_DMAEx_List_LinkQ+0x120>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_DMAEx_List_LinkQ+0xaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a22      	ldr	r2, [pc, #136]	@ (80040ac <HAL_DMAEx_List_LinkQ+0x124>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_DMAEx_List_LinkQ+0xaa>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a20      	ldr	r2, [pc, #128]	@ (80040b0 <HAL_DMAEx_List_LinkQ+0x128>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_DMAEx_List_LinkQ+0xae>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_DMAEx_List_LinkQ+0xb0>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2203      	movs	r2, #3
 800404e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e019      	b.n	8004088 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	2b81      	cmp	r3, #129	@ 0x81
 800405a:	d108      	bne.n	800406e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2204      	movs	r2, #4
 8004068:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e00c      	b.n	8004088 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2204      	movs	r2, #4
 800407a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e003      	b.n	8004088 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40020650 	.word	0x40020650
 8004098:	50020650 	.word	0x50020650
 800409c:	400206d0 	.word	0x400206d0
 80040a0:	500206d0 	.word	0x500206d0
 80040a4:	40020750 	.word	0x40020750
 80040a8:	50020750 	.word	0x50020750
 80040ac:	400207d0 	.word	0x400207d0
 80040b0:	500207d0 	.word	0x500207d0

080040b4 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	b2db      	uxtb	r3, r3
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a85      	ldr	r2, [pc, #532]	@ (8004304 <DMA_List_Init+0x230>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f000 80a0 	beq.w	8004234 <DMA_List_Init+0x160>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a83      	ldr	r2, [pc, #524]	@ (8004308 <DMA_List_Init+0x234>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	f000 809a 	beq.w	8004234 <DMA_List_Init+0x160>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a81      	ldr	r2, [pc, #516]	@ (800430c <DMA_List_Init+0x238>)
 8004106:	4293      	cmp	r3, r2
 8004108:	f000 8094 	beq.w	8004234 <DMA_List_Init+0x160>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7f      	ldr	r2, [pc, #508]	@ (8004310 <DMA_List_Init+0x23c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	f000 808e 	beq.w	8004234 <DMA_List_Init+0x160>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a7d      	ldr	r2, [pc, #500]	@ (8004314 <DMA_List_Init+0x240>)
 800411e:	4293      	cmp	r3, r2
 8004120:	f000 8088 	beq.w	8004234 <DMA_List_Init+0x160>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a7b      	ldr	r2, [pc, #492]	@ (8004318 <DMA_List_Init+0x244>)
 800412a:	4293      	cmp	r3, r2
 800412c:	f000 8082 	beq.w	8004234 <DMA_List_Init+0x160>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a79      	ldr	r2, [pc, #484]	@ (800431c <DMA_List_Init+0x248>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d07c      	beq.n	8004234 <DMA_List_Init+0x160>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a78      	ldr	r2, [pc, #480]	@ (8004320 <DMA_List_Init+0x24c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d077      	beq.n	8004234 <DMA_List_Init+0x160>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a76      	ldr	r2, [pc, #472]	@ (8004324 <DMA_List_Init+0x250>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d072      	beq.n	8004234 <DMA_List_Init+0x160>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a75      	ldr	r2, [pc, #468]	@ (8004328 <DMA_List_Init+0x254>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d06d      	beq.n	8004234 <DMA_List_Init+0x160>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a73      	ldr	r2, [pc, #460]	@ (800432c <DMA_List_Init+0x258>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d068      	beq.n	8004234 <DMA_List_Init+0x160>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a72      	ldr	r2, [pc, #456]	@ (8004330 <DMA_List_Init+0x25c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d063      	beq.n	8004234 <DMA_List_Init+0x160>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a70      	ldr	r2, [pc, #448]	@ (8004334 <DMA_List_Init+0x260>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d05e      	beq.n	8004234 <DMA_List_Init+0x160>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6f      	ldr	r2, [pc, #444]	@ (8004338 <DMA_List_Init+0x264>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d059      	beq.n	8004234 <DMA_List_Init+0x160>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a6d      	ldr	r2, [pc, #436]	@ (800433c <DMA_List_Init+0x268>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d054      	beq.n	8004234 <DMA_List_Init+0x160>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6c      	ldr	r2, [pc, #432]	@ (8004340 <DMA_List_Init+0x26c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d04f      	beq.n	8004234 <DMA_List_Init+0x160>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a6a      	ldr	r2, [pc, #424]	@ (8004344 <DMA_List_Init+0x270>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04a      	beq.n	8004234 <DMA_List_Init+0x160>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a69      	ldr	r2, [pc, #420]	@ (8004348 <DMA_List_Init+0x274>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d045      	beq.n	8004234 <DMA_List_Init+0x160>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a67      	ldr	r2, [pc, #412]	@ (800434c <DMA_List_Init+0x278>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d040      	beq.n	8004234 <DMA_List_Init+0x160>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a66      	ldr	r2, [pc, #408]	@ (8004350 <DMA_List_Init+0x27c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <DMA_List_Init+0x160>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a64      	ldr	r2, [pc, #400]	@ (8004354 <DMA_List_Init+0x280>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d036      	beq.n	8004234 <DMA_List_Init+0x160>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a63      	ldr	r2, [pc, #396]	@ (8004358 <DMA_List_Init+0x284>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d031      	beq.n	8004234 <DMA_List_Init+0x160>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a61      	ldr	r2, [pc, #388]	@ (800435c <DMA_List_Init+0x288>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02c      	beq.n	8004234 <DMA_List_Init+0x160>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a60      	ldr	r2, [pc, #384]	@ (8004360 <DMA_List_Init+0x28c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <DMA_List_Init+0x160>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004364 <DMA_List_Init+0x290>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <DMA_List_Init+0x160>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a5d      	ldr	r2, [pc, #372]	@ (8004368 <DMA_List_Init+0x294>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <DMA_List_Init+0x160>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a5b      	ldr	r2, [pc, #364]	@ (800436c <DMA_List_Init+0x298>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <DMA_List_Init+0x160>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a5a      	ldr	r2, [pc, #360]	@ (8004370 <DMA_List_Init+0x29c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <DMA_List_Init+0x160>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a58      	ldr	r2, [pc, #352]	@ (8004374 <DMA_List_Init+0x2a0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <DMA_List_Init+0x160>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a57      	ldr	r2, [pc, #348]	@ (8004378 <DMA_List_Init+0x2a4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <DMA_List_Init+0x160>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a55      	ldr	r2, [pc, #340]	@ (800437c <DMA_List_Init+0x2a8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <DMA_List_Init+0x160>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a54      	ldr	r2, [pc, #336]	@ (8004380 <DMA_List_Init+0x2ac>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <DMA_List_Init+0x164>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <DMA_List_Init+0x166>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	430a      	orrs	r2, r1
 800425a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2200      	movs	r2, #0
 8004262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2200      	movs	r2, #0
 800427c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a36      	ldr	r2, [pc, #216]	@ (8004364 <DMA_List_Init+0x290>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d022      	beq.n	80042d6 <DMA_List_Init+0x202>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a34      	ldr	r2, [pc, #208]	@ (8004368 <DMA_List_Init+0x294>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01d      	beq.n	80042d6 <DMA_List_Init+0x202>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a33      	ldr	r2, [pc, #204]	@ (800436c <DMA_List_Init+0x298>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <DMA_List_Init+0x202>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a31      	ldr	r2, [pc, #196]	@ (8004370 <DMA_List_Init+0x29c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <DMA_List_Init+0x202>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a30      	ldr	r2, [pc, #192]	@ (8004374 <DMA_List_Init+0x2a0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <DMA_List_Init+0x202>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004378 <DMA_List_Init+0x2a4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <DMA_List_Init+0x202>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2d      	ldr	r2, [pc, #180]	@ (800437c <DMA_List_Init+0x2a8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <DMA_List_Init+0x202>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004380 <DMA_List_Init+0x2ac>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <DMA_List_Init+0x206>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <DMA_List_Init+0x208>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2200      	movs	r2, #0
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2200      	movs	r2, #0
 80042f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40020050 	.word	0x40020050
 8004308:	50020050 	.word	0x50020050
 800430c:	400200d0 	.word	0x400200d0
 8004310:	500200d0 	.word	0x500200d0
 8004314:	40020150 	.word	0x40020150
 8004318:	50020150 	.word	0x50020150
 800431c:	400201d0 	.word	0x400201d0
 8004320:	500201d0 	.word	0x500201d0
 8004324:	40020250 	.word	0x40020250
 8004328:	50020250 	.word	0x50020250
 800432c:	400202d0 	.word	0x400202d0
 8004330:	500202d0 	.word	0x500202d0
 8004334:	40020350 	.word	0x40020350
 8004338:	50020350 	.word	0x50020350
 800433c:	400203d0 	.word	0x400203d0
 8004340:	500203d0 	.word	0x500203d0
 8004344:	40020450 	.word	0x40020450
 8004348:	50020450 	.word	0x50020450
 800434c:	400204d0 	.word	0x400204d0
 8004350:	500204d0 	.word	0x500204d0
 8004354:	40020550 	.word	0x40020550
 8004358:	50020550 	.word	0x50020550
 800435c:	400205d0 	.word	0x400205d0
 8004360:	500205d0 	.word	0x500205d0
 8004364:	40020650 	.word	0x40020650
 8004368:	50020650 	.word	0x50020650
 800436c:	400206d0 	.word	0x400206d0
 8004370:	500206d0 	.word	0x500206d0
 8004374:	40020750 	.word	0x40020750
 8004378:	50020750 	.word	0x50020750
 800437c:	400207d0 	.word	0x400207d0
 8004380:	500207d0 	.word	0x500207d0

08004384 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004396:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800439c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80043a2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80043a8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d017      	beq.n	80043ea <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043cc:	3b01      	subs	r3, #1
 80043ce:	051b      	lsls	r3, r3, #20
 80043d0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80043d4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	3b01      	subs	r3, #1
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80043e2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80043e4:	431a      	orrs	r2, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	f240 237f 	movw	r3, #639	@ 0x27f
 80043f6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80043f8:	431a      	orrs	r2, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004406:	d10c      	bne.n	8004422 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d011      	beq.n	8004438 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	e00a      	b.n	8004438 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800442a:	d105      	bne.n	8004438 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00f      	beq.n	8004460 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004452:	041b      	lsls	r3, r3, #16
 8004454:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004458:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800445a:	431a      	orrs	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004464:	b29a      	uxth	r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d04e      	beq.n	8004514 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	3b01      	subs	r3, #1
 8004480:	0419      	lsls	r1, r3, #16
 8004482:	4b67      	ldr	r3, [pc, #412]	@ (8004620 <DMA_List_BuildNode+0x29c>)
 8004484:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004486:	431a      	orrs	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	2b00      	cmp	r3, #0
 8004492:	da06      	bge.n	80044a2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	e005      	b.n	80044ae <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da06      	bge.n	80044c4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	609a      	str	r2, [r3, #8]
 80044c2:	e005      	b.n	80044d0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	da06      	bge.n	80044e6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	e005      	b.n	80044f2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da06      	bge.n	8004508 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	e005      	b.n	8004514 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d059      	beq.n	80045e4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004534:	2b00      	cmp	r3, #0
 8004536:	da09      	bge.n	800454c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453c:	425b      	negs	r3, r3
 800453e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	615a      	str	r2, [r3, #20]
 800454a:	e005      	b.n	8004558 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004550:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	2b00      	cmp	r3, #0
 800455e:	da0d      	bge.n	800457c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	425b      	negs	r3, r3
 8004566:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695a      	ldr	r2, [r3, #20]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	0419      	lsls	r1, r3, #16
 8004570:	4b2c      	ldr	r3, [pc, #176]	@ (8004624 <DMA_List_BuildNode+0x2a0>)
 8004572:	400b      	ands	r3, r1
 8004574:	431a      	orrs	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	615a      	str	r2, [r3, #20]
 800457a:	e009      	b.n	8004590 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	0419      	lsls	r1, r3, #16
 8004586:	4b27      	ldr	r3, [pc, #156]	@ (8004624 <DMA_List_BuildNode+0x2a0>)
 8004588:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800458a:	431a      	orrs	r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	2b00      	cmp	r3, #0
 8004596:	da08      	bge.n	80045aa <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459c:	425b      	negs	r3, r3
 800459e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	619a      	str	r2, [r3, #24]
 80045a8:	e004      	b.n	80045b4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da0b      	bge.n	80045d4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c0:	425b      	negs	r3, r3
 80045c2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80045cc:	431a      	orrs	r2, r3
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	619a      	str	r2, [r3, #24]
 80045d2:	e007      	b.n	80045e4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045dc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80045de:	431a      	orrs	r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d006      	beq.n	8004606 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004604:	e005      	b.n	8004612 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	07ff0000 	.word	0x07ff0000
 8004624:	1fff0000 	.word	0x1fff0000

08004628 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4313      	orrs	r3, r2
 800463e:	0c1b      	lsrs	r3, r3, #16
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e00a      	b.n	800466a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e004      	b.n	800466a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d001      	beq.n	800467a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e00e      	b.n	80046c6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e006      	b.n	80046c6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80046d8:	2302      	movs	r3, #2
 80046da:	e00b      	b.n	80046f4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d001      	beq.n	80046f2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e000      	b.n	80046f4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00c      	beq.n	8004732 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <DMA_List_GetCLLRNodeInfo+0x58>)
 8004722:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00f      	beq.n	800474a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2207      	movs	r2, #7
 800472e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004730:	e00b      	b.n	800474a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4a08      	ldr	r2, [pc, #32]	@ (800475c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800473c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2205      	movs	r2, #5
 8004748:	601a      	str	r2, [r3, #0]
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	fe010000 	.word	0xfe010000
 800475c:	f8010000 	.word	0xf8010000

08004760 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	@ 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d142      	bne.n	800480a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004784:	e01d      	b.n	80047c2 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d107      	bne.n	800479c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e00f      	b.n	80047bc <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4413      	add	r3, r2
 80047ac:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80047b4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d3dc      	bcc.n	8004786 <DMA_List_FindNode+0x26>
 80047cc:	e029      	b.n	8004822 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e00f      	b.n	8004804 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4413      	add	r3, r2
 80047f4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80047fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3301      	adds	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	429a      	cmp	r2, r3
 8004812:	d206      	bcs.n	8004822 <DMA_List_FindNode+0xc2>
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800481a:	4013      	ands	r3, r2
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	d1d5      	bne.n	80047ce <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800482e:	4013      	ands	r3, r2
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	429a      	cmp	r2, r3
 8004834:	d001      	beq.n	800483a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8004836:	2301      	movs	r3, #1
 8004838:	e02b      	b.n	8004892 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	461a      	mov	r2, r3
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00f      	beq.n	8004890 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	461a      	mov	r2, r3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004880:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	0c1b      	lsrs	r3, r3, #16
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3724      	adds	r7, #36	@ 0x24
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	@ 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80048b2:	e1ba      	b.n	8004c2a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	2101      	movs	r1, #1
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	4013      	ands	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 81aa 	beq.w	8004c24 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a55      	ldr	r2, [pc, #340]	@ (8004a28 <HAL_GPIO_Init+0x188>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d15d      	bne.n	8004994 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80048de:	2201      	movs	r2, #1
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0201 	and.w	r2, r3, #1
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004908:	4a48      	ldr	r2, [pc, #288]	@ (8004a2c <HAL_GPIO_Init+0x18c>)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004910:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004912:	4a46      	ldr	r2, [pc, #280]	@ (8004a2c <HAL_GPIO_Init+0x18c>)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	08da      	lsrs	r2, r3, #3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	3208      	adds	r2, #8
 8004926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	220f      	movs	r2, #15
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	4013      	ands	r3, r2
 8004940:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	220b      	movs	r2, #11
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	4313      	orrs	r3, r2
 8004954:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	08da      	lsrs	r2, r3, #3
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	3208      	adds	r2, #8
 800495e:	69f9      	ldr	r1, [r7, #28]
 8004960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	2203      	movs	r2, #3
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	4013      	ands	r3, r2
 800497a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	2202      	movs	r2, #2
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	4313      	orrs	r3, r2
 800498a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e067      	b.n	8004a64 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d003      	beq.n	80049a4 <HAL_GPIO_Init+0x104>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b12      	cmp	r3, #18
 80049a2:	d145      	bne.n	8004a30 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	08da      	lsrs	r2, r3, #3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3208      	adds	r2, #8
 80049ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	220f      	movs	r2, #15
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	08da      	lsrs	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3208      	adds	r2, #8
 80049ea:	69f9      	ldr	r1, [r7, #28]
 80049ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0203 	and.w	r2, r3, #3
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e01e      	b.n	8004a64 <HAL_GPIO_Init+0x1c4>
 8004a26:	bf00      	nop
 8004a28:	46020000 	.word	0x46020000
 8004a2c:	0800d1c8 	.word	0x0800d1c8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 0203 	and.w	r2, r3, #3
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d00b      	beq.n	8004a84 <HAL_GPIO_Init+0x1e4>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d007      	beq.n	8004a84 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a78:	2b11      	cmp	r3, #17
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b12      	cmp	r3, #18
 8004a82:	d130      	bne.n	8004ae6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004aba:	2201      	movs	r2, #1
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 0201 	and.w	r2, r3, #1
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d017      	beq.n	8004b1e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	2203      	movs	r2, #3
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d07c      	beq.n	8004c24 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004b2a:	4a47      	ldr	r2, [pc, #284]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	3318      	adds	r3, #24
 8004b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b36:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	220f      	movs	r2, #15
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	0a9a      	lsrs	r2, r3, #10
 8004b52:	4b3e      	ldr	r3, [pc, #248]	@ (8004c4c <HAL_GPIO_Init+0x3ac>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	f002 0203 	and.w	r2, r2, #3
 8004b5c:	00d2      	lsls	r2, r2, #3
 8004b5e:	4093      	lsls	r3, r2
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004b66:	4938      	ldr	r1, [pc, #224]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	3318      	adds	r3, #24
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004b74:	4b34      	ldr	r3, [pc, #208]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004b98:	4a2b      	ldr	r2, [pc, #172]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	4013      	ands	r3, r2
 8004bac:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004bc2:	4a21      	ldr	r2, [pc, #132]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004bee:	4a16      	ldr	r2, [pc, #88]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c48 <HAL_GPIO_Init+0x3a8>)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	3301      	adds	r3, #1
 8004c28:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f47f ae3d 	bne.w	80048b4 <HAL_GPIO_Init+0x14>
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	3724      	adds	r7, #36	@ 0x24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	46022000 	.word	0x46022000
 8004c4c:	002f7f7f 	.word	0x002f7f7f

08004c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c60:	787b      	ldrb	r3, [r7, #1]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004c6c:	e002      	b.n	8004c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004c6e:	887a      	ldrh	r2, [r7, #2]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d006      	beq.n	8004ca4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004c96:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f814 	bl	8004ccc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004ca4:	4b08      	ldr	r3, [pc, #32]	@ (8004cc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004cb0:	4a05      	ldr	r2, [pc, #20]	@ (8004cc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f812 	bl	8004ce2 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	46022000 	.word	0x46022000

08004ccc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	4603      	mov	r3, r0
 8004cea:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e08d      	b.n	8004e26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc fe58 	bl	80019d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2224      	movs	r2, #36	@ 0x24
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d107      	bne.n	8004d72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	e006      	b.n	8004d80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d108      	bne.n	8004d9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d96:	605a      	str	r2, [r3, #4]
 8004d98:	e007      	b.n	8004daa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004da8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69d9      	ldr	r1, [r3, #28]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4798      	blx	r3
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00f      	beq.n	8004ea4 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ea2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00f      	beq.n	8004ece <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ebc:	f043 0208 	orr.w	r2, r3, #8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ecc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00f      	beq.n	8004ef8 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f043 0202 	orr.w	r2, r3, #2
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ef6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 030b 	and.w	r3, r3, #11
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fbe8 	bl	80056e0 <I2C_ITError>
  }
}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <I2C_Slave_ISR_IT+0x24>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0e2      	b.n	8005182 <I2C_Slave_ISR_IT+0x1ea>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004fd8:	6939      	ldr	r1, [r7, #16]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f9b6 	bl	800534c <I2C_ITSlaveCplt>
 8004fe0:	e0ca      	b.n	8005178 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d04b      	beq.n	8005084 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d046      	beq.n	8005084 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d128      	bne.n	8005052 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b28      	cmp	r3, #40	@ 0x28
 800500a:	d108      	bne.n	800501e <I2C_Slave_ISR_IT+0x86>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005012:	d104      	bne.n	800501e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005014:	6939      	ldr	r1, [r7, #16]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fb0e 	bl	8005638 <I2C_ITListenCplt>
 800501c:	e031      	b.n	8005082 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b29      	cmp	r3, #41	@ 0x29
 8005028:	d10e      	bne.n	8005048 <I2C_Slave_ISR_IT+0xb0>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005030:	d00a      	beq.n	8005048 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2210      	movs	r2, #16
 8005038:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fc67 	bl	800590e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f926 	bl	8005292 <I2C_ITSlaveSeqCplt>
 8005046:	e01c      	b.n	8005082 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2210      	movs	r2, #16
 800504e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005050:	e08f      	b.n	8005172 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2210      	movs	r2, #16
 8005058:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505e:	f043 0204 	orr.w	r2, r3, #4
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <I2C_Slave_ISR_IT+0xdc>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005072:	d17e      	bne.n	8005172 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005078:	4619      	mov	r1, r3
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fb30 	bl	80056e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005080:	e077      	b.n	8005172 <I2C_Slave_ISR_IT+0x1da>
 8005082:	e076      	b.n	8005172 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02f      	beq.n	80050ee <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02a      	beq.n	80050ee <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d018      	beq.n	80050d4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d14b      	bne.n	8005176 <I2C_Slave_ISR_IT+0x1de>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050e4:	d047      	beq.n	8005176 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f8d3 	bl	8005292 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80050ec:	e043      	b.n	8005176 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005102:	6939      	ldr	r1, [r7, #16]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f840 	bl	800518a <I2C_ITAddrCplt>
 800510a:	e035      	b.n	8005178 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d030      	beq.n	8005178 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02b      	beq.n	8005178 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d018      	beq.n	800515c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	@ 0x28
 800515a:	e00d      	b.n	8005178 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005162:	d002      	beq.n	800516a <I2C_Slave_ISR_IT+0x1d2>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f891 	bl	8005292 <I2C_ITSlaveSeqCplt>
 8005170:	e002      	b.n	8005178 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005176:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051a0:	2b28      	cmp	r3, #40	@ 0x28
 80051a2:	d16a      	bne.n	800527a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80051c2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80051de:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d138      	bne.n	800525a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80051e8:	897b      	ldrh	r3, [r7, #10]
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	89bb      	ldrh	r3, [r7, #12]
 80051f0:	4053      	eors	r3, r2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f003 0306 	and.w	r3, r3, #6
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d11c      	bne.n	8005236 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80051fc:	897b      	ldrh	r3, [r7, #10]
 80051fe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800520e:	2b02      	cmp	r3, #2
 8005210:	d13b      	bne.n	800528a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2208      	movs	r2, #8
 800521e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005228:	89ba      	ldrh	r2, [r7, #12]
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff fe86 	bl	8004f40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005234:	e029      	b.n	800528a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005236:	893b      	ldrh	r3, [r7, #8]
 8005238:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800523a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fba7 	bl	8005992 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800524c:	89ba      	ldrh	r2, [r7, #12]
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fe74 	bl	8004f40 <HAL_I2C_AddrCallback>
}
 8005258:	e017      	b.n	800528a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800525a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb97 	bl	8005992 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800526c:	89ba      	ldrh	r2, [r7, #12]
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fe64 	bl	8004f40 <HAL_I2C_AddrCallback>
}
 8005278:	e007      	b.n	800528a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2208      	movs	r2, #8
 8005280:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e00c      	b.n	80052e0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b29      	cmp	r3, #41	@ 0x29
 80052ea:	d112      	bne.n	8005312 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2228      	movs	r2, #40	@ 0x28
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2221      	movs	r2, #33	@ 0x21
 80052f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052fa:	2101      	movs	r1, #1
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fb48 	bl	8005992 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fe04 	bl	8004f18 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005310:	e017      	b.n	8005342 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b2a      	cmp	r3, #42	@ 0x2a
 800531c:	d111      	bne.n	8005342 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2228      	movs	r2, #40	@ 0x28
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2222      	movs	r2, #34	@ 0x22
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800532c:	2102      	movs	r1, #2
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fb2f 	bl	8005992 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff fdf5 	bl	8004f2c <HAL_I2C_SlaveRxCpltCallback>
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800536e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2220      	movs	r2, #32
 8005376:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005378:	7afb      	ldrb	r3, [r7, #11]
 800537a:	2b21      	cmp	r3, #33	@ 0x21
 800537c:	d002      	beq.n	8005384 <I2C_ITSlaveCplt+0x38>
 800537e:	7afb      	ldrb	r3, [r7, #11]
 8005380:	2b29      	cmp	r3, #41	@ 0x29
 8005382:	d108      	bne.n	8005396 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005384:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fb02 	bl	8005992 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2221      	movs	r2, #33	@ 0x21
 8005392:	631a      	str	r2, [r3, #48]	@ 0x30
 8005394:	e019      	b.n	80053ca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005396:	7afb      	ldrb	r3, [r7, #11]
 8005398:	2b22      	cmp	r3, #34	@ 0x22
 800539a:	d002      	beq.n	80053a2 <I2C_ITSlaveCplt+0x56>
 800539c:	7afb      	ldrb	r3, [r7, #11]
 800539e:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a0:	d108      	bne.n	80053b4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80053a2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 faf3 	bl	8005992 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2222      	movs	r2, #34	@ 0x22
 80053b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80053b2:	e00a      	b.n	80053ca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	2b28      	cmp	r3, #40	@ 0x28
 80053b8:	d107      	bne.n	80053ca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80053ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fae7 	bl	8005992 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b92      	ldr	r3, [pc, #584]	@ (8005630 <I2C_ITSlaveCplt+0x2e4>)
 80053e6:	400b      	ands	r3, r1
 80053e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa8f 	bl	800590e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01c      	beq.n	8005434 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005408:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	2b00      	cmp	r3, #0
 8005410:	d031      	beq.n	8005476 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541a:	b29c      	uxth	r4, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe fe47 	bl	80040b4 <HAL_DMAEx_GetFifoLevel>
 8005426:	4603      	mov	r3, r0
 8005428:	b29b      	uxth	r3, r3
 800542a:	4423      	add	r3, r4
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005432:	e020      	b.n	8005476 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01b      	beq.n	8005476 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800544c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00f      	beq.n	8005476 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800545e:	b29c      	uxth	r4, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe fe25 	bl	80040b4 <HAL_DMAEx_GetFifoLevel>
 800546a:	4603      	mov	r3, r0
 800546c:	b29b      	uxth	r3, r3
 800546e:	4423      	add	r3, r4
 8005470:	b29a      	uxth	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d020      	beq.n	80054c2 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0304 	bic.w	r3, r3, #4
 8005486:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	f043 0204 	orr.w	r2, r3, #4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d049      	beq.n	8005576 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d044      	beq.n	8005576 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d128      	bne.n	8005548 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b28      	cmp	r3, #40	@ 0x28
 8005500:	d108      	bne.n	8005514 <I2C_ITSlaveCplt+0x1c8>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005508:	d104      	bne.n	8005514 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f893 	bl	8005638 <I2C_ITListenCplt>
 8005512:	e030      	b.n	8005576 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b29      	cmp	r3, #41	@ 0x29
 800551e:	d10e      	bne.n	800553e <I2C_ITSlaveCplt+0x1f2>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005526:	d00a      	beq.n	800553e <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2210      	movs	r2, #16
 800552e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f9ec 	bl	800590e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff feab 	bl	8005292 <I2C_ITSlaveSeqCplt>
 800553c:	e01b      	b.n	8005576 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2210      	movs	r2, #16
 8005544:	61da      	str	r2, [r3, #28]
 8005546:	e016      	b.n	8005576 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2210      	movs	r2, #16
 800554e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	f043 0204 	orr.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <I2C_ITSlaveCplt+0x21e>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005568:	d105      	bne.n	8005576 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8b5 	bl	80056e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005588:	2b00      	cmp	r3, #0
 800558a:	d010      	beq.n	80055ae <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8a4 	bl	80056e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b28      	cmp	r3, #40	@ 0x28
 80055a2:	d141      	bne.n	8005628 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80055a4:	6979      	ldr	r1, [r7, #20]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f846 	bl	8005638 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055ac:	e03c      	b.n	8005628 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055b6:	d014      	beq.n	80055e2 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff fe6a 	bl	8005292 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005634 <I2C_ITSlaveCplt+0x2e8>)
 80055c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fcbe 	bl	8004f5c <HAL_I2C_ListenCpltCallback>
}
 80055e0:	e022      	b.n	8005628 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b22      	cmp	r3, #34	@ 0x22
 80055ec:	d10e      	bne.n	800560c <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff fc91 	bl	8004f2c <HAL_I2C_SlaveRxCpltCallback>
}
 800560a:	e00d      	b.n	8005628 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fc78 	bl	8004f18 <HAL_I2C_SlaveTxCpltCallback>
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd90      	pop	{r4, r7, pc}
 8005630:	fe00e800 	.word	0xfe00e800
 8005634:	ffff0000 	.word	0xffff0000

08005638 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a25      	ldr	r2, [pc, #148]	@ (80056dc <I2C_ITListenCplt+0xa4>)
 8005646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d022      	beq.n	80056b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d012      	beq.n	80056b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ac:	f043 0204 	orr.w	r2, r3, #4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f96a 	bl	8005992 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2210      	movs	r2, #16
 80056c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fc44 	bl	8004f5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	ffff0000 	.word	0xffff0000

080056e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f0:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a6d      	ldr	r2, [pc, #436]	@ (80058b4 <I2C_ITError+0x1d4>)
 80056fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b28      	cmp	r3, #40	@ 0x28
 8005716:	d005      	beq.n	8005724 <I2C_ITError+0x44>
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b29      	cmp	r3, #41	@ 0x29
 800571c:	d002      	beq.n	8005724 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	2b2a      	cmp	r3, #42	@ 0x2a
 8005722:	d10b      	bne.n	800573c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005724:	2103      	movs	r1, #3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f933 	bl	8005992 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2228      	movs	r2, #40	@ 0x28
 8005730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a60      	ldr	r2, [pc, #384]	@ (80058b8 <I2C_ITError+0x1d8>)
 8005738:	635a      	str	r2, [r3, #52]	@ 0x34
 800573a:	e030      	b.n	800579e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800573c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f926 	bl	8005992 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f8e1 	bl	800590e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b60      	cmp	r3, #96	@ 0x60
 8005756:	d01f      	beq.n	8005798 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b20      	cmp	r3, #32
 800576c:	d114      	bne.n	8005798 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b10      	cmp	r3, #16
 800577a:	d109      	bne.n	8005790 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2210      	movs	r2, #16
 8005782:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005788:	f043 0204 	orr.w	r2, r3, #4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2220      	movs	r2, #32
 8005796:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d039      	beq.n	8005820 <I2C_ITError+0x140>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b11      	cmp	r3, #17
 80057b0:	d002      	beq.n	80057b8 <I2C_ITError+0xd8>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b21      	cmp	r3, #33	@ 0x21
 80057b6:	d133      	bne.n	8005820 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057c6:	d107      	bne.n	80057d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fd fe9d 	bl	800351c <HAL_DMA_GetState>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d017      	beq.n	8005818 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	4a33      	ldr	r2, [pc, #204]	@ (80058bc <I2C_ITError+0x1dc>)
 80057ee:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fd fd03 	bl	8003208 <HAL_DMA_Abort_IT>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d04d      	beq.n	80058a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005812:	4610      	mov	r0, r2
 8005814:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005816:	e045      	b.n	80058a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f851 	bl	80058c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800581e:	e041      	b.n	80058a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d039      	beq.n	800589c <I2C_ITError+0x1bc>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b12      	cmp	r3, #18
 800582c:	d002      	beq.n	8005834 <I2C_ITError+0x154>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b22      	cmp	r3, #34	@ 0x22
 8005832:	d133      	bne.n	800589c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800583e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005842:	d107      	bne.n	8005854 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005852:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	4618      	mov	r0, r3
 800585a:	f7fd fe5f 	bl	800351c <HAL_DMA_GetState>
 800585e:	4603      	mov	r3, r0
 8005860:	2b01      	cmp	r3, #1
 8005862:	d017      	beq.n	8005894 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005868:	4a14      	ldr	r2, [pc, #80]	@ (80058bc <I2C_ITError+0x1dc>)
 800586a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	4618      	mov	r0, r3
 800587a:	f7fd fcc5 	bl	8003208 <HAL_DMA_Abort_IT>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d011      	beq.n	80058a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800588e:	4610      	mov	r0, r2
 8005890:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005892:	e009      	b.n	80058a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f813 	bl	80058c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800589a:	e005      	b.n	80058a8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f80f 	bl	80058c0 <I2C_TreatErrorCallback>
  }
}
 80058a2:	e002      	b.n	80058aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058a4:	bf00      	nop
 80058a6:	e000      	b.n	80058aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058a8:	bf00      	nop
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	ffff0000 	.word	0xffff0000
 80058b8:	08004f99 	.word	0x08004f99
 80058bc:	08005957 	.word	0x08005957

080058c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b60      	cmp	r3, #96	@ 0x60
 80058d2:	d10e      	bne.n	80058f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff fb4a 	bl	8004f84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058f0:	e009      	b.n	8005906 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff fb35 	bl	8004f70 <HAL_I2C_ErrorCallback>
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d103      	bne.n	800592c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d007      	beq.n	800594a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	619a      	str	r2, [r3, #24]
  }
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	2200      	movs	r2, #0
 8005972:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff ff9b 	bl	80058c0 <I2C_TreatErrorCallback>
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005992:	b480      	push	{r7}
 8005994:	b085      	sub	sp, #20
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	460b      	mov	r3, r1
 800599c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00f      	beq.n	80059cc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80059b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059c0:	2b28      	cmp	r3, #40	@ 0x28
 80059c2:	d003      	beq.n	80059cc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80059ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00f      	beq.n	80059f6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80059dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059ea:	2b28      	cmp	r3, #40	@ 0x28
 80059ec:	d003      	beq.n	80059f6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80059f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80059f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da03      	bge.n	8005a06 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005a06:	887b      	ldrh	r3, [r7, #2]
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d103      	bne.n	8005a14 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005a12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005a14:	887b      	ldrh	r3, [r7, #2]
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d103      	bne.n	8005a22 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f043 0320 	orr.w	r3, r3, #32
 8005a20:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005a22:	887b      	ldrh	r3, [r7, #2]
 8005a24:	2b40      	cmp	r3, #64	@ 0x40
 8005a26:	d103      	bne.n	8005a30 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	43da      	mvns	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	400a      	ands	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d138      	bne.n	8005ad6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e032      	b.n	8005ad8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2224      	movs	r2, #36	@ 0x24
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005aa0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6819      	ldr	r1, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e000      	b.n	8005ad8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ad6:	2302      	movs	r3, #2
  }
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d139      	bne.n	8005b6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e033      	b.n	8005b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	@ 0x24
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005b88:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
 8005b98:	e007      	b.n	8005baa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005b9a:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 0204 	bic.w	r2, r3, #4
 8005ba2:	4905      	ldr	r1, [pc, #20]	@ (8005bb8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	40030400 	.word	0x40030400

08005bbc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005bc0:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <HAL_ICACHE_Enable+0x1c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a04      	ldr	r2, [pc, #16]	@ (8005bd8 <HAL_ICACHE_Enable+0x1c>)
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40030400 	.word	0x40030400

08005bdc <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
 8005bf2:	e141      	b.n	8005e78 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 f947 	bl	8005e8c <MDF_GetHandleNumberFromInstance>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4a86      	ldr	r2, [pc, #536]	@ (8005e1c <HAL_MDF_Init+0x240>)
 8005c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	73fb      	strb	r3, [r7, #15]
 8005c0e:	e133      	b.n	8005e78 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fb fd83 	bl	800171c <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005c16:	4b82      	ldr	r3, [pc, #520]	@ (8005e20 <HAL_MDF_Init+0x244>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11d      	bne.n	8005c5a <HAL_MDF_Init+0x7e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a80      	ldr	r2, [pc, #512]	@ (8005e24 <HAL_MDF_Init+0x248>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d023      	beq.n	8005c70 <HAL_MDF_Init+0x94>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a7e      	ldr	r2, [pc, #504]	@ (8005e28 <HAL_MDF_Init+0x24c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01e      	beq.n	8005c70 <HAL_MDF_Init+0x94>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a7d      	ldr	r2, [pc, #500]	@ (8005e2c <HAL_MDF_Init+0x250>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d019      	beq.n	8005c70 <HAL_MDF_Init+0x94>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a7b      	ldr	r2, [pc, #492]	@ (8005e30 <HAL_MDF_Init+0x254>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d014      	beq.n	8005c70 <HAL_MDF_Init+0x94>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a7a      	ldr	r2, [pc, #488]	@ (8005e34 <HAL_MDF_Init+0x258>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00f      	beq.n	8005c70 <HAL_MDF_Init+0x94>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a78      	ldr	r2, [pc, #480]	@ (8005e38 <HAL_MDF_Init+0x25c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00a      	beq.n	8005c70 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005c5a:	4b78      	ldr	r3, [pc, #480]	@ (8005e3c <HAL_MDF_Init+0x260>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f040 8090 	bne.w	8005d84 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a75      	ldr	r2, [pc, #468]	@ (8005e40 <HAL_MDF_Init+0x264>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	f040 808a 	bne.w	8005d84 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a72      	ldr	r2, [pc, #456]	@ (8005e40 <HAL_MDF_Init+0x264>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_MDF_Init+0xa2>
 8005c7a:	4b72      	ldr	r3, [pc, #456]	@ (8005e44 <HAL_MDF_Init+0x268>)
 8005c7c:	e000      	b.n	8005c80 <HAL_MDF_Init+0xa4>
 8005c7e:	4b72      	ldr	r3, [pc, #456]	@ (8005e48 <HAL_MDF_Init+0x26c>)
 8005c80:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	da02      	bge.n	8005c90 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
 8005c8e:	e079      	b.n	8005d84 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a63      	ldr	r2, [pc, #396]	@ (8005e24 <HAL_MDF_Init+0x248>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d018      	beq.n	8005ccc <HAL_MDF_Init+0xf0>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a62      	ldr	r2, [pc, #392]	@ (8005e28 <HAL_MDF_Init+0x24c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <HAL_MDF_Init+0xf0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a60      	ldr	r2, [pc, #384]	@ (8005e2c <HAL_MDF_Init+0x250>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00e      	beq.n	8005ccc <HAL_MDF_Init+0xf0>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8005e30 <HAL_MDF_Init+0x254>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d009      	beq.n	8005ccc <HAL_MDF_Init+0xf0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8005e34 <HAL_MDF_Init+0x258>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_MDF_Init+0xf0>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8005e38 <HAL_MDF_Init+0x25c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10d      	bne.n	8005ce8 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	7b1b      	ldrb	r3, [r3, #12]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d137      	bne.n	8005d78 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005d18:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005d20:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005d22:	431a      	orrs	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7e1b      	ldrb	r3, [r3, #24]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d123      	bne.n	8005d78 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a3b      	ldr	r2, [pc, #236]	@ (8005e24 <HAL_MDF_Init+0x248>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d012      	beq.n	8005d60 <HAL_MDF_Init+0x184>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e28 <HAL_MDF_Init+0x24c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00d      	beq.n	8005d60 <HAL_MDF_Init+0x184>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a38      	ldr	r2, [pc, #224]	@ (8005e2c <HAL_MDF_Init+0x250>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d008      	beq.n	8005d60 <HAL_MDF_Init+0x184>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a37      	ldr	r2, [pc, #220]	@ (8005e30 <HAL_MDF_Init+0x254>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <HAL_MDF_Init+0x184>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a35      	ldr	r2, [pc, #212]	@ (8005e34 <HAL_MDF_Init+0x258>)
 8005d5e:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f043 0210 	orr.w	r2, r3, #16
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f043 0201 	orr.w	r2, r3, #1
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d128      	bne.n	8005ddc <HAL_MDF_Init+0x200>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d123      	bne.n	8005ddc <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da02      	bge.n	8005da4 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	e01b      	b.n	8005ddc <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6819      	ldr	r1, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005dbc:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc2:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d14a      	bne.n	8005e78 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 021f 	bic.w	r2, r2, #31
 8005df0:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6859      	ldr	r1, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a0d      	ldr	r2, [pc, #52]	@ (8005e40 <HAL_MDF_Init+0x264>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d11e      	bne.n	8005e4c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <HAL_MDF_Init+0x260>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3301      	adds	r3, #1
 8005e14:	4a09      	ldr	r2, [pc, #36]	@ (8005e3c <HAL_MDF_Init+0x260>)
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e01d      	b.n	8005e56 <HAL_MDF_Init+0x27a>
 8005e1a:	bf00      	nop
 8005e1c:	20000dc4 	.word	0x20000dc4
 8005e20:	20000dbc 	.word	0x20000dbc
 8005e24:	40025080 	.word	0x40025080
 8005e28:	40025100 	.word	0x40025100
 8005e2c:	40025180 	.word	0x40025180
 8005e30:	40025200 	.word	0x40025200
 8005e34:	40025280 	.word	0x40025280
 8005e38:	40025300 	.word	0x40025300
 8005e3c:	20000dc0 	.word	0x20000dc0
 8005e40:	46024080 	.word	0x46024080
 8005e44:	46024000 	.word	0x46024000
 8005e48:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8005e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <HAL_MDF_Init+0x2a8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a0c      	ldr	r2, [pc, #48]	@ (8005e84 <HAL_MDF_Init+0x2a8>)
 8005e54:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 f816 	bl	8005e8c <MDF_GetHandleNumberFromInstance>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4909      	ldr	r1, [pc, #36]	@ (8005e88 <HAL_MDF_Init+0x2ac>)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000dbc 	.word	0x20000dbc
 8005e88:	20000dc4 	.word	0x20000dc4

08005e8c <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a19      	ldr	r2, [pc, #100]	@ (8005efc <MDF_GetHandleNumberFromInstance+0x70>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d102      	bne.n	8005ea2 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e024      	b.n	8005eec <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a16      	ldr	r2, [pc, #88]	@ (8005f00 <MDF_GetHandleNumberFromInstance+0x74>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d102      	bne.n	8005eb0 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e01d      	b.n	8005eec <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a14      	ldr	r2, [pc, #80]	@ (8005f04 <MDF_GetHandleNumberFromInstance+0x78>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d102      	bne.n	8005ebe <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e016      	b.n	8005eec <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a11      	ldr	r2, [pc, #68]	@ (8005f08 <MDF_GetHandleNumberFromInstance+0x7c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d102      	bne.n	8005ecc <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e00f      	b.n	8005eec <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a0f      	ldr	r2, [pc, #60]	@ (8005f0c <MDF_GetHandleNumberFromInstance+0x80>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d102      	bne.n	8005eda <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e008      	b.n	8005eec <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a0c      	ldr	r2, [pc, #48]	@ (8005f10 <MDF_GetHandleNumberFromInstance+0x84>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d102      	bne.n	8005ee8 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8005ee2:	2305      	movs	r3, #5
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e001      	b.n	8005eec <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8005ee8:	2306      	movs	r3, #6
 8005eea:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8005eec:	68fb      	ldr	r3, [r7, #12]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40025080 	.word	0x40025080
 8005f00:	40025100 	.word	0x40025100
 8005f04:	40025180 	.word	0x40025180
 8005f08:	40025200 	.word	0x40025200
 8005f0c:	40025280 	.word	0x40025280
 8005f10:	40025300 	.word	0x40025300

08005f14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e108      	b.n	8006138 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fc fb47 	bl	80025d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2203      	movs	r2, #3
 8005f4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4a7b      	ldr	r2, [pc, #492]	@ (8006140 <HAL_PCD_Init+0x22c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d102      	bne.n	8005f5c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f006 fe4a 	bl	800cbfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7c1a      	ldrb	r2, [r3, #16]
 8005f6e:	f88d 2000 	strb.w	r2, [sp]
 8005f72:	3304      	adds	r3, #4
 8005f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f76:	f006 fe13 	bl	800cba0 <USB_CoreInit>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0d5      	b.n	8006138 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2100      	movs	r1, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f006 fe42 	bl	800cc1c <USB_SetCurrentMode>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e0c6      	b.n	8006138 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
 8005fae:	e04a      	b.n	8006046 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005fb0:	7bfa      	ldrb	r2, [r7, #15]
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	3315      	adds	r3, #21
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fc4:	7bfa      	ldrb	r2, [r7, #15]
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	7bfa      	ldrb	r2, [r7, #15]
 8005fd6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fd8:	7bfa      	ldrb	r2, [r7, #15]
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	b298      	uxth	r0, r3
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	332e      	adds	r3, #46	@ 0x2e
 8005fec:	4602      	mov	r2, r0
 8005fee:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ff0:	7bfa      	ldrb	r2, [r7, #15]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	3318      	adds	r3, #24
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006004:	7bfa      	ldrb	r2, [r7, #15]
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4613      	mov	r3, r2
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	331c      	adds	r3, #28
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	3320      	adds	r3, #32
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800602c:	7bfa      	ldrb	r2, [r7, #15]
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	3324      	adds	r3, #36	@ 0x24
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	3301      	adds	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	791b      	ldrb	r3, [r3, #4]
 800604a:	7bfa      	ldrb	r2, [r7, #15]
 800604c:	429a      	cmp	r2, r3
 800604e:	d3af      	bcc.n	8005fb0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
 8006054:	e044      	b.n	80060e0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006056:	7bfa      	ldrb	r2, [r7, #15]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800606c:	7bfa      	ldrb	r2, [r7, #15]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006082:	7bfa      	ldrb	r2, [r7, #15]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006098:	7bfa      	ldrb	r2, [r7, #15]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060ae:	7bfa      	ldrb	r2, [r7, #15]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060c4:	7bfa      	ldrb	r2, [r7, #15]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	3301      	adds	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	791b      	ldrb	r3, [r3, #4]
 80060e4:	7bfa      	ldrb	r2, [r7, #15]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d3b5      	bcc.n	8006056 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	7c1a      	ldrb	r2, [r3, #16]
 80060f2:	f88d 2000 	strb.w	r2, [sp]
 80060f6:	3304      	adds	r3, #4
 80060f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060fa:	f006 fddb 	bl	800ccb4 <USB_DevInit>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e013      	b.n	8006138 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7b1b      	ldrb	r3, [r3, #12]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d102      	bne.n	800612c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f80c 	bl	8006144 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f006 ff84 	bl	800d03e <USB_DevDisconnect>

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	42040000 	.word	0x42040000

08006144 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006176:	f043 0303 	orr.w	r3, r3, #3
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006194:	4b39      	ldr	r3, [pc, #228]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800619c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d10b      	bne.n	80061be <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ac:	d905      	bls.n	80061ba <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80061ae:	4b33      	ldr	r3, [pc, #204]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	4a32      	ldr	r2, [pc, #200]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80061b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061b8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e057      	b.n	800626e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c4:	d90a      	bls.n	80061dc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80061c6:	4b2d      	ldr	r3, [pc, #180]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	4a2a      	ldr	r2, [pc, #168]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80061d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061d8:	60d3      	str	r3, [r2, #12]
 80061da:	e007      	b.n	80061ec <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80061dc:	4b27      	ldr	r3, [pc, #156]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80061e4:	4925      	ldr	r1, [pc, #148]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80061ec:	4b24      	ldr	r3, [pc, #144]	@ (8006280 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a24      	ldr	r2, [pc, #144]	@ (8006284 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	099b      	lsrs	r3, r3, #6
 80061f8:	2232      	movs	r2, #50	@ 0x32
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	4a21      	ldr	r2, [pc, #132]	@ (8006284 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	099b      	lsrs	r3, r3, #6
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800620a:	e002      	b.n	8006212 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3b01      	subs	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006212:	4b1a      	ldr	r3, [pc, #104]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <HAL_PWREx_ControlVoltageScaling+0x98>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f3      	bne.n	800620c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01b      	beq.n	8006262 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800622a:	4b15      	ldr	r3, [pc, #84]	@ (8006280 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a15      	ldr	r2, [pc, #84]	@ (8006284 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	099b      	lsrs	r3, r3, #6
 8006236:	2232      	movs	r2, #50	@ 0x32
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	4a11      	ldr	r2, [pc, #68]	@ (8006284 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	099b      	lsrs	r3, r3, #6
 8006244:	3301      	adds	r3, #1
 8006246:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006248:	e002      	b.n	8006250 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3b01      	subs	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006250:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f3      	bne.n	800624a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e000      	b.n	800626e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	46020800 	.word	0x46020800
 8006280:	20000000 	.word	0x20000000
 8006284:	10624dd3 	.word	0x10624dd3

08006288 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800628c:	4b04      	ldr	r3, [pc, #16]	@ (80062a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	46020800 	.word	0x46020800

080062a4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80062a8:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	4a04      	ldr	r2, [pc, #16]	@ (80062c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80062ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062b2:	6113      	str	r3, [r2, #16]
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	46020800 	.word	0x46020800

080062c4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80062c8:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	4a04      	ldr	r2, [pc, #16]	@ (80062e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80062ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062d2:	6113      	str	r3, [r2, #16]
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	46020800 	.word	0x46020800

080062e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80062e8:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	4a04      	ldr	r2, [pc, #16]	@ (8006300 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80062f4:	bf00      	nop
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	46020800 	.word	0x46020800

08006304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	@ 0x38
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800630c:	2300      	movs	r3, #0
 800630e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	f000 bec8 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631e:	4b99      	ldr	r3, [pc, #612]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006328:	4b96      	ldr	r3, [pc, #600]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 800632a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 816c 	beq.w	8006618 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_RCC_OscConfig+0x52>
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	2b0c      	cmp	r3, #12
 800634a:	f040 80de 	bne.w	800650a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800634e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006350:	2b01      	cmp	r3, #1
 8006352:	f040 80da 	bne.w	800650a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f000 bea5 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006368:	4b86      	ldr	r3, [pc, #536]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <HAL_RCC_OscConfig+0x7a>
 8006374:	4b83      	ldr	r3, [pc, #524]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800637c:	e005      	b.n	800638a <HAL_RCC_OscConfig+0x86>
 800637e:	4b81      	ldr	r3, [pc, #516]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800638a:	4293      	cmp	r3, r2
 800638c:	d255      	bcs.n	800643a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f9d9 	bl	8007750 <RCC_SetFlashLatencyFromMSIRange>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f000 be82 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80063aa:	4b76      	ldr	r3, [pc, #472]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	4a75      	ldr	r2, [pc, #468]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80063b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063b4:	6093      	str	r3, [r2, #8]
 80063b6:	4b73      	ldr	r3, [pc, #460]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	4970      	ldr	r1, [pc, #448]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80063d0:	d309      	bcc.n	80063e6 <HAL_RCC_OscConfig+0xe2>
 80063d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f023 021f 	bic.w	r2, r3, #31
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	4969      	ldr	r1, [pc, #420]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60cb      	str	r3, [r1, #12]
 80063e4:	e07e      	b.n	80064e4 <HAL_RCC_OscConfig+0x1e0>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da0a      	bge.n	8006404 <HAL_RCC_OscConfig+0x100>
 80063ee:	4b65      	ldr	r3, [pc, #404]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	015b      	lsls	r3, r3, #5
 80063fc:	4961      	ldr	r1, [pc, #388]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	60cb      	str	r3, [r1, #12]
 8006402:	e06f      	b.n	80064e4 <HAL_RCC_OscConfig+0x1e0>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640c:	d30a      	bcc.n	8006424 <HAL_RCC_OscConfig+0x120>
 800640e:	4b5d      	ldr	r3, [pc, #372]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	029b      	lsls	r3, r3, #10
 800641c:	4959      	ldr	r1, [pc, #356]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 800641e:	4313      	orrs	r3, r2
 8006420:	60cb      	str	r3, [r1, #12]
 8006422:	e05f      	b.n	80064e4 <HAL_RCC_OscConfig+0x1e0>
 8006424:	4b57      	ldr	r3, [pc, #348]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	03db      	lsls	r3, r3, #15
 8006432:	4954      	ldr	r1, [pc, #336]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006434:	4313      	orrs	r3, r2
 8006436:	60cb      	str	r3, [r1, #12]
 8006438:	e054      	b.n	80064e4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800643a:	4b52      	ldr	r3, [pc, #328]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	4a51      	ldr	r2, [pc, #324]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006440:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006444:	6093      	str	r3, [r2, #8]
 8006446:	4b4f      	ldr	r3, [pc, #316]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	494c      	ldr	r1, [pc, #304]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006454:	4313      	orrs	r3, r2
 8006456:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006460:	d309      	bcc.n	8006476 <HAL_RCC_OscConfig+0x172>
 8006462:	4b48      	ldr	r3, [pc, #288]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f023 021f 	bic.w	r2, r3, #31
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	4945      	ldr	r1, [pc, #276]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006470:	4313      	orrs	r3, r2
 8006472:	60cb      	str	r3, [r1, #12]
 8006474:	e028      	b.n	80064c8 <HAL_RCC_OscConfig+0x1c4>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	da0a      	bge.n	8006494 <HAL_RCC_OscConfig+0x190>
 800647e:	4b41      	ldr	r3, [pc, #260]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	015b      	lsls	r3, r3, #5
 800648c:	493d      	ldr	r1, [pc, #244]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 800648e:	4313      	orrs	r3, r2
 8006490:	60cb      	str	r3, [r1, #12]
 8006492:	e019      	b.n	80064c8 <HAL_RCC_OscConfig+0x1c4>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800649c:	d30a      	bcc.n	80064b4 <HAL_RCC_OscConfig+0x1b0>
 800649e:	4b39      	ldr	r3, [pc, #228]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	4935      	ldr	r1, [pc, #212]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60cb      	str	r3, [r1, #12]
 80064b2:	e009      	b.n	80064c8 <HAL_RCC_OscConfig+0x1c4>
 80064b4:	4b33      	ldr	r3, [pc, #204]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	03db      	lsls	r3, r3, #15
 80064c2:	4930      	ldr	r1, [pc, #192]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 f93c 	bl	8007750 <RCC_SetFlashLatencyFromMSIRange>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f000 bde5 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80064e4:	f001 f8de 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80064e8:	4b27      	ldr	r3, [pc, #156]	@ (8006588 <HAL_RCC_OscConfig+0x284>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fc fb11 	bl	8002b14 <HAL_InitTick>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80064f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 808a 	beq.w	8006616 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006502:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006506:	f000 bdd2 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d066      	beq.n	80065e0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006512:	4b1c      	ldr	r3, [pc, #112]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1b      	ldr	r2, [pc, #108]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800651e:	f7fc fb83 	bl	8002c28 <HAL_GetTick>
 8006522:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006524:	e009      	b.n	800653a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006526:	f7fc fb7f 	bl	8002c28 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d902      	bls.n	800653a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	f000 bdba 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800653a:	4b12      	ldr	r3, [pc, #72]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0ef      	beq.n	8006526 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006546:	4b0f      	ldr	r3, [pc, #60]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	4a0e      	ldr	r2, [pc, #56]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 800654c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006550:	6093      	str	r3, [r2, #8]
 8006552:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	4909      	ldr	r1, [pc, #36]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006560:	4313      	orrs	r3, r2
 8006562:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800656c:	d30e      	bcc.n	800658c <HAL_RCC_OscConfig+0x288>
 800656e:	4b05      	ldr	r3, [pc, #20]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f023 021f 	bic.w	r2, r3, #31
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	4902      	ldr	r1, [pc, #8]	@ (8006584 <HAL_RCC_OscConfig+0x280>)
 800657c:	4313      	orrs	r3, r2
 800657e:	60cb      	str	r3, [r1, #12]
 8006580:	e04a      	b.n	8006618 <HAL_RCC_OscConfig+0x314>
 8006582:	bf00      	nop
 8006584:	46020c00 	.word	0x46020c00
 8006588:	20000004 	.word	0x20000004
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	da0a      	bge.n	80065aa <HAL_RCC_OscConfig+0x2a6>
 8006594:	4b98      	ldr	r3, [pc, #608]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	015b      	lsls	r3, r3, #5
 80065a2:	4995      	ldr	r1, [pc, #596]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60cb      	str	r3, [r1, #12]
 80065a8:	e036      	b.n	8006618 <HAL_RCC_OscConfig+0x314>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b2:	d30a      	bcc.n	80065ca <HAL_RCC_OscConfig+0x2c6>
 80065b4:	4b90      	ldr	r3, [pc, #576]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	498d      	ldr	r1, [pc, #564]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60cb      	str	r3, [r1, #12]
 80065c8:	e026      	b.n	8006618 <HAL_RCC_OscConfig+0x314>
 80065ca:	4b8b      	ldr	r3, [pc, #556]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	03db      	lsls	r3, r3, #15
 80065d8:	4987      	ldr	r1, [pc, #540]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	60cb      	str	r3, [r1, #12]
 80065de:	e01b      	b.n	8006618 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80065e0:	4b85      	ldr	r3, [pc, #532]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a84      	ldr	r2, [pc, #528]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80065ec:	f7fc fb1c 	bl	8002c28 <HAL_GetTick>
 80065f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80065f2:	e009      	b.n	8006608 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065f4:	f7fc fb18 	bl	8002c28 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d902      	bls.n	8006608 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	f000 bd53 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006608:	4b7b      	ldr	r3, [pc, #492]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ef      	bne.n	80065f4 <HAL_RCC_OscConfig+0x2f0>
 8006614:	e000      	b.n	8006618 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006616:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 808b 	beq.w	800673c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	2b08      	cmp	r3, #8
 800662a:	d005      	beq.n	8006638 <HAL_RCC_OscConfig+0x334>
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	2b0c      	cmp	r3, #12
 8006630:	d109      	bne.n	8006646 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	2b03      	cmp	r3, #3
 8006636:	d106      	bne.n	8006646 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d17d      	bne.n	800673c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f000 bd34 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800664e:	d106      	bne.n	800665e <HAL_RCC_OscConfig+0x35a>
 8006650:	4b69      	ldr	r3, [pc, #420]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a68      	ldr	r2, [pc, #416]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e041      	b.n	80066e2 <HAL_RCC_OscConfig+0x3de>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006666:	d112      	bne.n	800668e <HAL_RCC_OscConfig+0x38a>
 8006668:	4b63      	ldr	r3, [pc, #396]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a62      	ldr	r2, [pc, #392]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 800666e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	4b60      	ldr	r3, [pc, #384]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a5f      	ldr	r2, [pc, #380]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 800667a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	4b5d      	ldr	r3, [pc, #372]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5c      	ldr	r2, [pc, #368]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	e029      	b.n	80066e2 <HAL_RCC_OscConfig+0x3de>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006696:	d112      	bne.n	80066be <HAL_RCC_OscConfig+0x3ba>
 8006698:	4b57      	ldr	r3, [pc, #348]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a56      	ldr	r2, [pc, #344]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 800669e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	4b54      	ldr	r3, [pc, #336]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a53      	ldr	r2, [pc, #332]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	4b51      	ldr	r3, [pc, #324]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a50      	ldr	r2, [pc, #320]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e011      	b.n	80066e2 <HAL_RCC_OscConfig+0x3de>
 80066be:	4b4e      	ldr	r3, [pc, #312]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a4d      	ldr	r2, [pc, #308]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	4b4b      	ldr	r3, [pc, #300]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a4a      	ldr	r2, [pc, #296]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	4b48      	ldr	r3, [pc, #288]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a47      	ldr	r2, [pc, #284]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80066dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80066ea:	f7fc fa9d 	bl	8002c28 <HAL_GetTick>
 80066ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066f0:	e009      	b.n	8006706 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066f2:	f7fc fa99 	bl	8002c28 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b64      	cmp	r3, #100	@ 0x64
 80066fe:	d902      	bls.n	8006706 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	f000 bcd4 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006706:	4b3c      	ldr	r3, [pc, #240]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0ef      	beq.n	80066f2 <HAL_RCC_OscConfig+0x3ee>
 8006712:	e013      	b.n	800673c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006714:	f7fc fa88 	bl	8002c28 <HAL_GetTick>
 8006718:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800671a:	e009      	b.n	8006730 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800671c:	f7fc fa84 	bl	8002c28 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	@ 0x64
 8006728:	d902      	bls.n	8006730 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	f000 bcbf 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006730:	4b31      	ldr	r3, [pc, #196]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1ef      	bne.n	800671c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d05f      	beq.n	8006808 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	2b04      	cmp	r3, #4
 800674c:	d005      	beq.n	800675a <HAL_RCC_OscConfig+0x456>
 800674e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006750:	2b0c      	cmp	r3, #12
 8006752:	d114      	bne.n	800677e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006756:	2b02      	cmp	r3, #2
 8006758:	d111      	bne.n	800677e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	f000 bca3 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006768:	4b23      	ldr	r3, [pc, #140]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	041b      	lsls	r3, r3, #16
 8006776:	4920      	ldr	r1, [pc, #128]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006778:	4313      	orrs	r3, r2
 800677a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800677c:	e044      	b.n	8006808 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d024      	beq.n	80067d0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006786:	4b1c      	ldr	r3, [pc, #112]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1b      	ldr	r2, [pc, #108]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 800678c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006790:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006792:	f7fc fa49 	bl	8002c28 <HAL_GetTick>
 8006796:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006798:	e009      	b.n	80067ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800679a:	f7fc fa45 	bl	8002c28 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d902      	bls.n	80067ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	f000 bc80 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ae:	4b12      	ldr	r3, [pc, #72]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0ef      	beq.n	800679a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80067ba:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	490b      	ldr	r1, [pc, #44]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	610b      	str	r3, [r1, #16]
 80067ce:	e01b      	b.n	8006808 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80067d0:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a08      	ldr	r2, [pc, #32]	@ (80067f8 <HAL_RCC_OscConfig+0x4f4>)
 80067d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80067dc:	f7fc fa24 	bl	8002c28 <HAL_GetTick>
 80067e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067e2:	e00b      	b.n	80067fc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e4:	f7fc fa20 	bl	8002c28 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d904      	bls.n	80067fc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	f000 bc5b 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
 80067f8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067fc:	4baf      	ldr	r3, [pc, #700]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1ed      	bne.n	80067e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80c8 	beq.w	80069a6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006816:	2300      	movs	r3, #0
 8006818:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681c:	4ba7      	ldr	r3, [pc, #668]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 800681e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d111      	bne.n	800684e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800682a:	4ba4      	ldr	r3, [pc, #656]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006830:	4aa2      	ldr	r2, [pc, #648]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006832:	f043 0304 	orr.w	r3, r3, #4
 8006836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800683a:	4ba0      	ldr	r3, [pc, #640]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 800683c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800684e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac0 <HAL_RCC_OscConfig+0x7bc>)
 8006850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d119      	bne.n	800688e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800685a:	4b99      	ldr	r3, [pc, #612]	@ (8006ac0 <HAL_RCC_OscConfig+0x7bc>)
 800685c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685e:	4a98      	ldr	r2, [pc, #608]	@ (8006ac0 <HAL_RCC_OscConfig+0x7bc>)
 8006860:	f043 0301 	orr.w	r3, r3, #1
 8006864:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006866:	f7fc f9df 	bl	8002c28 <HAL_GetTick>
 800686a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800686c:	e009      	b.n	8006882 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686e:	f7fc f9db 	bl	8002c28 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d902      	bls.n	8006882 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	f000 bc16 	b.w	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006882:	4b8f      	ldr	r3, [pc, #572]	@ (8006ac0 <HAL_RCC_OscConfig+0x7bc>)
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0ef      	beq.n	800686e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d05f      	beq.n	8006956 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006896:	4b89      	ldr	r3, [pc, #548]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800689c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d037      	beq.n	800691c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d006      	beq.n	80068c4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e3f4      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01b      	beq.n	8006906 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80068ce:	4b7b      	ldr	r3, [pc, #492]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 80068d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068d4:	4a79      	ldr	r2, [pc, #484]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 80068d6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80068da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80068de:	f7fc f9a3 	bl	8002c28 <HAL_GetTick>
 80068e2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068e6:	f7fc f99f 	bl	8002c28 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b05      	cmp	r3, #5
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e3da      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80068f8:	4b70      	ldr	r3, [pc, #448]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 80068fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ef      	bne.n	80068e6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006906:	4b6d      	ldr	r3, [pc, #436]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800690c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	4969      	ldr	r1, [pc, #420]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800691c:	4b67      	ldr	r3, [pc, #412]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 800691e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006922:	4a66      	ldr	r2, [pc, #408]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006928:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800692c:	f7fc f97c 	bl	8002c28 <HAL_GetTick>
 8006930:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006934:	f7fc f978 	bl	8002c28 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b05      	cmp	r3, #5
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e3b3      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006946:	4b5d      	ldr	r3, [pc, #372]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800694c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0ef      	beq.n	8006934 <HAL_RCC_OscConfig+0x630>
 8006954:	e01b      	b.n	800698e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006956:	4b59      	ldr	r3, [pc, #356]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800695c:	4a57      	ldr	r2, [pc, #348]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 800695e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006962:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006966:	f7fc f95f 	bl	8002c28 <HAL_GetTick>
 800696a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696e:	f7fc f95b 	bl	8002c28 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b05      	cmp	r3, #5
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e396      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006980:	4b4e      	ldr	r3, [pc, #312]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1ef      	bne.n	800696e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800698e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006992:	2b01      	cmp	r3, #1
 8006994:	d107      	bne.n	80069a6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006996:	4b49      	ldr	r3, [pc, #292]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800699c:	4a47      	ldr	r2, [pc, #284]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 800699e:	f023 0304 	bic.w	r3, r3, #4
 80069a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8111 	beq.w	8006bd6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ba:	4b40      	ldr	r3, [pc, #256]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 80069bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d111      	bne.n	80069ec <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c8:	4b3c      	ldr	r3, [pc, #240]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 80069ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069ce:	4a3b      	ldr	r2, [pc, #236]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 80069d0:	f043 0304 	orr.w	r3, r3, #4
 80069d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80069d8:	4b38      	ldr	r3, [pc, #224]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 80069da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80069ec:	4b34      	ldr	r3, [pc, #208]	@ (8006ac0 <HAL_RCC_OscConfig+0x7bc>)
 80069ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d118      	bne.n	8006a2a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80069f8:	4b31      	ldr	r3, [pc, #196]	@ (8006ac0 <HAL_RCC_OscConfig+0x7bc>)
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	4a30      	ldr	r2, [pc, #192]	@ (8006ac0 <HAL_RCC_OscConfig+0x7bc>)
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a04:	f7fc f910 	bl	8002c28 <HAL_GetTick>
 8006a08:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a0c:	f7fc f90c 	bl	8002c28 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e347      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006a1e:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <HAL_RCC_OscConfig+0x7bc>)
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01f      	beq.n	8006a76 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d010      	beq.n	8006a64 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a42:	4b1e      	ldr	r3, [pc, #120]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a48:	4a1c      	ldr	r2, [pc, #112]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a52:	4b1a      	ldr	r3, [pc, #104]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a58:	4a18      	ldr	r2, [pc, #96]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a62:	e018      	b.n	8006a96 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a64:	4b15      	ldr	r3, [pc, #84]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a6a:	4a14      	ldr	r2, [pc, #80]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a74:	e00f      	b.n	8006a96 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a76:	4b11      	ldr	r3, [pc, #68]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a86:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8006abc <HAL_RCC_OscConfig+0x7b8>)
 8006a8e:	f023 0304 	bic.w	r3, r3, #4
 8006a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d057      	beq.n	8006b4e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006a9e:	f7fc f8c3 	bl	8002c28 <HAL_GetTick>
 8006aa2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa4:	e00e      	b.n	8006ac4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa6:	f7fc f8bf 	bl	8002c28 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d905      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e2f8      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
 8006abc:	46020c00 	.word	0x46020c00
 8006ac0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ac4:	4b9c      	ldr	r3, [pc, #624]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0e9      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01b      	beq.n	8006b16 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006ade:	4b96      	ldr	r3, [pc, #600]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ae4:	4a94      	ldr	r2, [pc, #592]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006aee:	e00a      	b.n	8006b06 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af0:	f7fc f89a 	bl	8002c28 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e2d3      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b06:	4b8c      	ldr	r3, [pc, #560]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0ed      	beq.n	8006af0 <HAL_RCC_OscConfig+0x7ec>
 8006b14:	e053      	b.n	8006bbe <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b16:	4b88      	ldr	r3, [pc, #544]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b1c:	4a86      	ldr	r2, [pc, #536]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b26:	e00a      	b.n	8006b3e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b28:	f7fc f87e 	bl	8002c28 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e2b7      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ed      	bne.n	8006b28 <HAL_RCC_OscConfig+0x824>
 8006b4c:	e037      	b.n	8006bbe <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006b4e:	f7fc f86b 	bl	8002c28 <HAL_GetTick>
 8006b52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b54:	e00a      	b.n	8006b6c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b56:	f7fc f867 	bl	8002c28 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e2a0      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b6c:	4b72      	ldr	r3, [pc, #456]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1ed      	bne.n	8006b56 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01a      	beq.n	8006bbe <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b88:	4b6b      	ldr	r3, [pc, #428]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b8e:	4a6a      	ldr	r2, [pc, #424]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006b98:	e00a      	b.n	8006bb0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9a:	f7fc f845 	bl	8002c28 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e27e      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bb0:	4b61      	ldr	r3, [pc, #388]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1ed      	bne.n	8006b9a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bbe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d107      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bcc:	4a5a      	ldr	r2, [pc, #360]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006bce:	f023 0304 	bic.w	r3, r3, #4
 8006bd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d036      	beq.n	8006c50 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d019      	beq.n	8006c1e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006bea:	4b53      	ldr	r3, [pc, #332]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a52      	ldr	r2, [pc, #328]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006bf4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006bf6:	f7fc f817 	bl	8002c28 <HAL_GetTick>
 8006bfa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bfe:	f7fc f813 	bl	8002c28 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e24e      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006c10:	4b49      	ldr	r3, [pc, #292]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x8fa>
 8006c1c:	e018      	b.n	8006c50 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006c1e:	4b46      	ldr	r3, [pc, #280]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a45      	ldr	r2, [pc, #276]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c28:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006c2a:	f7fb fffd 	bl	8002c28 <HAL_GetTick>
 8006c2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c32:	f7fb fff9 	bl	8002c28 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e234      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006c44:	4b3c      	ldr	r3, [pc, #240]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f0      	bne.n	8006c32 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d036      	beq.n	8006cca <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d019      	beq.n	8006c98 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006c64:	4b34      	ldr	r3, [pc, #208]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a33      	ldr	r2, [pc, #204]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006c70:	f7fb ffda 	bl	8002c28 <HAL_GetTick>
 8006c74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006c78:	f7fb ffd6 	bl	8002c28 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e211      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x974>
 8006c96:	e018      	b.n	8006cca <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006c98:	4b27      	ldr	r3, [pc, #156]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a26      	ldr	r2, [pc, #152]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ca2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ca4:	f7fb ffc0 	bl	8002c28 <HAL_GetTick>
 8006ca8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006cac:	f7fb ffbc 	bl	8002c28 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e1f7      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f0      	bne.n	8006cac <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d07f      	beq.n	8006dd6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d062      	beq.n	8006da4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006cde:	4b16      	ldr	r3, [pc, #88]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006ce4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ce8:	6093      	str	r3, [r2, #8]
 8006cea:	4b13      	ldr	r3, [pc, #76]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf6:	4910      	ldr	r1, [pc, #64]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006d04:	d309      	bcc.n	8006d1a <HAL_RCC_OscConfig+0xa16>
 8006d06:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f023 021f 	bic.w	r2, r3, #31
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	4909      	ldr	r1, [pc, #36]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60cb      	str	r3, [r1, #12]
 8006d18:	e02a      	b.n	8006d70 <HAL_RCC_OscConfig+0xa6c>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	da0c      	bge.n	8006d3c <HAL_RCC_OscConfig+0xa38>
 8006d22:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	015b      	lsls	r3, r3, #5
 8006d30:	4901      	ldr	r1, [pc, #4]	@ (8006d38 <HAL_RCC_OscConfig+0xa34>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60cb      	str	r3, [r1, #12]
 8006d36:	e01b      	b.n	8006d70 <HAL_RCC_OscConfig+0xa6c>
 8006d38:	46020c00 	.word	0x46020c00
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d44:	d30a      	bcc.n	8006d5c <HAL_RCC_OscConfig+0xa58>
 8006d46:	4ba1      	ldr	r3, [pc, #644]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	029b      	lsls	r3, r3, #10
 8006d54:	499d      	ldr	r1, [pc, #628]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60cb      	str	r3, [r1, #12]
 8006d5a:	e009      	b.n	8006d70 <HAL_RCC_OscConfig+0xa6c>
 8006d5c:	4b9b      	ldr	r3, [pc, #620]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	03db      	lsls	r3, r3, #15
 8006d6a:	4998      	ldr	r1, [pc, #608]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006d70:	4b96      	ldr	r3, [pc, #600]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a95      	ldr	r2, [pc, #596]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006d76:	f043 0310 	orr.w	r3, r3, #16
 8006d7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d7c:	f7fb ff54 	bl	8002c28 <HAL_GetTick>
 8006d80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006d84:	f7fb ff50 	bl	8002c28 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e18b      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006d96:	4b8d      	ldr	r3, [pc, #564]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0f0      	beq.n	8006d84 <HAL_RCC_OscConfig+0xa80>
 8006da2:	e018      	b.n	8006dd6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006da4:	4b89      	ldr	r3, [pc, #548]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a88      	ldr	r2, [pc, #544]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006daa:	f023 0310 	bic.w	r3, r3, #16
 8006dae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006db0:	f7fb ff3a 	bl	8002c28 <HAL_GetTick>
 8006db4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006db8:	f7fb ff36 	bl	8002c28 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e171      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006dca:	4b80      	ldr	r3, [pc, #512]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 8166 	beq.w	80070ac <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006de6:	4b79      	ldr	r3, [pc, #484]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f003 030c 	and.w	r3, r3, #12
 8006dee:	2b0c      	cmp	r3, #12
 8006df0:	f000 80f2 	beq.w	8006fd8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	f040 80c5 	bne.w	8006f88 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006dfe:	4b73      	ldr	r3, [pc, #460]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a72      	ldr	r2, [pc, #456]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006e04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e08:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006e0a:	f7fb ff0d 	bl	8002c28 <HAL_GetTick>
 8006e0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e12:	f7fb ff09 	bl	8002c28 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e144      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006e24:	4b69      	ldr	r3, [pc, #420]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f0      	bne.n	8006e12 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e30:	4b66      	ldr	r3, [pc, #408]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d111      	bne.n	8006e62 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006e3e:	4b63      	ldr	r3, [pc, #396]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e44:	4a61      	ldr	r2, [pc, #388]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006e46:	f043 0304 	orr.w	r3, r3, #4
 8006e4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006e62:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd0 <HAL_RCC_OscConfig+0xccc>)
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e6e:	d102      	bne.n	8006e76 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006e76:	4b56      	ldr	r3, [pc, #344]	@ (8006fd0 <HAL_RCC_OscConfig+0xccc>)
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	4a55      	ldr	r2, [pc, #340]	@ (8006fd0 <HAL_RCC_OscConfig+0xccc>)
 8006e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e80:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006e82:	4b52      	ldr	r3, [pc, #328]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006e96:	3a01      	subs	r2, #1
 8006e98:	0212      	lsls	r2, r2, #8
 8006e9a:	4311      	orrs	r1, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	494a      	ldr	r1, [pc, #296]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ea8:	4b48      	ldr	r3, [pc, #288]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eac:	4b49      	ldr	r3, [pc, #292]	@ (8006fd4 <HAL_RCC_OscConfig+0xcd0>)
 8006eae:	4013      	ands	r3, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006eb4:	3a01      	subs	r2, #1
 8006eb6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006ebe:	3a01      	subs	r2, #1
 8006ec0:	0252      	lsls	r2, r2, #9
 8006ec2:	b292      	uxth	r2, r2
 8006ec4:	4311      	orrs	r1, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006eca:	3a01      	subs	r2, #1
 8006ecc:	0412      	lsls	r2, r2, #16
 8006ece:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006ed2:	4311      	orrs	r1, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006ed8:	3a01      	subs	r2, #1
 8006eda:	0612      	lsls	r2, r2, #24
 8006edc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	493a      	ldr	r1, [pc, #232]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006ee8:	4b38      	ldr	r3, [pc, #224]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	4a37      	ldr	r2, [pc, #220]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006eee:	f023 0310 	bic.w	r3, r3, #16
 8006ef2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ef8:	4a34      	ldr	r2, [pc, #208]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006efe:	4b33      	ldr	r3, [pc, #204]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f02:	4a32      	ldr	r2, [pc, #200]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f04:	f043 0310 	orr.w	r3, r3, #16
 8006f08:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006f0a:	4b30      	ldr	r3, [pc, #192]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0e:	f023 020c 	bic.w	r2, r3, #12
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	492d      	ldr	r1, [pc, #180]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d105      	bne.n	8006f30 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006f24:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd0 <HAL_RCC_OscConfig+0xccc>)
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4a29      	ldr	r2, [pc, #164]	@ (8006fd0 <HAL_RCC_OscConfig+0xccc>)
 8006f2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f2e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006f30:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d107      	bne.n	8006f48 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006f38:	4b24      	ldr	r3, [pc, #144]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f3e:	4a23      	ldr	r2, [pc, #140]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f40:	f023 0304 	bic.w	r3, r3, #4
 8006f44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006f48:	4b20      	ldr	r3, [pc, #128]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006f54:	f7fb fe68 	bl	8002c28 <HAL_GetTick>
 8006f58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f5c:	f7fb fe64 	bl	8002c28 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e09f      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006f6e:	4b17      	ldr	r3, [pc, #92]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f7a:	4b14      	ldr	r3, [pc, #80]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7e:	4a13      	ldr	r2, [pc, #76]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f84:	6293      	str	r3, [r2, #40]	@ 0x28
 8006f86:	e091      	b.n	80070ac <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006f88:	4b10      	ldr	r3, [pc, #64]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006f94:	f7fb fe48 	bl	8002c28 <HAL_GetTick>
 8006f98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f9c:	f7fb fe44 	bl	8002c28 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e07f      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006fae:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f0      	bne.n	8006f9c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006fba:	4b04      	ldr	r3, [pc, #16]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbe:	4a03      	ldr	r2, [pc, #12]	@ (8006fcc <HAL_RCC_OscConfig+0xcc8>)
 8006fc0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006fc4:	f023 0303 	bic.w	r3, r3, #3
 8006fc8:	6293      	str	r3, [r2, #40]	@ 0x28
 8006fca:	e06f      	b.n	80070ac <HAL_RCC_OscConfig+0xda8>
 8006fcc:	46020c00 	.word	0x46020c00
 8006fd0:	46020800 	.word	0x46020800
 8006fd4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006fd8:	4b37      	ldr	r3, [pc, #220]	@ (80070b8 <HAL_RCC_OscConfig+0xdb4>)
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006fde:	4b36      	ldr	r3, [pc, #216]	@ (80070b8 <HAL_RCC_OscConfig+0xdb4>)
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d039      	beq.n	8007060 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f003 0203 	and.w	r2, r3, #3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d132      	bne.n	8007060 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d129      	bne.n	8007060 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007016:	429a      	cmp	r2, r3
 8007018:	d122      	bne.n	8007060 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007024:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007026:	429a      	cmp	r2, r3
 8007028:	d11a      	bne.n	8007060 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	0a5b      	lsrs	r3, r3, #9
 800702e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007036:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d111      	bne.n	8007060 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007048:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800704a:	429a      	cmp	r2, r3
 800704c:	d108      	bne.n	8007060 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	0e1b      	lsrs	r3, r3, #24
 8007052:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e024      	b.n	80070ae <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007064:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <HAL_RCC_OscConfig+0xdb4>)
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	08db      	lsrs	r3, r3, #3
 800706a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007072:	429a      	cmp	r2, r3
 8007074:	d01a      	beq.n	80070ac <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007076:	4b10      	ldr	r3, [pc, #64]	@ (80070b8 <HAL_RCC_OscConfig+0xdb4>)
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	4a0f      	ldr	r2, [pc, #60]	@ (80070b8 <HAL_RCC_OscConfig+0xdb4>)
 800707c:	f023 0310 	bic.w	r3, r3, #16
 8007080:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007082:	f7fb fdd1 	bl	8002c28 <HAL_GetTick>
 8007086:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007088:	bf00      	nop
 800708a:	f7fb fdcd 	bl	8002c28 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	4293      	cmp	r3, r2
 8007094:	d0f9      	beq.n	800708a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800709a:	4a07      	ldr	r2, [pc, #28]	@ (80070b8 <HAL_RCC_OscConfig+0xdb4>)
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80070a0:	4b05      	ldr	r3, [pc, #20]	@ (80070b8 <HAL_RCC_OscConfig+0xdb4>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	4a04      	ldr	r2, [pc, #16]	@ (80070b8 <HAL_RCC_OscConfig+0xdb4>)
 80070a6:	f043 0310 	orr.w	r3, r3, #16
 80070aa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3738      	adds	r7, #56	@ 0x38
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	46020c00 	.word	0x46020c00

080070bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e1d9      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070d0:	4b9b      	ldr	r3, [pc, #620]	@ (8007340 <HAL_RCC_ClockConfig+0x284>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d910      	bls.n	8007100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070de:	4b98      	ldr	r3, [pc, #608]	@ (8007340 <HAL_RCC_ClockConfig+0x284>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f023 020f 	bic.w	r2, r3, #15
 80070e6:	4996      	ldr	r1, [pc, #600]	@ (8007340 <HAL_RCC_ClockConfig+0x284>)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ee:	4b94      	ldr	r3, [pc, #592]	@ (8007340 <HAL_RCC_ClockConfig+0x284>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d001      	beq.n	8007100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e1c1      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	d010      	beq.n	800712e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	4b8c      	ldr	r3, [pc, #560]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007118:	429a      	cmp	r2, r3
 800711a:	d908      	bls.n	800712e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800711c:	4b89      	ldr	r3, [pc, #548]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	4986      	ldr	r1, [pc, #536]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 800712a:	4313      	orrs	r3, r2
 800712c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d012      	beq.n	8007160 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	4b81      	ldr	r3, [pc, #516]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	091b      	lsrs	r3, r3, #4
 8007144:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007148:	429a      	cmp	r2, r3
 800714a:	d909      	bls.n	8007160 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800714c:	4b7d      	ldr	r3, [pc, #500]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	497a      	ldr	r1, [pc, #488]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 800715c:	4313      	orrs	r3, r2
 800715e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	4b74      	ldr	r3, [pc, #464]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007178:	429a      	cmp	r2, r3
 800717a:	d908      	bls.n	800718e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800717c:	4b71      	ldr	r3, [pc, #452]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	496e      	ldr	r1, [pc, #440]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 800718a:	4313      	orrs	r3, r2
 800718c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d010      	beq.n	80071bc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	4b69      	ldr	r3, [pc, #420]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d908      	bls.n	80071bc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80071aa:	4b66      	ldr	r3, [pc, #408]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 020f 	bic.w	r2, r3, #15
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	4963      	ldr	r1, [pc, #396]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80d2 	beq.w	800736e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80071ca:	2300      	movs	r3, #0
 80071cc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d143      	bne.n	800725e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d6:	4b5b      	ldr	r3, [pc, #364]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80071d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d110      	bne.n	8007206 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80071e4:	4b57      	ldr	r3, [pc, #348]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80071e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ea:	4a56      	ldr	r2, [pc, #344]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80071ec:	f043 0304 	orr.w	r3, r3, #4
 80071f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80071f4:	4b53      	ldr	r3, [pc, #332]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80071f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	60bb      	str	r3, [r7, #8]
 8007200:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007206:	f7fb fd0f 	bl	8002c28 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800720c:	4b4e      	ldr	r3, [pc, #312]	@ (8007348 <HAL_RCC_ClockConfig+0x28c>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00f      	beq.n	8007238 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007218:	e008      	b.n	800722c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800721a:	f7fb fd05 	bl	8002c28 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e12b      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800722c:	4b46      	ldr	r3, [pc, #280]	@ (8007348 <HAL_RCC_ClockConfig+0x28c>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d107      	bne.n	800724e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800723e:	4b41      	ldr	r3, [pc, #260]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007244:	4a3f      	ldr	r2, [pc, #252]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007246:	f023 0304 	bic.w	r3, r3, #4
 800724a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800724e:	4b3d      	ldr	r3, [pc, #244]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d121      	bne.n	800729e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e112      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d107      	bne.n	8007276 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007266:	4b37      	ldr	r3, [pc, #220]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d115      	bne.n	800729e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e106      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d107      	bne.n	800728e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800727e:	4b31      	ldr	r3, [pc, #196]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e0fa      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800728e:	4b2d      	ldr	r3, [pc, #180]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e0f2      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800729e:	4b29      	ldr	r3, [pc, #164]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	f023 0203 	bic.w	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	4926      	ldr	r1, [pc, #152]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80072b0:	f7fb fcba 	bl	8002c28 <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d112      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072be:	e00a      	b.n	80072d6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c0:	f7fb fcb2 	bl	8002c28 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e0d6      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f003 030c 	and.w	r3, r3, #12
 80072de:	2b0c      	cmp	r3, #12
 80072e0:	d1ee      	bne.n	80072c0 <HAL_RCC_ClockConfig+0x204>
 80072e2:	e044      	b.n	800736e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d112      	bne.n	8007312 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80072ec:	e00a      	b.n	8007304 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072ee:	f7fb fc9b 	bl	8002c28 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e0bf      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007304:	4b0f      	ldr	r3, [pc, #60]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	2b08      	cmp	r3, #8
 800730e:	d1ee      	bne.n	80072ee <HAL_RCC_ClockConfig+0x232>
 8007310:	e02d      	b.n	800736e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d123      	bne.n	8007362 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800731a:	e00a      	b.n	8007332 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800731c:	f7fb fc84 	bl	8002c28 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800732a:	4293      	cmp	r3, r2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e0a8      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007332:	4b04      	ldr	r3, [pc, #16]	@ (8007344 <HAL_RCC_ClockConfig+0x288>)
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	f003 030c 	and.w	r3, r3, #12
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1ee      	bne.n	800731c <HAL_RCC_ClockConfig+0x260>
 800733e:	e016      	b.n	800736e <HAL_RCC_ClockConfig+0x2b2>
 8007340:	40022000 	.word	0x40022000
 8007344:	46020c00 	.word	0x46020c00
 8007348:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800734c:	f7fb fc6c 	bl	8002c28 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800735a:	4293      	cmp	r3, r2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e090      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007362:	4b4a      	ldr	r3, [pc, #296]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f003 030c 	and.w	r3, r3, #12
 800736a:	2b04      	cmp	r3, #4
 800736c:	d1ee      	bne.n	800734c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d010      	beq.n	800739c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	4b43      	ldr	r3, [pc, #268]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	429a      	cmp	r2, r3
 8007388:	d208      	bcs.n	800739c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800738a:	4b40      	ldr	r3, [pc, #256]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 020f 	bic.w	r2, r3, #15
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	493d      	ldr	r1, [pc, #244]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 8007398:	4313      	orrs	r3, r2
 800739a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800739c:	4b3c      	ldr	r3, [pc, #240]	@ (8007490 <HAL_RCC_ClockConfig+0x3d4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d210      	bcs.n	80073cc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073aa:	4b39      	ldr	r3, [pc, #228]	@ (8007490 <HAL_RCC_ClockConfig+0x3d4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f023 020f 	bic.w	r2, r3, #15
 80073b2:	4937      	ldr	r1, [pc, #220]	@ (8007490 <HAL_RCC_ClockConfig+0x3d4>)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ba:	4b35      	ldr	r3, [pc, #212]	@ (8007490 <HAL_RCC_ClockConfig+0x3d4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d001      	beq.n	80073cc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e05b      	b.n	8007484 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	4b2b      	ldr	r3, [pc, #172]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d208      	bcs.n	80073fa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80073e8:	4b28      	ldr	r3, [pc, #160]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4925      	ldr	r1, [pc, #148]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d012      	beq.n	800742c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691a      	ldr	r2, [r3, #16]
 800740a:	4b20      	ldr	r3, [pc, #128]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	091b      	lsrs	r3, r3, #4
 8007410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007414:	429a      	cmp	r2, r3
 8007416:	d209      	bcs.n	800742c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007418:	4b1c      	ldr	r3, [pc, #112]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	4919      	ldr	r1, [pc, #100]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 8007428:	4313      	orrs	r3, r2
 800742a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b00      	cmp	r3, #0
 8007436:	d010      	beq.n	800745a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695a      	ldr	r2, [r3, #20]
 800743c:	4b13      	ldr	r3, [pc, #76]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 800743e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007440:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007444:	429a      	cmp	r2, r3
 8007446:	d208      	bcs.n	800745a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007448:	4b10      	ldr	r3, [pc, #64]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	490d      	ldr	r1, [pc, #52]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 8007456:	4313      	orrs	r3, r2
 8007458:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800745a:	f000 f821 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 800745e:	4602      	mov	r2, r0
 8007460:	4b0a      	ldr	r3, [pc, #40]	@ (800748c <HAL_RCC_ClockConfig+0x3d0>)
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	490a      	ldr	r1, [pc, #40]	@ (8007494 <HAL_RCC_ClockConfig+0x3d8>)
 800746a:	5ccb      	ldrb	r3, [r1, r3]
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
 8007470:	4a09      	ldr	r2, [pc, #36]	@ (8007498 <HAL_RCC_ClockConfig+0x3dc>)
 8007472:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007474:	4b09      	ldr	r3, [pc, #36]	@ (800749c <HAL_RCC_ClockConfig+0x3e0>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f7fb fb4b 	bl	8002b14 <HAL_InitTick>
 800747e:	4603      	mov	r3, r0
 8007480:	73fb      	strb	r3, [r7, #15]

  return status;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	46020c00 	.word	0x46020c00
 8007490:	40022000 	.word	0x40022000
 8007494:	0800d170 	.word	0x0800d170
 8007498:	20000000 	.word	0x20000000
 800749c:	20000004 	.word	0x20000004

080074a0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b08b      	sub	sp, #44	@ 0x2c
 80074a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ae:	4b78      	ldr	r3, [pc, #480]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	f003 030c 	and.w	r3, r3, #12
 80074b6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074b8:	4b75      	ldr	r3, [pc, #468]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <HAL_RCC_GetSysClockFreq+0x34>
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b0c      	cmp	r3, #12
 80074cc:	d121      	bne.n	8007512 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d11e      	bne.n	8007512 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80074d4:	4b6e      	ldr	r3, [pc, #440]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d107      	bne.n	80074f0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80074e0:	4b6b      	ldr	r3, [pc, #428]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80074e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074e6:	0b1b      	lsrs	r3, r3, #12
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ee:	e005      	b.n	80074fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80074f0:	4b67      	ldr	r3, [pc, #412]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	0f1b      	lsrs	r3, r3, #28
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80074fc:	4a65      	ldr	r2, [pc, #404]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007504:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d110      	bne.n	800752e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007510:	e00d      	b.n	800752e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007512:	4b5f      	ldr	r3, [pc, #380]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f003 030c 	and.w	r3, r3, #12
 800751a:	2b04      	cmp	r3, #4
 800751c:	d102      	bne.n	8007524 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800751e:	4b5e      	ldr	r3, [pc, #376]	@ (8007698 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	e004      	b.n	800752e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	2b08      	cmp	r3, #8
 8007528:	d101      	bne.n	800752e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800752a:	4b5b      	ldr	r3, [pc, #364]	@ (8007698 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800752c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b0c      	cmp	r3, #12
 8007532:	f040 80a5 	bne.w	8007680 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007536:	4b56      	ldr	r3, [pc, #344]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007540:	4b53      	ldr	r3, [pc, #332]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007544:	0a1b      	lsrs	r3, r3, #8
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800754e:	4b50      	ldr	r3, [pc, #320]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007552:	091b      	lsrs	r3, r3, #4
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800755a:	4b4d      	ldr	r3, [pc, #308]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	08db      	lsrs	r3, r3, #3
 8007560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	fb02 f303 	mul.w	r3, r2, r3
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d003      	beq.n	8007584 <HAL_RCC_GetSysClockFreq+0xe4>
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	2b03      	cmp	r3, #3
 8007580:	d022      	beq.n	80075c8 <HAL_RCC_GetSysClockFreq+0x128>
 8007582:	e043      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800769c <HAL_RCC_GetSysClockFreq+0x1fc>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b3e      	ldr	r3, [pc, #248]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80075a6:	ed97 6a01 	vldr	s12, [r7, #4]
 80075aa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80076a0 <HAL_RCC_GetSysClockFreq+0x200>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c6:	e046      	b.n	8007656 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800769c <HAL_RCC_GetSysClockFreq+0x1fc>
 80075d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075da:	4b2d      	ldr	r3, [pc, #180]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80075dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80075ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80075ee:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80076a0 <HAL_RCC_GetSysClockFreq+0x200>
 80075f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80075f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80075fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760a:	e024      	b.n	8007656 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007624:	4b1a      	ldr	r3, [pc, #104]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007634:	ed97 6a01 	vldr	s12, [r7, #4]
 8007638:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80076a0 <HAL_RCC_GetSysClockFreq+0x200>
 800763c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007640:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007648:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800764c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007654:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007656:	4b0e      	ldr	r3, [pc, #56]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800765a:	0e1b      	lsrs	r3, r3, #24
 800765c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007660:	3301      	adds	r3, #1
 8007662:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800766e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767a:	ee17 3a90 	vmov	r3, s15
 800767e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007680:	6a3b      	ldr	r3, [r7, #32]
}
 8007682:	4618      	mov	r0, r3
 8007684:	372c      	adds	r7, #44	@ 0x2c
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	46020c00 	.word	0x46020c00
 8007694:	0800d188 	.word	0x0800d188
 8007698:	00f42400 	.word	0x00f42400
 800769c:	4b742400 	.word	0x4b742400
 80076a0:	46000000 	.word	0x46000000

080076a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80076a8:	f7ff fefa 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 80076ac:	4602      	mov	r2, r0
 80076ae:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <HAL_RCC_GetHCLKFreq+0x28>)
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	4906      	ldr	r1, [pc, #24]	@ (80076d0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80076b8:	5ccb      	ldrb	r3, [r1, r3]
 80076ba:	fa22 f303 	lsr.w	r3, r2, r3
 80076be:	4a05      	ldr	r2, [pc, #20]	@ (80076d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80076c0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80076c2:	4b04      	ldr	r3, [pc, #16]	@ (80076d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80076c4:	681b      	ldr	r3, [r3, #0]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	46020c00 	.word	0x46020c00
 80076d0:	0800d170 	.word	0x0800d170
 80076d4:	20000000 	.word	0x20000000

080076d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80076dc:	f7ff ffe2 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 80076e0:	4602      	mov	r2, r0
 80076e2:	4b05      	ldr	r3, [pc, #20]	@ (80076f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	091b      	lsrs	r3, r3, #4
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	4903      	ldr	r1, [pc, #12]	@ (80076fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ee:	5ccb      	ldrb	r3, [r1, r3]
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	46020c00 	.word	0x46020c00
 80076fc:	0800d180 	.word	0x0800d180

08007700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007704:	f7ff ffce 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 8007708:	4602      	mov	r2, r0
 800770a:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	4903      	ldr	r1, [pc, #12]	@ (8007724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007716:	5ccb      	ldrb	r3, [r1, r3]
 8007718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800771c:	4618      	mov	r0, r3
 800771e:	bd80      	pop	{r7, pc}
 8007720:	46020c00 	.word	0x46020c00
 8007724:	0800d180 	.word	0x0800d180

08007728 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800772c:	f7ff ffba 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 8007730:	4602      	mov	r2, r0
 8007732:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007736:	091b      	lsrs	r3, r3, #4
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	4903      	ldr	r1, [pc, #12]	@ (800774c <HAL_RCC_GetPCLK3Freq+0x24>)
 800773e:	5ccb      	ldrb	r3, [r1, r3]
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	bd80      	pop	{r7, pc}
 8007748:	46020c00 	.word	0x46020c00
 800774c:	0800d180 	.word	0x0800d180

08007750 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007758:	4b3e      	ldr	r3, [pc, #248]	@ (8007854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800775a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007766:	f7fe fd8f 	bl	8006288 <HAL_PWREx_GetVoltageRange>
 800776a:	6178      	str	r0, [r7, #20]
 800776c:	e019      	b.n	80077a2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800776e:	4b39      	ldr	r3, [pc, #228]	@ (8007854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007774:	4a37      	ldr	r2, [pc, #220]	@ (8007854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007776:	f043 0304 	orr.w	r3, r3, #4
 800777a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800777e:	4b35      	ldr	r3, [pc, #212]	@ (8007854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800778c:	f7fe fd7c 	bl	8006288 <HAL_PWREx_GetVoltageRange>
 8007790:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007792:	4b30      	ldr	r3, [pc, #192]	@ (8007854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007798:	4a2e      	ldr	r2, [pc, #184]	@ (8007854 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800779a:	f023 0304 	bic.w	r3, r3, #4
 800779e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077a8:	d003      	beq.n	80077b2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077b0:	d109      	bne.n	80077c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077b8:	d202      	bcs.n	80077c0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80077ba:	2301      	movs	r3, #1
 80077bc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80077be:	e033      	b.n	8007828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80077c0:	2300      	movs	r3, #0
 80077c2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80077c4:	e030      	b.n	8007828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077cc:	d208      	bcs.n	80077e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d4:	d102      	bne.n	80077dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80077d6:	2303      	movs	r3, #3
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	e025      	b.n	8007828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e035      	b.n	800784c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077e6:	d90f      	bls.n	8007808 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077f4:	d902      	bls.n	80077fc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80077f6:	2300      	movs	r3, #0
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	e015      	b.n	8007828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80077fc:	2301      	movs	r3, #1
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	e012      	b.n	8007828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	e00f      	b.n	8007828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800780e:	d109      	bne.n	8007824 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007816:	d102      	bne.n	800781e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007818:	2301      	movs	r3, #1
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	e004      	b.n	8007828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800781e:	2302      	movs	r3, #2
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e001      	b.n	8007828 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007824:	2301      	movs	r3, #1
 8007826:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007828:	4b0b      	ldr	r3, [pc, #44]	@ (8007858 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f023 020f 	bic.w	r2, r3, #15
 8007830:	4909      	ldr	r1, [pc, #36]	@ (8007858 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007838:	4b07      	ldr	r3, [pc, #28]	@ (8007858 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	429a      	cmp	r2, r3
 8007844:	d001      	beq.n	800784a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	46020c00 	.word	0x46020c00
 8007858:	40022000 	.word	0x40022000

0800785c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800785c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007860:	b0ba      	sub	sp, #232	@ 0xe8
 8007862:	af00      	add	r7, sp, #0
 8007864:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007868:	2300      	movs	r3, #0
 800786a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800786e:	2300      	movs	r3, #0
 8007870:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f002 0401 	and.w	r4, r2, #1
 8007880:	2500      	movs	r5, #0
 8007882:	ea54 0305 	orrs.w	r3, r4, r5
 8007886:	d00b      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007888:	4bcb      	ldr	r3, [pc, #812]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800788a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800788e:	f023 0103 	bic.w	r1, r3, #3
 8007892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007898:	4ac7      	ldr	r2, [pc, #796]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800789a:	430b      	orrs	r3, r1
 800789c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f002 0802 	and.w	r8, r2, #2
 80078ac:	f04f 0900 	mov.w	r9, #0
 80078b0:	ea58 0309 	orrs.w	r3, r8, r9
 80078b4:	d00b      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80078b6:	4bc0      	ldr	r3, [pc, #768]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078bc:	f023 010c 	bic.w	r1, r3, #12
 80078c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c6:	4abc      	ldr	r2, [pc, #752]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078c8:	430b      	orrs	r3, r1
 80078ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f002 0a04 	and.w	sl, r2, #4
 80078da:	f04f 0b00 	mov.w	fp, #0
 80078de:	ea5a 030b 	orrs.w	r3, sl, fp
 80078e2:	d00b      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80078e4:	4bb4      	ldr	r3, [pc, #720]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078ea:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80078ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f4:	4ab0      	ldr	r2, [pc, #704]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078f6:	430b      	orrs	r3, r1
 80078f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f002 0308 	and.w	r3, r2, #8
 8007908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800790c:	2300      	movs	r3, #0
 800790e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007912:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007916:	460b      	mov	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	d00b      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800791c:	4ba6      	ldr	r3, [pc, #664]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800791e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007922:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800792a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800792c:	4aa2      	ldr	r2, [pc, #648]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800792e:	430b      	orrs	r3, r1
 8007930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f002 0310 	and.w	r3, r2, #16
 8007940:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007944:	2300      	movs	r3, #0
 8007946:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800794a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800794e:	460b      	mov	r3, r1
 8007950:	4313      	orrs	r3, r2
 8007952:	d00b      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007954:	4b98      	ldr	r3, [pc, #608]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800795a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800795e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007964:	4a94      	ldr	r2, [pc, #592]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007966:	430b      	orrs	r3, r1
 8007968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800796c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f002 0320 	and.w	r3, r2, #32
 8007978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800797c:	2300      	movs	r3, #0
 800797e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007982:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007986:	460b      	mov	r3, r1
 8007988:	4313      	orrs	r3, r2
 800798a:	d00b      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800798c:	4b8a      	ldr	r3, [pc, #552]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800798e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007992:	f023 0107 	bic.w	r1, r3, #7
 8007996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800799a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800799c:	4a86      	ldr	r2, [pc, #536]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800799e:	430b      	orrs	r3, r1
 80079a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80079b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80079be:	460b      	mov	r3, r1
 80079c0:	4313      	orrs	r3, r2
 80079c2:	d00b      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80079c4:	4b7c      	ldr	r3, [pc, #496]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079ca:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80079ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079d4:	4a78      	ldr	r2, [pc, #480]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079d6:	430b      	orrs	r3, r1
 80079d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80079e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079ec:	2300      	movs	r3, #0
 80079ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079f6:	460b      	mov	r3, r1
 80079f8:	4313      	orrs	r3, r2
 80079fa:	d00b      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80079fc:	4b6e      	ldr	r3, [pc, #440]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a0c:	4a6a      	ldr	r2, [pc, #424]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007a20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a2a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4313      	orrs	r3, r2
 8007a32:	d00b      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007a34:	4b60      	ldr	r3, [pc, #384]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a44:	4a5c      	ldr	r2, [pc, #368]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a46:	430b      	orrs	r3, r1
 8007a48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a66:	460b      	mov	r3, r1
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	d00b      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007a6c:	4b52      	ldr	r3, [pc, #328]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a72:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a94:	2300      	movs	r3, #0
 8007a96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	d00b      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007aa4:	4b44      	ldr	r3, [pc, #272]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aaa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ab4:	4a40      	ldr	r2, [pc, #256]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007acc:	2300      	movs	r3, #0
 8007ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ad2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d00b      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007adc:	4b36      	ldr	r3, [pc, #216]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ae2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aec:	4a32      	ldr	r2, [pc, #200]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aee:	430b      	orrs	r3, r1
 8007af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b04:	2300      	movs	r3, #0
 8007b06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4313      	orrs	r3, r2
 8007b12:	d00c      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007b14:	4b28      	ldr	r3, [pc, #160]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b26:	4a24      	ldr	r2, [pc, #144]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007b44:	460b      	mov	r3, r1
 8007b46:	4313      	orrs	r3, r2
 8007b48:	d04f      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b52:	2b80      	cmp	r3, #128	@ 0x80
 8007b54:	d02d      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007b56:	2b80      	cmp	r3, #128	@ 0x80
 8007b58:	d827      	bhi.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b5a:	2b60      	cmp	r3, #96	@ 0x60
 8007b5c:	d02e      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b5e:	2b60      	cmp	r3, #96	@ 0x60
 8007b60:	d823      	bhi.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b62:	2b40      	cmp	r3, #64	@ 0x40
 8007b64:	d006      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007b66:	2b40      	cmp	r3, #64	@ 0x40
 8007b68:	d81f      	bhi.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d009      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d011      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007b72:	e01a      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b74:	4b10      	ldr	r3, [pc, #64]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b78:	4a0f      	ldr	r2, [pc, #60]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b7e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007b80:	e01d      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b86:	3308      	adds	r3, #8
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f002 fa17 	bl	8009fbc <RCCEx_PLL2_Config>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007b94:	e013      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b9a:	332c      	adds	r3, #44	@ 0x2c
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f002 faa5 	bl	800a0ec <RCCEx_PLL3_Config>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007ba8:	e009      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007bb0:	e005      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8007bb2:	bf00      	nop
 8007bb4:	e003      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007bb6:	bf00      	nop
 8007bb8:	46020c00 	.word	0x46020c00
        break;
 8007bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10d      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007bc6:	4bb6      	ldr	r3, [pc, #728]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007bc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bcc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007bd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd8:	4ab1      	ldr	r2, [pc, #708]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007be0:	e003      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007be6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007bf6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	677b      	str	r3, [r7, #116]	@ 0x74
 8007bfc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007c00:	460b      	mov	r3, r1
 8007c02:	4313      	orrs	r3, r2
 8007c04:	d053      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c12:	d033      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c18:	d82c      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007c1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c1e:	d02f      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c24:	d826      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c2a:	d008      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c30:	d820      	bhi.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8007c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c3a:	d011      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007c3c:	e01a      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c3e:	4b98      	ldr	r3, [pc, #608]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	4a97      	ldr	r2, [pc, #604]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007c4a:	e01a      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c50:	3308      	adds	r3, #8
 8007c52:	4618      	mov	r0, r3
 8007c54:	f002 f9b2 	bl	8009fbc <RCCEx_PLL2_Config>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007c5e:	e010      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c64:	332c      	adds	r3, #44	@ 0x2c
 8007c66:	4618      	mov	r0, r3
 8007c68:	f002 fa40 	bl	800a0ec <RCCEx_PLL3_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007c72:	e006      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c7a:	e002      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007c7c:	bf00      	nop
 8007c7e:	e000      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007c8a:	4b85      	ldr	r3, [pc, #532]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c90:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c9c:	4a80      	ldr	r2, [pc, #512]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007ca4:	e003      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007caa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007cba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cc0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d046      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007cd2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007cd6:	d028      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007cd8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007cdc:	d821      	bhi.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007cde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ce2:	d022      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ce8:	d81b      	bhi.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007cea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cee:	d01c      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007cf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cf4:	d815      	bhi.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cfa:	d008      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d00:	d80f      	bhi.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d011      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d0a:	d00e      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007d0c:	e009      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d12:	3308      	adds	r3, #8
 8007d14:	4618      	mov	r0, r3
 8007d16:	f002 f951 	bl	8009fbc <RCCEx_PLL2_Config>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d20:	e004      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d28:	e000      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8007d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10d      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007d34:	4b5a      	ldr	r3, [pc, #360]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d3a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d46:	4a56      	ldr	r2, [pc, #344]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007d4e:	e003      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007d58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007d64:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d66:	2300      	movs	r3, #0
 8007d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d6a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4313      	orrs	r3, r2
 8007d72:	d03f      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007d74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d81e      	bhi.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007d80:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007dc7 	.word	0x08007dc7
 8007d8c:	08007d9d 	.word	0x08007d9d
 8007d90:	08007dab 	.word	0x08007dab
 8007d94:	08007dc7 	.word	0x08007dc7
 8007d98:	08007dc7 	.word	0x08007dc7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d9c:	4b40      	ldr	r3, [pc, #256]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	4a3f      	ldr	r2, [pc, #252]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007da6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007da8:	e00e      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dae:	332c      	adds	r3, #44	@ 0x2c
 8007db0:	4618      	mov	r0, r3
 8007db2:	f002 f99b 	bl	800a0ec <RCCEx_PLL3_Config>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007dbc:	e004      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007dc4:	e000      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8007dc6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007dc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10d      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007dd0:	4b33      	ldr	r3, [pc, #204]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007dd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dd6:	f023 0107 	bic.w	r1, r3, #7
 8007dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de2:	4a2f      	ldr	r2, [pc, #188]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007dea:	e003      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007df0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e02:	2300      	movs	r3, #0
 8007e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	d04d      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e1c:	d028      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007e1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e22:	d821      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007e24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e28:	d024      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007e2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e2e:	d81b      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007e30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e34:	d00e      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8007e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e3a:	d815      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01b      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e44:	d110      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e46:	4b16      	ldr	r3, [pc, #88]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e50:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007e52:	e012      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e58:	332c      	adds	r3, #44	@ 0x2c
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f002 f946 	bl	800a0ec <RCCEx_PLL3_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e66:	e008      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e6e:	e004      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007e70:	bf00      	nop
 8007e72:	e002      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007e78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007e7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d110      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007e82:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e94:	4a02      	ldr	r2, [pc, #8]	@ (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007e96:	430b      	orrs	r3, r1
 8007e98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e9c:	e006      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007e9e:	bf00      	nop
 8007ea0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ea8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007eb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007eba:	2300      	movs	r3, #0
 8007ebc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ebe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f000 80b5 	beq.w	8008034 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ed0:	4b9d      	ldr	r3, [pc, #628]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ed6:	f003 0304 	and.w	r3, r3, #4
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d113      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ede:	4b9a      	ldr	r3, [pc, #616]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ee4:	4a98      	ldr	r2, [pc, #608]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ee6:	f043 0304 	orr.w	r3, r3, #4
 8007eea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007eee:	4b96      	ldr	r3, [pc, #600]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007f06:	4b91      	ldr	r3, [pc, #580]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	4a90      	ldr	r2, [pc, #576]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f12:	f7fa fe89 	bl	8002c28 <HAL_GetTick>
 8007f16:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007f1a:	e00b      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f1c:	f7fa fe84 	bl	8002c28 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d903      	bls.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f32:	e005      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007f34:	4b85      	ldr	r3, [pc, #532]	@ (800814c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0ed      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8007f40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d165      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f48:	4b7f      	ldr	r3, [pc, #508]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d023      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8007f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01b      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f6e:	4b76      	ldr	r3, [pc, #472]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f7c:	4b72      	ldr	r3, [pc, #456]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f82:	4a71      	ldr	r2, [pc, #452]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f92:	4a6d      	ldr	r2, [pc, #436]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f9c:	4a6a      	ldr	r2, [pc, #424]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d019      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb2:	f7fa fe39 	bl	8002c28 <HAL_GetTick>
 8007fb6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fba:	e00d      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fbc:	f7fa fe34 	bl	8002c28 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fc6:	1ad2      	subs	r2, r2, r3
 8007fc8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d903      	bls.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007fd6:	e006      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0ea      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8007fe6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10d      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007fee:	4b56      	ldr	r3, [pc, #344]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ff4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ffc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008000:	4a51      	ldr	r2, [pc, #324]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008002:	430b      	orrs	r3, r1
 8008004:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008008:	e008      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800800a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800800e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8008012:	e003      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008014:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008018:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800801c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8008020:	2b01      	cmp	r3, #1
 8008022:	d107      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008024:	4b48      	ldr	r3, [pc, #288]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800802a:	4a47      	ldr	r2, [pc, #284]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800802c:	f023 0304 	bic.w	r3, r3, #4
 8008030:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008042:	2300      	movs	r3, #0
 8008044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008046:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800804a:	460b      	mov	r3, r1
 800804c:	4313      	orrs	r3, r2
 800804e:	d042      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008054:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008058:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800805c:	d022      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800805e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008062:	d81b      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008068:	d011      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800806a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800806e:	d815      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d019      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8008074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008078:	d110      	bne.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800807a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800807e:	3308      	adds	r3, #8
 8008080:	4618      	mov	r0, r3
 8008082:	f001 ff9b 	bl	8009fbc <RCCEx_PLL2_Config>
 8008086:	4603      	mov	r3, r0
 8008088:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800808c:	e00d      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800808e:	4b2e      	ldr	r3, [pc, #184]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008092:	4a2d      	ldr	r2, [pc, #180]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008098:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800809a:	e006      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80080a2:	e002      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80080a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80080aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10d      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80080b2:	4b25      	ldr	r3, [pc, #148]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080b8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80080bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080c4:	4a20      	ldr	r2, [pc, #128]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080c6:	430b      	orrs	r3, r1
 80080c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80080cc:	e003      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80080d2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80080e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80080e4:	2300      	movs	r3, #0
 80080e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80080e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80080ec:	460b      	mov	r3, r1
 80080ee:	4313      	orrs	r3, r2
 80080f0:	d032      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80080f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080fe:	d00b      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008104:	d804      	bhi.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800810a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800810e:	d007      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008116:	e004      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008118:	bf00      	nop
 800811a:	e002      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800811c:	bf00      	nop
 800811e:	e000      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008120:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008122:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d112      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800812a:	4b07      	ldr	r3, [pc, #28]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800812c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008130:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008138:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800813c:	4a02      	ldr	r2, [pc, #8]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800813e:	430b      	orrs	r3, r1
 8008140:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008144:	e008      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8008146:	bf00      	nop
 8008148:	46020c00 	.word	0x46020c00
 800814c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008154:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008164:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008166:	2300      	movs	r3, #0
 8008168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800816a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800816e:	460b      	mov	r3, r1
 8008170:	4313      	orrs	r3, r2
 8008172:	d00c      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008174:	4b98      	ldr	r3, [pc, #608]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008176:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800817a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800817e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008182:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008186:	4a94      	ldr	r2, [pc, #592]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008188:	430b      	orrs	r3, r1
 800818a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800818e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800819a:	633b      	str	r3, [r7, #48]	@ 0x30
 800819c:	2300      	movs	r3, #0
 800819e:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80081a4:	460b      	mov	r3, r1
 80081a6:	4313      	orrs	r3, r2
 80081a8:	d019      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80081aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081b6:	d105      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081b8:	4b87      	ldr	r3, [pc, #540]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081bc:	4a86      	ldr	r2, [pc, #536]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081c2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80081c4:	4b84      	ldr	r3, [pc, #528]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081ca:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80081ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081d6:	4a80      	ldr	r2, [pc, #512]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081d8:	430b      	orrs	r3, r1
 80081da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80081de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80081ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081ec:	2300      	movs	r3, #0
 80081ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80081f4:	460b      	mov	r3, r1
 80081f6:	4313      	orrs	r3, r2
 80081f8:	d00c      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80081fa:	4b77      	ldr	r3, [pc, #476]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008200:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800820c:	4972      	ldr	r1, [pc, #456]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008220:	623b      	str	r3, [r7, #32]
 8008222:	2300      	movs	r3, #0
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
 8008226:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800822a:	460b      	mov	r3, r1
 800822c:	4313      	orrs	r3, r2
 800822e:	d00c      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008230:	4b69      	ldr	r3, [pc, #420]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008236:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800823a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800823e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008242:	4965      	ldr	r1, [pc, #404]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008244:	4313      	orrs	r3, r2
 8008246:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800824a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	2300      	movs	r3, #0
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008260:	460b      	mov	r3, r1
 8008262:	4313      	orrs	r3, r2
 8008264:	d00c      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008266:	4b5c      	ldr	r3, [pc, #368]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800826c:	f023 0218 	bic.w	r2, r3, #24
 8008270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008274:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008278:	4957      	ldr	r1, [pc, #348]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800827a:	4313      	orrs	r3, r2
 800827c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800828c:	613b      	str	r3, [r7, #16]
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008296:	460b      	mov	r3, r1
 8008298:	4313      	orrs	r3, r2
 800829a:	d032      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800829c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082a8:	d105      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082aa:	4b4b      	ldr	r3, [pc, #300]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ae:	4a4a      	ldr	r2, [pc, #296]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082b4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80082b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082c2:	d108      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082c8:	3308      	adds	r3, #8
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 fe76 	bl	8009fbc <RCCEx_PLL2_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80082d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10d      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80082de:	4b3e      	ldr	r3, [pc, #248]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082f0:	4939      	ldr	r1, [pc, #228]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80082f8:	e003      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80082fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800830e:	60bb      	str	r3, [r7, #8]
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008318:	460b      	mov	r3, r1
 800831a:	4313      	orrs	r3, r2
 800831c:	d03a      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800831e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800832a:	d00e      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800832c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008330:	d815      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d017      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800833a:	d110      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800833c:	4b26      	ldr	r3, [pc, #152]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800833e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008340:	4a25      	ldr	r2, [pc, #148]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008346:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008348:	e00e      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800834a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800834e:	3308      	adds	r3, #8
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fe33 	bl	8009fbc <RCCEx_PLL2_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800835c:	e004      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008364:	e000      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8008366:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008368:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10d      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008370:	4b19      	ldr	r3, [pc, #100]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008376:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800837a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800837e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008382:	4915      	ldr	r1, [pc, #84]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008384:	4313      	orrs	r3, r2
 8008386:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800838a:	e003      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008390:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008394:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80083a0:	603b      	str	r3, [r7, #0]
 80083a2:	2300      	movs	r3, #0
 80083a4:	607b      	str	r3, [r7, #4]
 80083a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80083aa:	460b      	mov	r3, r1
 80083ac:	4313      	orrs	r3, r2
 80083ae:	d00c      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80083b0:	4b09      	ldr	r3, [pc, #36]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80083ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80083c2:	4905      	ldr	r1, [pc, #20]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80083ca:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	37e8      	adds	r7, #232	@ 0xe8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083d8:	46020c00 	.word	0x46020c00

080083dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80083dc:	b480      	push	{r7}
 80083de:	b089      	sub	sp, #36	@ 0x24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80083e4:	4ba6      	ldr	r3, [pc, #664]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ec:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80083ee:	4ba4      	ldr	r3, [pc, #656]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80083f8:	4ba1      	ldr	r3, [pc, #644]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fc:	0a1b      	lsrs	r3, r3, #8
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	3301      	adds	r3, #1
 8008404:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008406:	4b9e      	ldr	r3, [pc, #632]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840a:	091b      	lsrs	r3, r3, #4
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008412:	4b9b      	ldr	r3, [pc, #620]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008416:	08db      	lsrs	r3, r3, #3
 8008418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b03      	cmp	r3, #3
 8008432:	d062      	beq.n	80084fa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b03      	cmp	r3, #3
 8008438:	f200 8081 	bhi.w	800853e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d024      	beq.n	800848c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d17a      	bne.n	800853e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008452:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008684 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800845a:	4b89      	ldr	r3, [pc, #548]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800845c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800846a:	ed97 6a02 	vldr	s12, [r7, #8]
 800846e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008472:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008476:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800847a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800847e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800848a:	e08f      	b.n	80085ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800848c:	4b7c      	ldr	r3, [pc, #496]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008498:	4b79      	ldr	r3, [pc, #484]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	0f1b      	lsrs	r3, r3, #28
 800849e:	f003 030f 	and.w	r3, r3, #15
 80084a2:	e006      	b.n	80084b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80084a4:	4b76      	ldr	r3, [pc, #472]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80084a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084aa:	041b      	lsls	r3, r3, #16
 80084ac:	0f1b      	lsrs	r3, r3, #28
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	4a76      	ldr	r2, [pc, #472]	@ (800868c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80084b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80084dc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80084e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80084f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084f8:	e058      	b.n	80085ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008504:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008684 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850c:	4b5c      	ldr	r3, [pc, #368]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800850e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008514:	ee07 3a90 	vmov	s15, r3
 8008518:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800851c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008520:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008524:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008528:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800852c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008530:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008538:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800853c:	e036      	b.n	80085ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800853e:	4b50      	ldr	r3, [pc, #320]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d005      	beq.n	8008556 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800854a:	4b4d      	ldr	r3, [pc, #308]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	0f1b      	lsrs	r3, r3, #28
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	e006      	b.n	8008564 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008556:	4b4a      	ldr	r3, [pc, #296]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800855c:	041b      	lsls	r3, r3, #16
 800855e:	0f1b      	lsrs	r3, r3, #28
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	4a49      	ldr	r2, [pc, #292]	@ (800868c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858a:	ed97 6a02 	vldr	s12, [r7, #8]
 800858e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008688 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800859e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80085a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085aa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80085ac:	4b34      	ldr	r3, [pc, #208]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d017      	beq.n	80085e8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085b8:	4b31      	ldr	r3, [pc, #196]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085bc:	0a5b      	lsrs	r3, r3, #9
 80085be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80085ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085ce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80085d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085de:	ee17 2a90 	vmov	r2, s15
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e002      	b.n	80085ee <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80085ee:	4b24      	ldr	r3, [pc, #144]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d017      	beq.n	800862a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085fa:	4b21      	ldr	r3, [pc, #132]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80085fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fe:	0c1b      	lsrs	r3, r3, #16
 8008600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800860c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008610:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008614:	edd7 6a07 	vldr	s13, [r7, #28]
 8008618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008620:	ee17 2a90 	vmov	r2, s15
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	605a      	str	r2, [r3, #4]
 8008628:	e002      	b.n	8008630 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008630:	4b13      	ldr	r3, [pc, #76]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d017      	beq.n	800866c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800863c:	4b10      	ldr	r3, [pc, #64]	@ (8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800863e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008640:	0e1b      	lsrs	r3, r3, #24
 8008642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800864e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008652:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008656:	edd7 6a07 	vldr	s13, [r7, #28]
 800865a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008662:	ee17 2a90 	vmov	r2, s15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800866a:	e002      	b.n	8008672 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	609a      	str	r2, [r3, #8]
}
 8008672:	bf00      	nop
 8008674:	3724      	adds	r7, #36	@ 0x24
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	46020c00 	.word	0x46020c00
 8008684:	4b742400 	.word	0x4b742400
 8008688:	46000000 	.word	0x46000000
 800868c:	0800d188 	.word	0x0800d188

08008690 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008690:	b480      	push	{r7}
 8008692:	b089      	sub	sp, #36	@ 0x24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008698:	4ba6      	ldr	r3, [pc, #664]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800869a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80086a2:	4ba4      	ldr	r3, [pc, #656]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80086ac:	4ba1      	ldr	r3, [pc, #644]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b0:	0a1b      	lsrs	r3, r3, #8
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	3301      	adds	r3, #1
 80086b8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80086ba:	4b9e      	ldr	r3, [pc, #632]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086be:	091b      	lsrs	r3, r3, #4
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80086c6:	4b9b      	ldr	r3, [pc, #620]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ca:	08db      	lsrs	r3, r3, #3
 80086cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d062      	beq.n	80087ae <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	f200 8081 	bhi.w	80087f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d024      	beq.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d17a      	bne.n	80087f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008706:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800870a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870e:	4b89      	ldr	r3, [pc, #548]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800871e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008722:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800893c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008726:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800872a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800872e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008732:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800873e:	e08f      	b.n	8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008740:	4b7c      	ldr	r3, [pc, #496]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800874c:	4b79      	ldr	r3, [pc, #484]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	0f1b      	lsrs	r3, r3, #28
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	e006      	b.n	8008766 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008758:	4b76      	ldr	r3, [pc, #472]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800875a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	0f1b      	lsrs	r3, r3, #28
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	4a76      	ldr	r2, [pc, #472]	@ (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800876c:	ee07 3a90 	vmov	s15, r3
 8008770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008790:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800893c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800879c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80087a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087ac:	e058      	b.n	8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80087bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c0:	4b5c      	ldr	r3, [pc, #368]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80087d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80087d4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800893c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80087d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80087dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80087e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80087e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087f0:	e036      	b.n	8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80087f2:	4b50      	ldr	r3, [pc, #320]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80087fe:	4b4d      	ldr	r3, [pc, #308]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	0f1b      	lsrs	r3, r3, #28
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	e006      	b.n	8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800880a:	4b4a      	ldr	r3, [pc, #296]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800880c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	0f1b      	lsrs	r3, r3, #28
 8008814:	f003 030f 	and.w	r3, r3, #15
 8008818:	4a49      	ldr	r2, [pc, #292]	@ (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800881a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881e:	ee07 3a90 	vmov	s15, r3
 8008822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008842:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800893c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800884a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008852:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800885e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008860:	4b34      	ldr	r3, [pc, #208]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d017      	beq.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800886c:	4b31      	ldr	r3, [pc, #196]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800886e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008870:	0a5b      	lsrs	r3, r3, #9
 8008872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800887e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008882:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008886:	edd7 6a07 	vldr	s13, [r7, #28]
 800888a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800888e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008892:	ee17 2a90 	vmov	r2, s15
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	e002      	b.n	80088a2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80088a2:	4b24      	ldr	r3, [pc, #144]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d017      	beq.n	80088de <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80088ae:	4b21      	ldr	r3, [pc, #132]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80088b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b2:	0c1b      	lsrs	r3, r3, #16
 80088b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80088c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80088c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d4:	ee17 2a90 	vmov	r2, s15
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	605a      	str	r2, [r3, #4]
 80088dc:	e002      	b.n	80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80088e4:	4b13      	ldr	r3, [pc, #76]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d017      	beq.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80088f0:	4b10      	ldr	r3, [pc, #64]	@ (8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80088f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f4:	0e1b      	lsrs	r3, r3, #24
 80088f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008902:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008906:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800890a:	edd7 6a07 	vldr	s13, [r7, #28]
 800890e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008916:	ee17 2a90 	vmov	r2, s15
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800891e:	e002      	b.n	8008926 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	609a      	str	r2, [r3, #8]
}
 8008926:	bf00      	nop
 8008928:	3724      	adds	r7, #36	@ 0x24
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	46020c00 	.word	0x46020c00
 8008938:	4b742400 	.word	0x4b742400
 800893c:	46000000 	.word	0x46000000
 8008940:	0800d188 	.word	0x0800d188

08008944 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	@ 0x24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800894c:	4ba6      	ldr	r3, [pc, #664]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800894e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008954:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008956:	4ba4      	ldr	r3, [pc, #656]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008960:	4ba1      	ldr	r3, [pc, #644]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008964:	0a1b      	lsrs	r3, r3, #8
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	3301      	adds	r3, #1
 800896c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800896e:	4b9e      	ldr	r3, [pc, #632]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800897a:	4b9b      	ldr	r3, [pc, #620]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800897c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800897e:	08db      	lsrs	r3, r3, #3
 8008980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b03      	cmp	r3, #3
 800899a:	d062      	beq.n	8008a62 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2b03      	cmp	r3, #3
 80089a0:	f200 8081 	bhi.w	8008aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d024      	beq.n	80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d17a      	bne.n	8008aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	4b89      	ldr	r3, [pc, #548]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80089c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80089d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089d6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ee:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80089f2:	e08f      	b.n	8008b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80089f4:	4b7c      	ldr	r3, [pc, #496]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008a00:	4b79      	ldr	r3, [pc, #484]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	0f1b      	lsrs	r3, r3, #28
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	e006      	b.n	8008a1a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008a0c:	4b76      	ldr	r3, [pc, #472]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a12:	041b      	lsls	r3, r3, #16
 8008a14:	0f1b      	lsrs	r3, r3, #28
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	4a76      	ldr	r2, [pc, #472]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a20:	ee07 3a90 	vmov	s15, r3
 8008a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a40:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a44:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a60:	e058      	b.n	8008b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	ee07 3a90 	vmov	s15, r3
 8008a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a74:	4b5c      	ldr	r3, [pc, #368]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a84:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a88:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aa4:	e036      	b.n	8008b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008aa6:	4b50      	ldr	r3, [pc, #320]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	0f1b      	lsrs	r3, r3, #28
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	e006      	b.n	8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008abe:	4b4a      	ldr	r3, [pc, #296]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ac4:	041b      	lsls	r3, r3, #16
 8008ac6:	0f1b      	lsrs	r3, r3, #28
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	4a49      	ldr	r2, [pc, #292]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	ee07 3a90 	vmov	s15, r3
 8008ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008af6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b12:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008b14:	4b34      	ldr	r3, [pc, #208]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d017      	beq.n	8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b20:	4b31      	ldr	r3, [pc, #196]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b24:	0a5b      	lsrs	r3, r3, #9
 8008b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008b32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b36:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b46:	ee17 2a90 	vmov	r2, s15
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e002      	b.n	8008b56 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008b56:	4b24      	ldr	r3, [pc, #144]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d017      	beq.n	8008b92 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b62:	4b21      	ldr	r3, [pc, #132]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b6c:	ee07 3a90 	vmov	s15, r3
 8008b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b78:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b88:	ee17 2a90 	vmov	r2, s15
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	605a      	str	r2, [r3, #4]
 8008b90:	e002      	b.n	8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008b98:	4b13      	ldr	r3, [pc, #76]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d017      	beq.n	8008bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ba4:	4b10      	ldr	r3, [pc, #64]	@ (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba8:	0e1b      	lsrs	r3, r3, #24
 8008baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008bb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bca:	ee17 2a90 	vmov	r2, s15
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008bd2:	e002      	b.n	8008bda <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	609a      	str	r2, [r3, #8]
}
 8008bda:	bf00      	nop
 8008bdc:	3724      	adds	r7, #36	@ 0x24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	46020c00 	.word	0x46020c00
 8008bec:	4b742400 	.word	0x4b742400
 8008bf0:	46000000 	.word	0x46000000
 8008bf4:	0800d188 	.word	0x0800d188

08008bf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	@ 0x38
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c06:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	d145      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008c0e:	4ba7      	ldr	r3, [pc, #668]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c18:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008c1a:	4ba4      	ldr	r3, [pc, #656]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d108      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c2e:	d104      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008c30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c36:	f001 b9b3 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008c3a:	4b9c      	ldr	r3, [pc, #624]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c48:	d114      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c50:	d110      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c52:	4b96      	ldr	r3, [pc, #600]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c60:	d103      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008c62:	23fa      	movs	r3, #250	@ 0xfa
 8008c64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c66:	f001 b99b 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008c6a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c6e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c70:	f001 b996 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008c74:	4b8d      	ldr	r3, [pc, #564]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c80:	d107      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c88:	d103      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008c8a:	4b89      	ldr	r3, [pc, #548]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c8e:	f001 b987 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c96:	f001 b983 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c9e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	d151      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008ca6:	4b81      	ldr	r3, [pc, #516]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cac:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008cb0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb4:	2b80      	cmp	r3, #128	@ 0x80
 8008cb6:	d035      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	2b80      	cmp	r3, #128	@ 0x80
 8008cbc:	d841      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	2b60      	cmp	r3, #96	@ 0x60
 8008cc2:	d02a      	beq.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc6:	2b60      	cmp	r3, #96	@ 0x60
 8008cc8:	d83b      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ccc:	2b40      	cmp	r3, #64	@ 0x40
 8008cce:	d009      	beq.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd2:	2b40      	cmp	r3, #64	@ 0x40
 8008cd4:	d835      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00c      	beq.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	2b20      	cmp	r3, #32
 8008ce0:	d012      	beq.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008ce2:	e02e      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff fb77 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cf2:	f001 b955 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf6:	f107 0318 	add.w	r3, r7, #24
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fcc8 	bl	8008690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d04:	f001 b94c 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d08:	f107 030c 	add.w	r3, r7, #12
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff fe19 	bl	8008944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d16:	f001 b943 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008d1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008d1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d20:	f001 b93e 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d24:	4b61      	ldr	r3, [pc, #388]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d30:	d103      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008d32:	4b60      	ldr	r3, [pc, #384]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008d34:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d36:	f001 b933 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d3e:	f001 b92f 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d46:	f001 b92b 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d4e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008d52:	430b      	orrs	r3, r1
 8008d54:	d158      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008d56:	4b55      	ldr	r3, [pc, #340]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d68:	d03b      	beq.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d70:	d846      	bhi.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d78:	d02e      	beq.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d80:	d83e      	bhi.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d88:	d00b      	beq.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d90:	d836      	bhi.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00d      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d9e:	d012      	beq.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008da0:	e02e      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fb18 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008db0:	f001 b8f6 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db4:	f107 0318 	add.w	r3, r7, #24
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff fc69 	bl	8008690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dc2:	f001 b8ed 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dc6:	f107 030c 	add.w	r3, r7, #12
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fdba 	bl	8008944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dd4:	f001 b8e4 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008dd8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dde:	f001 b8df 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008de2:	4b32      	ldr	r3, [pc, #200]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dee:	d103      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008df0:	4b30      	ldr	r3, [pc, #192]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008df4:	f001 b8d4 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dfc:	f001 b8d0 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e04:	f001 b8cc 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e0c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008e10:	430b      	orrs	r3, r1
 8008e12:	d126      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008e14:	4b25      	ldr	r3, [pc, #148]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008e20:	4b22      	ldr	r3, [pc, #136]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e2c:	d106      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008e34:	4b1f      	ldr	r3, [pc, #124]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e38:	f001 b8b2 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e48:	d107      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e50:	d103      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008e52:	4b19      	ldr	r3, [pc, #100]	@ (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e56:	f001 b8a3 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e5e:	f001 b89f 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e66:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008e6a:	430b      	orrs	r3, r1
 8008e6c:	d16e      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e74:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008e78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008e80:	d03d      	beq.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e84:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008e88:	d85c      	bhi.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e90:	d014      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e98:	d854      	bhi.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01f      	beq.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ea6:	d012      	beq.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008ea8:	e04c      	b.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008eaa:	bf00      	nop
 8008eac:	46020c00 	.word	0x46020c00
 8008eb0:	0007a120 	.word	0x0007a120
 8008eb4:	00f42400 	.word	0x00f42400
 8008eb8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7ff fa8b 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eca:	f001 b869 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ece:	f107 0318 	add.w	r3, r7, #24
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff fbdc 	bl	8008690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008edc:	f001 b860 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008ee0:	4ba7      	ldr	r3, [pc, #668]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eec:	d103      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008eee:	4ba5      	ldr	r3, [pc, #660]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ef0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ef2:	f001 b855 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008efa:	f001 b851 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008efe:	4ba0      	ldr	r3, [pc, #640]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d118      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f0a:	4b9d      	ldr	r3, [pc, #628]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008f16:	4b9a      	ldr	r3, [pc, #616]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	0e1b      	lsrs	r3, r3, #24
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	e006      	b.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008f22:	4b97      	ldr	r3, [pc, #604]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	0e1b      	lsrs	r3, r3, #24
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	4a95      	ldr	r2, [pc, #596]	@ (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f38:	f001 b832 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f40:	f001 b82e 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f48:	f001 b82a 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f50:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008f54:	430b      	orrs	r3, r1
 8008f56:	d17f      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008f58:	4b89      	ldr	r3, [pc, #548]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f62:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d165      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008f6a:	4b85      	ldr	r3, [pc, #532]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f70:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008f74:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f78:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008f7c:	d034      	beq.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008f84:	d853      	bhi.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f8c:	d00b      	beq.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f94:	d84b      	bhi.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d016      	beq.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fa2:	d009      	beq.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008fa4:	e043      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff fa16 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008fb4:	f000 bff4 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb8:	f107 0318 	add.w	r3, r7, #24
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7ff fb67 	bl	8008690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008fc6:	f000 bfeb 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008fca:	4b6d      	ldr	r3, [pc, #436]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd6:	d103      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008fdc:	f000 bfe0 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008fe4:	f000 bfdc 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008fe8:	4b65      	ldr	r3, [pc, #404]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d118      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008ff4:	4b62      	ldr	r3, [pc, #392]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8009000:	4b5f      	ldr	r3, [pc, #380]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	0e1b      	lsrs	r3, r3, #24
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	e006      	b.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800900c:	4b5c      	ldr	r3, [pc, #368]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800900e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009012:	041b      	lsls	r3, r3, #16
 8009014:	0e1b      	lsrs	r3, r3, #24
 8009016:	f003 030f 	and.w	r3, r3, #15
 800901a:	4a5b      	ldr	r2, [pc, #364]	@ (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800901c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009022:	f000 bfbd 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800902a:	f000 bfb9 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009032:	f000 bfb5 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800903c:	d108      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800903e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009042:	4618      	mov	r0, r3
 8009044:	f7ff f9ca 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904a:	637b      	str	r3, [r7, #52]	@ 0x34
 800904c:	f000 bfa8 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
 8009054:	f000 bfa4 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800905c:	1e51      	subs	r1, r2, #1
 800905e:	430b      	orrs	r3, r1
 8009060:	d136      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009062:	4b47      	ldr	r3, [pc, #284]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009068:	f003 0303 	and.w	r3, r3, #3
 800906c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009074:	f7fe fb44 	bl	8007700 <HAL_RCC_GetPCLK2Freq>
 8009078:	6378      	str	r0, [r7, #52]	@ 0x34
 800907a:	f000 bf91 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800907e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009080:	2b01      	cmp	r3, #1
 8009082:	d104      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009084:	f7fe fa0c 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009088:	6378      	str	r0, [r7, #52]	@ 0x34
 800908a:	f000 bf89 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800908e:	4b3c      	ldr	r3, [pc, #240]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800909a:	d106      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d103      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80090a2:	4b3a      	ldr	r3, [pc, #232]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a6:	f000 bf7b 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80090aa:	4b35      	ldr	r3, [pc, #212]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80090ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d107      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d104      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80090be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c4:	f000 bf6c 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80090cc:	f000 bf68 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80090d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d4:	1e91      	subs	r1, r2, #2
 80090d6:	430b      	orrs	r3, r1
 80090d8:	d136      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80090da:	4b29      	ldr	r3, [pc, #164]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80090dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090e0:	f003 030c 	and.w	r3, r3, #12
 80090e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d104      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80090ec:	f7fe faf4 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 80090f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80090f2:	f000 bf55 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80090f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d104      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090fc:	f7fe f9d0 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009100:	6378      	str	r0, [r7, #52]	@ 0x34
 8009102:	f000 bf4d 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009106:	4b1e      	ldr	r3, [pc, #120]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800910e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009112:	d106      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009116:	2b08      	cmp	r3, #8
 8009118:	d103      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800911a:	4b1c      	ldr	r3, [pc, #112]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34
 800911e:	f000 bf3f 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009122:	4b17      	ldr	r3, [pc, #92]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b02      	cmp	r3, #2
 800912e:	d107      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	2b0c      	cmp	r3, #12
 8009134:	d104      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8009136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
 800913c:	f000 bf30 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	637b      	str	r3, [r7, #52]	@ 0x34
 8009144:	f000 bf2c 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800914c:	1f11      	subs	r1, r2, #4
 800914e:	430b      	orrs	r3, r1
 8009150:	d13f      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009152:	4b0b      	ldr	r3, [pc, #44]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800915c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800915e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009164:	f7fe fab8 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 8009168:	6378      	str	r0, [r7, #52]	@ 0x34
 800916a:	f000 bf19 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800916e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009170:	2b10      	cmp	r3, #16
 8009172:	d10d      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009174:	f7fe f994 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009178:	6378      	str	r0, [r7, #52]	@ 0x34
 800917a:	f000 bf11 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800917e:	bf00      	nop
 8009180:	46020c00 	.word	0x46020c00
 8009184:	02dc6c00 	.word	0x02dc6c00
 8009188:	0800d188 	.word	0x0800d188
 800918c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009190:	4ba6      	ldr	r3, [pc, #664]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800919c:	d106      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d103      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80091a4:	4ba2      	ldr	r3, [pc, #648]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a8:	f000 befa 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80091ac:	4b9f      	ldr	r3, [pc, #636]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d107      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	2b30      	cmp	r3, #48	@ 0x30
 80091be:	d104      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80091c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c6:	f000 beeb 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ce:	f000 bee7 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80091d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d6:	f1a2 0108 	sub.w	r1, r2, #8
 80091da:	430b      	orrs	r3, r1
 80091dc:	d136      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80091de:	4b93      	ldr	r3, [pc, #588]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d104      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80091f0:	f7fe fa72 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 80091f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80091f6:	f000 bed3 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80091fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fc:	2b40      	cmp	r3, #64	@ 0x40
 80091fe:	d104      	bne.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009200:	f7fe f94e 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009204:	6378      	str	r0, [r7, #52]	@ 0x34
 8009206:	f000 becb 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800920a:	4b88      	ldr	r3, [pc, #544]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009216:	d106      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	2b80      	cmp	r3, #128	@ 0x80
 800921c:	d103      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800921e:	4b84      	ldr	r3, [pc, #528]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009220:	637b      	str	r3, [r7, #52]	@ 0x34
 8009222:	f000 bebd 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009226:	4b81      	ldr	r3, [pc, #516]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800922c:	f003 0302 	and.w	r3, r3, #2
 8009230:	2b02      	cmp	r3, #2
 8009232:	d107      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	2bc0      	cmp	r3, #192	@ 0xc0
 8009238:	d104      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800923a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009240:	f000 beae 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	637b      	str	r3, [r7, #52]	@ 0x34
 8009248:	f000 beaa 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800924c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009250:	f1a2 0110 	sub.w	r1, r2, #16
 8009254:	430b      	orrs	r3, r1
 8009256:	d139      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009258:	4b74      	ldr	r3, [pc, #464]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800925a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800925e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009262:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	2b00      	cmp	r3, #0
 8009268:	d104      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800926a:	f7fe fa35 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 800926e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009270:	f000 be96 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800927a:	d104      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800927c:	f7fe f910 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009280:	6378      	str	r0, [r7, #52]	@ 0x34
 8009282:	f000 be8d 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009286:	4b69      	ldr	r3, [pc, #420]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800928e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009292:	d107      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800929a:	d103      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800929c:	4b64      	ldr	r3, [pc, #400]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a0:	f000 be7e 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80092a4:	4b61      	ldr	r3, [pc, #388]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80092a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d108      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092b8:	d104      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80092ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c0:	f000 be6e 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c8:	f000 be6a 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80092cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d0:	f1a2 0120 	sub.w	r1, r2, #32
 80092d4:	430b      	orrs	r3, r1
 80092d6:	d158      	bne.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80092d8:	4b54      	ldr	r3, [pc, #336]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80092da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092de:	f003 0307 	and.w	r3, r3, #7
 80092e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80092e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d104      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80092ea:	f7fe fa1d 	bl	8007728 <HAL_RCC_GetPCLK3Freq>
 80092ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80092f0:	f000 be56 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d104      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80092fa:	f7fe f8d1 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 80092fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8009300:	f000 be4e 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009304:	4b49      	ldr	r3, [pc, #292]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800930c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009310:	d106      	bne.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009314:	2b02      	cmp	r3, #2
 8009316:	d103      	bne.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8009318:	4b45      	ldr	r3, [pc, #276]	@ (8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800931a:	637b      	str	r3, [r7, #52]	@ 0x34
 800931c:	f000 be40 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009320:	4b42      	ldr	r3, [pc, #264]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b02      	cmp	r3, #2
 800932c:	d107      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	2b03      	cmp	r3, #3
 8009332:	d104      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8009334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009338:	637b      	str	r3, [r7, #52]	@ 0x34
 800933a:	f000 be31 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800933e:	4b3b      	ldr	r3, [pc, #236]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b20      	cmp	r3, #32
 8009348:	d11b      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	2b04      	cmp	r3, #4
 800934e:	d118      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009350:	4b36      	ldr	r3, [pc, #216]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800935c:	4b33      	ldr	r3, [pc, #204]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	0e1b      	lsrs	r3, r3, #24
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	e006      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8009368:	4b30      	ldr	r3, [pc, #192]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800936a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800936e:	041b      	lsls	r3, r3, #16
 8009370:	0e1b      	lsrs	r3, r3, #24
 8009372:	f003 030f 	and.w	r3, r3, #15
 8009376:	4a2f      	ldr	r2, [pc, #188]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
 800937e:	f000 be0f 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	637b      	str	r3, [r7, #52]	@ 0x34
 8009386:	f000 be0b 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800938a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009392:	430b      	orrs	r3, r1
 8009394:	d172      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009396:	4b25      	ldr	r3, [pc, #148]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800939c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80093a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093a8:	d104      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093aa:	f7fe f879 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 80093ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80093b0:	f000 bdf6 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093ba:	d108      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093bc:	f107 0318 	add.w	r3, r7, #24
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff f965 	bl	8008690 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ca:	f000 bde9 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80093ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80093d4:	f7fe f966 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 80093d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80093da:	f000 bde1 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80093e4:	d128      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80093e6:	4b11      	ldr	r3, [pc, #68]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0320 	and.w	r3, r3, #32
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d118      	bne.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80093f2:	4b0e      	ldr	r3, [pc, #56]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80093fe:	4b0b      	ldr	r3, [pc, #44]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	0e1b      	lsrs	r3, r3, #24
 8009404:	f003 030f 	and.w	r3, r3, #15
 8009408:	e006      	b.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800940a:	4b08      	ldr	r3, [pc, #32]	@ (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800940c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009410:	041b      	lsls	r3, r3, #16
 8009412:	0e1b      	lsrs	r3, r3, #24
 8009414:	f003 030f 	and.w	r3, r3, #15
 8009418:	4a06      	ldr	r2, [pc, #24]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800941a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800941e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009420:	f000 bdbe 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	637b      	str	r3, [r7, #52]	@ 0x34
 8009428:	f000 bdba 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800942c:	46020c00 	.word	0x46020c00
 8009430:	00f42400 	.word	0x00f42400
 8009434:	0800d188 	.word	0x0800d188
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009438:	4baf      	ldr	r3, [pc, #700]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009444:	d107      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800944c:	d103      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800944e:	4bab      	ldr	r3, [pc, #684]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
 8009452:	f000 bda5 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009456:	4ba8      	ldr	r3, [pc, #672]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800945e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009462:	d107      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800946a:	d103      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800946c:	4ba3      	ldr	r3, [pc, #652]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800946e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009470:	f000 bd96 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	637b      	str	r3, [r7, #52]	@ 0x34
 8009478:	f000 bd92 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800947c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009480:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009484:	430b      	orrs	r3, r1
 8009486:	d158      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009488:	4b9b      	ldr	r3, [pc, #620]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800948a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800948e:	f003 0307 	and.w	r3, r3, #7
 8009492:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009496:	2b04      	cmp	r3, #4
 8009498:	d84b      	bhi.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800949a:	a201      	add	r2, pc, #4	@ (adr r2, 80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800949c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a0:	080094d9 	.word	0x080094d9
 80094a4:	080094b5 	.word	0x080094b5
 80094a8:	080094c7 	.word	0x080094c7
 80094ac:	080094e3 	.word	0x080094e3
 80094b0:	080094ed 	.word	0x080094ed
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe ff8f 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094c2:	f000 bd6d 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094c6:	f107 030c 	add.w	r3, r7, #12
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff fa3a 	bl	8008944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094d4:	f000 bd64 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80094d8:	f7fe f8e4 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 80094dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80094de:	f000 bd5f 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80094e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80094e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094e8:	f000 bd5a 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80094ec:	4b82      	ldr	r3, [pc, #520]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d118      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094f8:	4b7f      	ldr	r3, [pc, #508]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8009504:	4b7c      	ldr	r3, [pc, #496]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	0e1b      	lsrs	r3, r3, #24
 800950a:	f003 030f 	and.w	r3, r3, #15
 800950e:	e006      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009510:	4b79      	ldr	r3, [pc, #484]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009516:	041b      	lsls	r3, r3, #16
 8009518:	0e1b      	lsrs	r3, r3, #24
 800951a:	f003 030f 	and.w	r3, r3, #15
 800951e:	4a78      	ldr	r2, [pc, #480]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009524:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009526:	f000 bd3b 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800952e:	f000 bd37 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009536:	f000 bd33 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800953a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8009542:	430b      	orrs	r3, r1
 8009544:	d167      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009546:	4b6c      	ldr	r3, [pc, #432]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800954c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009550:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009558:	d036      	beq.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009560:	d855      	bhi.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009568:	d029      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009570:	d84d      	bhi.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009578:	d013      	beq.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009580:	d845      	bhi.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	2b00      	cmp	r3, #0
 8009586:	d015      	beq.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800958e:	d13e      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe ff21 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800959a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800959e:	f000 bcff 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095a2:	f107 030c 	add.w	r3, r7, #12
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff f9cc 	bl	8008944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095b0:	f000 bcf6 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80095b4:	f7fe f876 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 80095b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80095ba:	f000 bcf1 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80095be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80095c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095c4:	f000 bcec 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80095c8:	4b4b      	ldr	r3, [pc, #300]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d118      	bne.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095d4:	4b48      	ldr	r3, [pc, #288]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80095e0:	4b45      	ldr	r3, [pc, #276]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	0e1b      	lsrs	r3, r3, #24
 80095e6:	f003 030f 	and.w	r3, r3, #15
 80095ea:	e006      	b.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80095ec:	4b42      	ldr	r3, [pc, #264]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80095ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095f2:	041b      	lsls	r3, r3, #16
 80095f4:	0e1b      	lsrs	r3, r3, #24
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	4a41      	ldr	r2, [pc, #260]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80095fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009600:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009602:	f000 bccd 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800960a:	f000 bcc9 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009612:	f000 bcc5 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800961a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800961e:	430b      	orrs	r3, r1
 8009620:	d14c      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009622:	4b35      	ldr	r3, [pc, #212]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009628:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800962c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	2b00      	cmp	r3, #0
 8009632:	d104      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009634:	f7fe f850 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 8009638:	6378      	str	r0, [r7, #52]	@ 0x34
 800963a:	f000 bcb1 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009644:	d104      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009646:	f7fd ff2b 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 800964a:	6378      	str	r0, [r7, #52]	@ 0x34
 800964c:	f000 bca8 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009650:	4b29      	ldr	r3, [pc, #164]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800965c:	d107      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009664:	d103      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8009666:	4b25      	ldr	r3, [pc, #148]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009668:	637b      	str	r3, [r7, #52]	@ 0x34
 800966a:	f000 bc99 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800966e:	4b22      	ldr	r3, [pc, #136]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b20      	cmp	r3, #32
 8009678:	d11c      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009680:	d118      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009682:	4b1d      	ldr	r3, [pc, #116]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800968e:	4b1a      	ldr	r3, [pc, #104]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	0e1b      	lsrs	r3, r3, #24
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	e006      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800969a:	4b17      	ldr	r3, [pc, #92]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800969c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096a0:	041b      	lsls	r3, r3, #16
 80096a2:	0e1b      	lsrs	r3, r3, #24
 80096a4:	f003 030f 	and.w	r3, r3, #15
 80096a8:	4a15      	ldr	r2, [pc, #84]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80096aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b0:	f000 bc76 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b8:	f000 bc72 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80096bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80096c4:	430b      	orrs	r3, r1
 80096c6:	d153      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80096c8:	4b0b      	ldr	r3, [pc, #44]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80096ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80096d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d104      	bne.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80096da:	f7fd fffd 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 80096de:	6378      	str	r0, [r7, #52]	@ 0x34
 80096e0:	f000 bc5e 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80096e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ea:	d10b      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096ec:	f7fd fed8 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 80096f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80096f2:	f000 bc55 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80096f6:	bf00      	nop
 80096f8:	46020c00 	.word	0x46020c00
 80096fc:	00f42400 	.word	0x00f42400
 8009700:	0800d188 	.word	0x0800d188
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009704:	4ba1      	ldr	r3, [pc, #644]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800970c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009710:	d107      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009718:	d103      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800971a:	4b9d      	ldr	r3, [pc, #628]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800971c:	637b      	str	r3, [r7, #52]	@ 0x34
 800971e:	f000 bc3f 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009722:	4b9a      	ldr	r3, [pc, #616]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b20      	cmp	r3, #32
 800972c:	d11c      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800972e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009730:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009734:	d118      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009736:	4b95      	ldr	r3, [pc, #596]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8009742:	4b92      	ldr	r3, [pc, #584]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	0e1b      	lsrs	r3, r3, #24
 8009748:	f003 030f 	and.w	r3, r3, #15
 800974c:	e006      	b.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800974e:	4b8f      	ldr	r3, [pc, #572]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009754:	041b      	lsls	r3, r3, #16
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	f003 030f 	and.w	r3, r3, #15
 800975c:	4a8d      	ldr	r2, [pc, #564]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800975e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009762:	637b      	str	r3, [r7, #52]	@ 0x34
 8009764:	f000 bc1c 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	637b      	str	r3, [r7, #52]	@ 0x34
 800976c:	f000 bc18 	b.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009774:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009778:	430b      	orrs	r3, r1
 800977a:	d151      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800977c:	4b83      	ldr	r3, [pc, #524]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800977e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009782:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009786:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978a:	2bc0      	cmp	r3, #192	@ 0xc0
 800978c:	d024      	beq.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	2bc0      	cmp	r3, #192	@ 0xc0
 8009792:	d842      	bhi.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	2b80      	cmp	r3, #128	@ 0x80
 8009798:	d00d      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	2b80      	cmp	r3, #128	@ 0x80
 800979e:	d83c      	bhi.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	2b40      	cmp	r3, #64	@ 0x40
 80097aa:	d011      	beq.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80097ac:	e035      	b.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80097ae:	f7fd ffbb 	bl	8007728 <HAL_RCC_GetPCLK3Freq>
 80097b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80097b4:	e3f4      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097b6:	4b75      	ldr	r3, [pc, #468]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097c2:	d102      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80097c4:	4b72      	ldr	r3, [pc, #456]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80097c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80097c8:	e3ea      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097ce:	e3e7      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80097d0:	f7fd fe66 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 80097d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80097d6:	e3e3      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80097d8:	4b6c      	ldr	r3, [pc, #432]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0320 	and.w	r3, r3, #32
 80097e0:	2b20      	cmp	r3, #32
 80097e2:	d117      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097e4:	4b69      	ldr	r3, [pc, #420]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d005      	beq.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80097f0:	4b66      	ldr	r3, [pc, #408]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	0e1b      	lsrs	r3, r3, #24
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	e006      	b.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80097fc:	4b63      	ldr	r3, [pc, #396]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80097fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009802:	041b      	lsls	r3, r3, #16
 8009804:	0e1b      	lsrs	r3, r3, #24
 8009806:	f003 030f 	and.w	r3, r3, #15
 800980a:	4a62      	ldr	r2, [pc, #392]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800980c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009810:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009812:	e3c5      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009814:	2300      	movs	r3, #0
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009818:	e3c2      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800981e:	e3bf      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009824:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009828:	430b      	orrs	r3, r1
 800982a:	d147      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800982c:	4b57      	ldr	r3, [pc, #348]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800982e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009832:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009836:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	2b00      	cmp	r3, #0
 800983c:	d103      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800983e:	f7fd ff4b 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 8009842:	6378      	str	r0, [r7, #52]	@ 0x34
 8009844:	e3ac      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800984c:	d103      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800984e:	f7fd fe27 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009852:	6378      	str	r0, [r7, #52]	@ 0x34
 8009854:	e3a4      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009856:	4b4d      	ldr	r3, [pc, #308]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800985e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009862:	d106      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8009864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800986a:	d102      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800986c:	4b48      	ldr	r3, [pc, #288]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800986e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009870:	e396      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009872:	4b46      	ldr	r3, [pc, #280]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b20      	cmp	r3, #32
 800987c:	d11b      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009884:	d117      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009886:	4b41      	ldr	r3, [pc, #260]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8009892:	4b3e      	ldr	r3, [pc, #248]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	0e1b      	lsrs	r3, r3, #24
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	e006      	b.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800989e:	4b3b      	ldr	r3, [pc, #236]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80098a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098a4:	041b      	lsls	r3, r3, #16
 80098a6:	0e1b      	lsrs	r3, r3, #24
 80098a8:	f003 030f 	and.w	r3, r3, #15
 80098ac:	4a39      	ldr	r2, [pc, #228]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80098ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b4:	e374      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ba:	e371      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80098bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098c0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80098c4:	430b      	orrs	r3, r1
 80098c6:	d16a      	bne.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80098c8:	4b30      	ldr	r3, [pc, #192]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80098ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80098d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d120      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098da:	4b2c      	ldr	r3, [pc, #176]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	d117      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80098e6:	4b29      	ldr	r3, [pc, #164]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80098f2:	4b26      	ldr	r3, [pc, #152]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	0e1b      	lsrs	r3, r3, #24
 80098f8:	f003 030f 	and.w	r3, r3, #15
 80098fc:	e006      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80098fe:	4b23      	ldr	r3, [pc, #140]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009904:	041b      	lsls	r3, r3, #16
 8009906:	0e1b      	lsrs	r3, r3, #24
 8009908:	f003 030f 	and.w	r3, r3, #15
 800990c:	4a21      	ldr	r2, [pc, #132]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800990e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
 8009914:	e344      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	637b      	str	r3, [r7, #52]	@ 0x34
 800991a:	e341      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800991c:	4b1b      	ldr	r3, [pc, #108]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800991e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800992a:	d112      	bne.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009932:	d10e      	bne.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009934:	4b15      	ldr	r3, [pc, #84]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800993a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800993e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009942:	d102      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8009944:	23fa      	movs	r3, #250	@ 0xfa
 8009946:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009948:	e32a      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800994a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800994e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009950:	e326      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009952:	4b0e      	ldr	r3, [pc, #56]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800995a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800995e:	d106      	bne.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009966:	d102      	bne.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800996a:	637b      	str	r3, [r7, #52]	@ 0x34
 800996c:	e318      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800996e:	4b07      	ldr	r3, [pc, #28]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b02      	cmp	r3, #2
 800997a:	d10d      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009982:	d109      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8009984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009988:	637b      	str	r3, [r7, #52]	@ 0x34
 800998a:	e309      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800998c:	46020c00 	.word	0x46020c00
 8009990:	00f42400 	.word	0x00f42400
 8009994:	0800d188 	.word	0x0800d188
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	637b      	str	r3, [r7, #52]	@ 0x34
 800999c:	e300      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800999e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099a2:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80099a6:	430b      	orrs	r3, r1
 80099a8:	d164      	bne.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80099aa:	4ba2      	ldr	r3, [pc, #648]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d120      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099bc:	4b9d      	ldr	r3, [pc, #628]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	d117      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099c8:	4b9a      	ldr	r3, [pc, #616]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80099d4:	4b97      	ldr	r3, [pc, #604]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	0e1b      	lsrs	r3, r3, #24
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	e006      	b.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80099e0:	4b94      	ldr	r3, [pc, #592]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099e6:	041b      	lsls	r3, r3, #16
 80099e8:	0e1b      	lsrs	r3, r3, #24
 80099ea:	f003 030f 	and.w	r3, r3, #15
 80099ee:	4a92      	ldr	r2, [pc, #584]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80099f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f6:	e2d3      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fc:	e2d0      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80099fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a0c:	d112      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a14:	d10e      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a16:	4b87      	ldr	r3, [pc, #540]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a24:	d102      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8009a26:	23fa      	movs	r3, #250	@ 0xfa
 8009a28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a2a:	e2b9      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009a2c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a32:	e2b5      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009a34:	4b7f      	ldr	r3, [pc, #508]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a40:	d106      	bne.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8009a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a48:	d102      	bne.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8009a4a:	4b7c      	ldr	r3, [pc, #496]	@ (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a4e:	e2a7      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009a50:	4b78      	ldr	r3, [pc, #480]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a56:	f003 0302 	and.w	r3, r3, #2
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d107      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a64:	d103      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8009a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6c:	e298      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a72:	e295      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a78:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	d147      	bne.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009a80:	4b6c      	ldr	r3, [pc, #432]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a86:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009a8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a92:	f7fd fe21 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 8009a96:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a98:	e282      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009a9a:	4b66      	ldr	r3, [pc, #408]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009aa8:	d112      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ab0:	d10e      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ab2:	4b60      	ldr	r3, [pc, #384]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009abc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ac0:	d102      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8009ac2:	23fa      	movs	r3, #250	@ 0xfa
 8009ac4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ac6:	e26b      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009ac8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ace:	e267      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009ad0:	4b58      	ldr	r3, [pc, #352]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009adc:	d106      	bne.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009ae4:	d102      	bne.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8009ae6:	4b55      	ldr	r3, [pc, #340]	@ (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aea:	e259      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009aec:	4b51      	ldr	r3, [pc, #324]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d107      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009b00:	d103      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8009b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b08:	e24a      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b0e:	e247      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b14:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009b18:	430b      	orrs	r3, r1
 8009b1a:	d12d      	bne.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009b1c:	4b45      	ldr	r3, [pc, #276]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b22:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009b26:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009b28:	4b42      	ldr	r3, [pc, #264]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b34:	d105      	bne.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d102      	bne.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8009b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b40:	e22e      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b48:	d107      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fc44 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b58:	e222      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b60:	d107      	bne.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b62:	f107 0318 	add.w	r3, r7, #24
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fd92 	bl	8008690 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b70:	e216      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b76:	e213      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b7c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009b80:	430b      	orrs	r3, r1
 8009b82:	d15d      	bne.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009b84:	4b2b      	ldr	r3, [pc, #172]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b8a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009b8e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b96:	d028      	beq.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b9e:	d845      	bhi.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ba6:	d013      	beq.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009baa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bae:	d83d      	bhi.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d004      	beq.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bbc:	d004      	beq.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009bbe:	e035      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009bc0:	f7fd fd9e 	bl	8007700 <HAL_RCC_GetPCLK2Freq>
 8009bc4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009bc6:	e1eb      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009bc8:	f7fd fc6a 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009bcc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009bce:	e1e7      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009bd0:	4b18      	ldr	r3, [pc, #96]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bdc:	d102      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8009bde:	4b17      	ldr	r3, [pc, #92]	@ (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009be0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009be2:	e1dd      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009be8:	e1da      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009bea:	4b12      	ldr	r3, [pc, #72]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	d117      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d005      	beq.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8009c02:	4b0c      	ldr	r3, [pc, #48]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	0e1b      	lsrs	r3, r3, #24
 8009c08:	f003 030f 	and.w	r3, r3, #15
 8009c0c:	e006      	b.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8009c0e:	4b09      	ldr	r3, [pc, #36]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c14:	041b      	lsls	r3, r3, #16
 8009c16:	0e1b      	lsrs	r3, r3, #24
 8009c18:	f003 030f 	and.w	r3, r3, #15
 8009c1c:	4a06      	ldr	r2, [pc, #24]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c24:	e1bc      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c2a:	e1b9      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c30:	e1b6      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009c32:	bf00      	nop
 8009c34:	46020c00 	.word	0x46020c00
 8009c38:	0800d188 	.word	0x0800d188
 8009c3c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c44:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009c48:	430b      	orrs	r3, r1
 8009c4a:	d156      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009c4c:	4ba5      	ldr	r3, [pc, #660]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009c56:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c5e:	d028      	beq.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c66:	d845      	bhi.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c6e:	d013      	beq.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8009c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c76:	d83d      	bhi.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d004      	beq.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c84:	d004      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8009c86:	e035      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009c88:	f7fd fd26 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 8009c8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c8e:	e187      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c90:	f7fd fc06 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009c94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c96:	e183      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c98:	4b92      	ldr	r3, [pc, #584]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca4:	d102      	bne.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8009ca6:	4b90      	ldr	r3, [pc, #576]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009ca8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009caa:	e179      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cb0:	e176      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009cb2:	4b8c      	ldr	r3, [pc, #560]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d117      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009cbe:	4b89      	ldr	r3, [pc, #548]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d005      	beq.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8009cca:	4b86      	ldr	r3, [pc, #536]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	0e1b      	lsrs	r3, r3, #24
 8009cd0:	f003 030f 	and.w	r3, r3, #15
 8009cd4:	e006      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8009cd6:	4b83      	ldr	r3, [pc, #524]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cdc:	041b      	lsls	r3, r3, #16
 8009cde:	0e1b      	lsrs	r3, r3, #24
 8009ce0:	f003 030f 	and.w	r3, r3, #15
 8009ce4:	4a81      	ldr	r2, [pc, #516]	@ (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cec:	e158      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cf2:	e155      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cf8:	e152      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cfe:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009d02:	430b      	orrs	r3, r1
 8009d04:	d177      	bne.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009d06:	4b77      	ldr	r3, [pc, #476]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d0c:	f003 0318 	and.w	r3, r3, #24
 8009d10:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d14:	2b18      	cmp	r3, #24
 8009d16:	d86b      	bhi.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8009d18:	a201      	add	r2, pc, #4	@ (adr r2, 8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8009d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1e:	bf00      	nop
 8009d20:	08009d85 	.word	0x08009d85
 8009d24:	08009df1 	.word	0x08009df1
 8009d28:	08009df1 	.word	0x08009df1
 8009d2c:	08009df1 	.word	0x08009df1
 8009d30:	08009df1 	.word	0x08009df1
 8009d34:	08009df1 	.word	0x08009df1
 8009d38:	08009df1 	.word	0x08009df1
 8009d3c:	08009df1 	.word	0x08009df1
 8009d40:	08009d8d 	.word	0x08009d8d
 8009d44:	08009df1 	.word	0x08009df1
 8009d48:	08009df1 	.word	0x08009df1
 8009d4c:	08009df1 	.word	0x08009df1
 8009d50:	08009df1 	.word	0x08009df1
 8009d54:	08009df1 	.word	0x08009df1
 8009d58:	08009df1 	.word	0x08009df1
 8009d5c:	08009df1 	.word	0x08009df1
 8009d60:	08009d95 	.word	0x08009d95
 8009d64:	08009df1 	.word	0x08009df1
 8009d68:	08009df1 	.word	0x08009df1
 8009d6c:	08009df1 	.word	0x08009df1
 8009d70:	08009df1 	.word	0x08009df1
 8009d74:	08009df1 	.word	0x08009df1
 8009d78:	08009df1 	.word	0x08009df1
 8009d7c:	08009df1 	.word	0x08009df1
 8009d80:	08009daf 	.word	0x08009daf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009d84:	f7fd fcd0 	bl	8007728 <HAL_RCC_GetPCLK3Freq>
 8009d88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009d8a:	e109      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009d8c:	f7fd fb88 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009d90:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009d92:	e105      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d94:	4b53      	ldr	r3, [pc, #332]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009da0:	d102      	bne.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8009da2:	4b51      	ldr	r3, [pc, #324]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009da4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009da6:	e0fb      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dac:	e0f8      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009dae:	4b4d      	ldr	r3, [pc, #308]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b20      	cmp	r3, #32
 8009db8:	d117      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009dba:	4b4a      	ldr	r3, [pc, #296]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d005      	beq.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8009dc6:	4b47      	ldr	r3, [pc, #284]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	0e1b      	lsrs	r3, r3, #24
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	e006      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8009dd2:	4b44      	ldr	r3, [pc, #272]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009dd8:	041b      	lsls	r3, r3, #16
 8009dda:	0e1b      	lsrs	r3, r3, #24
 8009ddc:	f003 030f 	and.w	r3, r3, #15
 8009de0:	4a42      	ldr	r2, [pc, #264]	@ (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009de8:	e0da      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dee:	e0d7      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009df4:	e0d4      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dfa:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	d155      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009e02:	4b38      	ldr	r3, [pc, #224]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009e04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009e08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009e0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e14:	d013      	beq.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e1c:	d844      	bhi.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e24:	d013      	beq.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8009e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e2c:	d83c      	bhi.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d014      	beq.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e3a:	d014      	beq.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009e3c:	e034      	b.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e3e:	f107 0318 	add.w	r3, r7, #24
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fc24 	bl	8008690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e4c:	e0a8      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fac2 	bl	80083dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e5c:	e0a0      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009e5e:	f7fd fb1f 	bl	80074a0 <HAL_RCC_GetSysClockFreq>
 8009e62:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009e64:	e09c      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009e66:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d117      	bne.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e72:	4b1c      	ldr	r3, [pc, #112]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8009e7e:	4b19      	ldr	r3, [pc, #100]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	0e1b      	lsrs	r3, r3, #24
 8009e84:	f003 030f 	and.w	r3, r3, #15
 8009e88:	e006      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009e8a:	4b16      	ldr	r3, [pc, #88]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009e8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e90:	041b      	lsls	r3, r3, #16
 8009e92:	0e1b      	lsrs	r3, r3, #24
 8009e94:	f003 030f 	and.w	r3, r3, #15
 8009e98:	4a14      	ldr	r2, [pc, #80]	@ (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ea0:	e07e      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ea6:	e07b      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009eac:	e078      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eb2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009eb6:	430b      	orrs	r3, r1
 8009eb8:	d138      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009eba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ec4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009ec6:	4b07      	ldr	r3, [pc, #28]	@ (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d10d      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10a      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8009eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee0:	e05e      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009ee2:	bf00      	nop
 8009ee4:	46020c00 	.word	0x46020c00
 8009ee8:	00f42400 	.word	0x00f42400
 8009eec:	0800d188 	.word	0x0800d188
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ef6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009efe:	d112      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8009f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f06:	d10e      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f08:	4b28      	ldr	r3, [pc, #160]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f16:	d102      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8009f18:	23fa      	movs	r3, #250	@ 0xfa
 8009f1a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f1c:	e040      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009f1e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009f22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f24:	e03c      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f2a:	e039      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f30:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009f34:	430b      	orrs	r3, r1
 8009f36:	d131      	bne.n	8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009f38:	4b1c      	ldr	r3, [pc, #112]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009f3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f3e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009f42:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009f44:	4b19      	ldr	r3, [pc, #100]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f50:	d105      	bne.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8009f58:	4b15      	ldr	r3, [pc, #84]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8009f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f5c:	e020      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009f5e:	4b13      	ldr	r3, [pc, #76]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f6a:	d106      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f72:	d102      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009f74:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8009f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f78:	e012      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f86:	d106      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f8e:	d102      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8009f90:	4b09      	ldr	r3, [pc, #36]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8009f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f94:	e004      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f9a:	e001      	b.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3738      	adds	r7, #56	@ 0x38
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	46020c00 	.word	0x46020c00
 8009fb0:	02dc6c00 	.word	0x02dc6c00
 8009fb4:	016e3600 	.word	0x016e3600
 8009fb8:	00f42400 	.word	0x00f42400

08009fbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009fc4:	4b47      	ldr	r3, [pc, #284]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a46      	ldr	r2, [pc, #280]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 8009fca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009fce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009fd0:	f7f8 fe2a 	bl	8002c28 <HAL_GetTick>
 8009fd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fd6:	e008      	b.n	8009fea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fd8:	f7f8 fe26 	bl	8002c28 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d901      	bls.n	8009fea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e077      	b.n	800a0da <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fea:	4b3e      	ldr	r3, [pc, #248]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1f0      	bne.n	8009fd8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009ff6:	4b3b      	ldr	r3, [pc, #236]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ffe:	f023 0303 	bic.w	r3, r3, #3
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	6811      	ldr	r1, [r2, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6852      	ldr	r2, [r2, #4]
 800a00a:	3a01      	subs	r2, #1
 800a00c:	0212      	lsls	r2, r2, #8
 800a00e:	430a      	orrs	r2, r1
 800a010:	4934      	ldr	r1, [pc, #208]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a012:	4313      	orrs	r3, r2
 800a014:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a016:	4b33      	ldr	r3, [pc, #204]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a01a:	4b33      	ldr	r3, [pc, #204]	@ (800a0e8 <RCCEx_PLL2_Config+0x12c>)
 800a01c:	4013      	ands	r3, r2
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	6892      	ldr	r2, [r2, #8]
 800a022:	3a01      	subs	r2, #1
 800a024:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	68d2      	ldr	r2, [r2, #12]
 800a02c:	3a01      	subs	r2, #1
 800a02e:	0252      	lsls	r2, r2, #9
 800a030:	b292      	uxth	r2, r2
 800a032:	4311      	orrs	r1, r2
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6912      	ldr	r2, [r2, #16]
 800a038:	3a01      	subs	r2, #1
 800a03a:	0412      	lsls	r2, r2, #16
 800a03c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a040:	4311      	orrs	r1, r2
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	6952      	ldr	r2, [r2, #20]
 800a046:	3a01      	subs	r2, #1
 800a048:	0612      	lsls	r2, r2, #24
 800a04a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a04e:	430a      	orrs	r2, r1
 800a050:	4924      	ldr	r1, [pc, #144]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a052:	4313      	orrs	r3, r2
 800a054:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a056:	4b23      	ldr	r3, [pc, #140]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a05a:	f023 020c 	bic.w	r2, r3, #12
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	4920      	ldr	r1, [pc, #128]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a064:	4313      	orrs	r3, r2
 800a066:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a068:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a06a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	491c      	ldr	r1, [pc, #112]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a072:	4313      	orrs	r3, r2
 800a074:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a076:	4b1b      	ldr	r3, [pc, #108]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07a:	4a1a      	ldr	r2, [pc, #104]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a07c:	f023 0310 	bic.w	r3, r3, #16
 800a080:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a082:	4b18      	ldr	r3, [pc, #96]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a08a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	69d2      	ldr	r2, [r2, #28]
 800a092:	00d2      	lsls	r2, r2, #3
 800a094:	4913      	ldr	r1, [pc, #76]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a096:	4313      	orrs	r3, r2
 800a098:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a09a:	4b12      	ldr	r3, [pc, #72]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09e:	4a11      	ldr	r2, [pc, #68]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a0a0:	f043 0310 	orr.w	r3, r3, #16
 800a0a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a0ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0b0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0b2:	f7f8 fdb9 	bl	8002c28 <HAL_GetTick>
 800a0b6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0b8:	e008      	b.n	800a0cc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0ba:	f7f8 fdb5 	bl	8002c28 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d901      	bls.n	800a0cc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e006      	b.n	800a0da <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0cc:	4b05      	ldr	r3, [pc, #20]	@ (800a0e4 <RCCEx_PLL2_Config+0x128>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0f0      	beq.n	800a0ba <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0

}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	46020c00 	.word	0x46020c00
 800a0e8:	80800000 	.word	0x80800000

0800a0ec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a0f4:	4b47      	ldr	r3, [pc, #284]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a46      	ldr	r2, [pc, #280]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a0fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a100:	f7f8 fd92 	bl	8002c28 <HAL_GetTick>
 800a104:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a106:	e008      	b.n	800a11a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a108:	f7f8 fd8e 	bl	8002c28 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b02      	cmp	r3, #2
 800a114:	d901      	bls.n	800a11a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e077      	b.n	800a20a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a11a:	4b3e      	ldr	r3, [pc, #248]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1f0      	bne.n	800a108 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a126:	4b3b      	ldr	r3, [pc, #236]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	6811      	ldr	r1, [r2, #0]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	6852      	ldr	r2, [r2, #4]
 800a13a:	3a01      	subs	r2, #1
 800a13c:	0212      	lsls	r2, r2, #8
 800a13e:	430a      	orrs	r2, r1
 800a140:	4934      	ldr	r1, [pc, #208]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a142:	4313      	orrs	r3, r2
 800a144:	630b      	str	r3, [r1, #48]	@ 0x30
 800a146:	4b33      	ldr	r3, [pc, #204]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a14a:	4b33      	ldr	r3, [pc, #204]	@ (800a218 <RCCEx_PLL3_Config+0x12c>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	6892      	ldr	r2, [r2, #8]
 800a152:	3a01      	subs	r2, #1
 800a154:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	68d2      	ldr	r2, [r2, #12]
 800a15c:	3a01      	subs	r2, #1
 800a15e:	0252      	lsls	r2, r2, #9
 800a160:	b292      	uxth	r2, r2
 800a162:	4311      	orrs	r1, r2
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	6912      	ldr	r2, [r2, #16]
 800a168:	3a01      	subs	r2, #1
 800a16a:	0412      	lsls	r2, r2, #16
 800a16c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a170:	4311      	orrs	r1, r2
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	6952      	ldr	r2, [r2, #20]
 800a176:	3a01      	subs	r2, #1
 800a178:	0612      	lsls	r2, r2, #24
 800a17a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a17e:	430a      	orrs	r2, r1
 800a180:	4924      	ldr	r1, [pc, #144]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a182:	4313      	orrs	r3, r2
 800a184:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a186:	4b23      	ldr	r3, [pc, #140]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18a:	f023 020c 	bic.w	r2, r3, #12
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	4920      	ldr	r1, [pc, #128]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a194:	4313      	orrs	r3, r2
 800a196:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a198:	4b1e      	ldr	r3, [pc, #120]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a19a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
 800a1a0:	491c      	ldr	r1, [pc, #112]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a1a6:	4b1b      	ldr	r3, [pc, #108]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1aa:	4a1a      	ldr	r2, [pc, #104]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1ac:	f023 0310 	bic.w	r3, r3, #16
 800a1b0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1b2:	4b18      	ldr	r3, [pc, #96]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	69d2      	ldr	r2, [r2, #28]
 800a1c2:	00d2      	lsls	r2, r2, #3
 800a1c4:	4913      	ldr	r1, [pc, #76]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a1ca:	4b12      	ldr	r3, [pc, #72]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ce:	4a11      	ldr	r2, [pc, #68]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1d0:	f043 0310 	orr.w	r3, r3, #16
 800a1d4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a0e      	ldr	r2, [pc, #56]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a1e2:	f7f8 fd21 	bl	8002c28 <HAL_GetTick>
 800a1e6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1e8:	e008      	b.n	800a1fc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1ea:	f7f8 fd1d 	bl	8002c28 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d901      	bls.n	800a1fc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e006      	b.n	800a20a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1fc:	4b05      	ldr	r3, [pc, #20]	@ (800a214 <RCCEx_PLL3_Config+0x128>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d0f0      	beq.n	800a1ea <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	46020c00 	.word	0x46020c00
 800a218:	80800000 	.word	0x80800000

0800a21c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e08b      	b.n	800a346 <HAL_RNG_Init+0x12a>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	7a5b      	ldrb	r3, [r3, #9]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d105      	bne.n	800a244 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7f7 fe0e 	bl	8001e60 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0204 	bic.w	r2, r2, #4
 800a258:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a264:	f023 0320 	bic.w	r3, r3, #32
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6852      	ldr	r2, [r2, #4]
 800a26c:	431a      	orrs	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a276:	601a      	str	r2, [r3, #0]

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a288:	f7f8 fcce 	bl	8002c28 <HAL_GetTick>
 800a28c:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a28e:	e016      	b.n	800a2be <HAL_RNG_Init+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a290:	f7f8 fcca 	bl	8002c28 <HAL_GetTick>
 800a294:	4602      	mov	r2, r0
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d90f      	bls.n	800a2be <HAL_RNG_Init+0xa2>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ac:	d107      	bne.n	800a2be <HAL_RNG_Init+0xa2>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e043      	b.n	800a346 <HAL_RNG_Init+0x12a>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2cc:	d0e0      	beq.n	800a290 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0204 	orr.w	r2, r2, #4
 800a2dc:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ea:	d104      	bne.n	800a2f6 <HAL_RNG_Init+0xda>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2204      	movs	r2, #4
 800a2f0:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e027      	b.n	800a346 <HAL_RNG_Init+0x12a>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a2f6:	f7f8 fc97 	bl	8002c28 <HAL_GetTick>
 800a2fa:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a2fc:	e015      	b.n	800a32a <HAL_RNG_Init+0x10e>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a2fe:	f7f8 fc93 	bl	8002c28 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d90e      	bls.n	800a32a <HAL_RNG_Init+0x10e>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f003 0304 	and.w	r3, r3, #4
 800a316:	2b04      	cmp	r3, #4
 800a318:	d107      	bne.n	800a32a <HAL_RNG_Init+0x10e>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2204      	movs	r2, #4
 800a31e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e00d      	b.n	800a346 <HAL_RNG_Init+0x12a>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b01      	cmp	r3, #1
 800a336:	d1e2      	bne.n	800a2fe <HAL_RNG_Init+0xe2>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
	...

0800a350 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d071      	beq.n	800a446 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7f7 fdac 	bl	8001ed4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2202      	movs	r2, #2
 800a380:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a384:	4b32      	ldr	r3, [pc, #200]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f003 0310 	and.w	r3, r3, #16
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	d051      	beq.n	800a434 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a390:	4b2f      	ldr	r3, [pc, #188]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a392:	22ca      	movs	r2, #202	@ 0xca
 800a394:	625a      	str	r2, [r3, #36]	@ 0x24
 800a396:	4b2e      	ldr	r3, [pc, #184]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a398:	2253      	movs	r2, #83	@ 0x53
 800a39a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f9ad 	bl	800a6fc <RTC_EnterInitMode>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d13f      	bne.n	800a42c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a3ac:	4b28      	ldr	r3, [pc, #160]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	4a27      	ldr	r2, [pc, #156]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a3b2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a3b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3ba:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a3bc:	4b24      	ldr	r3, [pc, #144]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a3be:	699a      	ldr	r2, [r3, #24]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6859      	ldr	r1, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	4319      	orrs	r1, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	491f      	ldr	r1, [pc, #124]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68da      	ldr	r2, [r3, #12]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	491b      	ldr	r1, [pc, #108]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a3e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f6:	430b      	orrs	r3, r1
 800a3f8:	4915      	ldr	r1, [pc, #84]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f9b8 	bl	800a774 <RTC_ExitInitMode>
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10e      	bne.n	800a42c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800a40e:	4b10      	ldr	r3, [pc, #64]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a19      	ldr	r1, [r3, #32]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	4319      	orrs	r1, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	430b      	orrs	r3, r1
 800a426:	490a      	ldr	r1, [pc, #40]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a428:	4313      	orrs	r3, r2
 800a42a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a42c:	4b08      	ldr	r3, [pc, #32]	@ (800a450 <HAL_RTC_Init+0x100>)
 800a42e:	22ff      	movs	r2, #255	@ 0xff
 800a430:	625a      	str	r2, [r3, #36]	@ 0x24
 800a432:	e001      	b.n	800a438 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d103      	bne.n	800a446 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	46007800 	.word	0x46007800

0800a454 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a466:	2b01      	cmp	r3, #1
 800a468:	d101      	bne.n	800a46e <HAL_RTC_SetTime+0x1a>
 800a46a:	2302      	movs	r3, #2
 800a46c:	e088      	b.n	800a580 <HAL_RTC_SetTime+0x12c>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2202      	movs	r2, #2
 800a47a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a47e:	4b42      	ldr	r3, [pc, #264]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a480:	22ca      	movs	r2, #202	@ 0xca
 800a482:	625a      	str	r2, [r3, #36]	@ 0x24
 800a484:	4b40      	ldr	r3, [pc, #256]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a486:	2253      	movs	r2, #83	@ 0x53
 800a488:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 f936 	bl	800a6fc <RTC_EnterInitMode>
 800a490:	4603      	mov	r3, r0
 800a492:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a494:	7cfb      	ldrb	r3, [r7, #19]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d163      	bne.n	800a562 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a49a:	4b3b      	ldr	r3, [pc, #236]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4a6:	d057      	beq.n	800a558 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d125      	bne.n	800a4fa <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a4ae:	4b36      	ldr	r3, [pc, #216]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d102      	bne.n	800a4c0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 f993 	bl	800a7f0 <RTC_ByteToBcd2>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	785b      	ldrb	r3, [r3, #1]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 f98c 	bl	800a7f0 <RTC_ByteToBcd2>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a4dc:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	789b      	ldrb	r3, [r3, #2]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 f984 	bl	800a7f0 <RTC_ByteToBcd2>
 800a4e8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4ea:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	78db      	ldrb	r3, [r3, #3]
 800a4f2:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	617b      	str	r3, [r7, #20]
 800a4f8:	e017      	b.n	800a52a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a4fa:	4b23      	ldr	r3, [pc, #140]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2200      	movs	r2, #0
 800a50a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a518:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a51e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	78db      	ldrb	r3, [r3, #3]
 800a524:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a526:	4313      	orrs	r3, r2
 800a528:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a52a:	4a17      	ldr	r2, [pc, #92]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a532:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a536:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a538:	4b13      	ldr	r3, [pc, #76]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	4a12      	ldr	r2, [pc, #72]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a53e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a542:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800a544:	4b10      	ldr	r3, [pc, #64]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a546:	699a      	ldr	r2, [r3, #24]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	68d9      	ldr	r1, [r3, #12]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	430b      	orrs	r3, r1
 800a552:	490d      	ldr	r1, [pc, #52]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a554:	4313      	orrs	r3, r2
 800a556:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 f90b 	bl	800a774 <RTC_ExitInitMode>
 800a55e:	4603      	mov	r3, r0
 800a560:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a562:	4b09      	ldr	r3, [pc, #36]	@ (800a588 <HAL_RTC_SetTime+0x134>)
 800a564:	22ff      	movs	r2, #255	@ 0xff
 800a566:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a568:	7cfb      	ldrb	r3, [r7, #19]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d103      	bne.n	800a576 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a57e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a580:	4618      	mov	r0, r3
 800a582:	371c      	adds	r7, #28
 800a584:	46bd      	mov	sp, r7
 800a586:	bd90      	pop	{r4, r7, pc}
 800a588:	46007800 	.word	0x46007800

0800a58c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a58c:	b590      	push	{r4, r7, lr}
 800a58e:	b087      	sub	sp, #28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d101      	bne.n	800a5a6 <HAL_RTC_SetDate+0x1a>
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e071      	b.n	800a68a <HAL_RTC_SetDate+0xfe>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10e      	bne.n	800a5da <HAL_RTC_SetDate+0x4e>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	f023 0310 	bic.w	r3, r3, #16
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	330a      	adds	r3, #10
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d11c      	bne.n	800a61a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	78db      	ldrb	r3, [r3, #3]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 f903 	bl	800a7f0 <RTC_ByteToBcd2>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 f8fc 	bl	800a7f0 <RTC_ByteToBcd2>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a5fc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	789b      	ldrb	r3, [r3, #2]
 800a602:	4618      	mov	r0, r3
 800a604:	f000 f8f4 	bl	800a7f0 <RTC_ByteToBcd2>
 800a608:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a60a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e00e      	b.n	800a638 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	78db      	ldrb	r3, [r3, #3]
 800a61e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a626:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a62c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a634:	4313      	orrs	r3, r2
 800a636:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a638:	4b16      	ldr	r3, [pc, #88]	@ (800a694 <HAL_RTC_SetDate+0x108>)
 800a63a:	22ca      	movs	r2, #202	@ 0xca
 800a63c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a63e:	4b15      	ldr	r3, [pc, #84]	@ (800a694 <HAL_RTC_SetDate+0x108>)
 800a640:	2253      	movs	r2, #83	@ 0x53
 800a642:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 f859 	bl	800a6fc <RTC_EnterInitMode>
 800a64a:	4603      	mov	r3, r0
 800a64c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a64e:	7cfb      	ldrb	r3, [r7, #19]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10b      	bne.n	800a66c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a654:	4a0f      	ldr	r2, [pc, #60]	@ (800a694 <HAL_RTC_SetDate+0x108>)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a65c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a660:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 f886 	bl	800a774 <RTC_ExitInitMode>
 800a668:	4603      	mov	r3, r0
 800a66a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a66c:	4b09      	ldr	r3, [pc, #36]	@ (800a694 <HAL_RTC_SetDate+0x108>)
 800a66e:	22ff      	movs	r2, #255	@ 0xff
 800a670:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a672:	7cfb      	ldrb	r3, [r7, #19]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d103      	bne.n	800a680 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a688:	7cfb      	ldrb	r3, [r7, #19]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd90      	pop	{r4, r7, pc}
 800a692:	bf00      	nop
 800a694:	46007800 	.word	0x46007800

0800a698 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a6a0:	4b15      	ldr	r3, [pc, #84]	@ (800a6f8 <HAL_RTC_WaitForSynchro+0x60>)
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	4a14      	ldr	r2, [pc, #80]	@ (800a6f8 <HAL_RTC_WaitForSynchro+0x60>)
 800a6a6:	f023 0320 	bic.w	r3, r3, #32
 800a6aa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a6ac:	f7f8 fabc 	bl	8002c28 <HAL_GetTick>
 800a6b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a6b2:	e013      	b.n	800a6dc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6b4:	f7f8 fab8 	bl	8002c28 <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6c2:	d90b      	bls.n	800a6dc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a6f8 <HAL_RTC_WaitForSynchro+0x60>)
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f003 0320 	and.w	r3, r3, #32
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10c      	bne.n	800a6ea <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2203      	movs	r2, #3
 800a6d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	e008      	b.n	800a6ee <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a6dc:	4b06      	ldr	r3, [pc, #24]	@ (800a6f8 <HAL_RTC_WaitForSynchro+0x60>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d0e5      	beq.n	800a6b4 <HAL_RTC_WaitForSynchro+0x1c>
 800a6e8:	e000      	b.n	800a6ec <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a6ea:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	46007800 	.word	0x46007800

0800a6fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a708:	4b19      	ldr	r3, [pc, #100]	@ (800a770 <RTC_EnterInitMode+0x74>)
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a710:	2b00      	cmp	r3, #0
 800a712:	d128      	bne.n	800a766 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a714:	4b16      	ldr	r3, [pc, #88]	@ (800a770 <RTC_EnterInitMode+0x74>)
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	4a15      	ldr	r2, [pc, #84]	@ (800a770 <RTC_EnterInitMode+0x74>)
 800a71a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a71e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a720:	f7f8 fa82 	bl	8002c28 <HAL_GetTick>
 800a724:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a726:	e013      	b.n	800a750 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a728:	f7f8 fa7e 	bl	8002c28 <HAL_GetTick>
 800a72c:	4602      	mov	r2, r0
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a736:	d90b      	bls.n	800a750 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a738:	4b0d      	ldr	r3, [pc, #52]	@ (800a770 <RTC_EnterInitMode+0x74>)
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10f      	bne.n	800a764 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2203      	movs	r2, #3
 800a74c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a750:	4b07      	ldr	r3, [pc, #28]	@ (800a770 <RTC_EnterInitMode+0x74>)
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d104      	bne.n	800a766 <RTC_EnterInitMode+0x6a>
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d1e2      	bne.n	800a728 <RTC_EnterInitMode+0x2c>
 800a762:	e000      	b.n	800a766 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a764:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a766:	7bfb      	ldrb	r3, [r7, #15]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	46007800 	.word	0x46007800

0800a774 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a780:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ec <RTC_ExitInitMode+0x78>)
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	4a19      	ldr	r2, [pc, #100]	@ (800a7ec <RTC_ExitInitMode+0x78>)
 800a786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a78a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a78c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ec <RTC_ExitInitMode+0x78>)
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	f003 0320 	and.w	r3, r3, #32
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10c      	bne.n	800a7b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff ff7d 	bl	800a698 <HAL_RTC_WaitForSynchro>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01e      	beq.n	800a7e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	73fb      	strb	r3, [r7, #15]
 800a7b0:	e017      	b.n	800a7e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a7b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ec <RTC_ExitInitMode+0x78>)
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	4a0d      	ldr	r2, [pc, #52]	@ (800a7ec <RTC_ExitInitMode+0x78>)
 800a7b8:	f023 0320 	bic.w	r3, r3, #32
 800a7bc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff ff6a 	bl	800a698 <HAL_RTC_WaitForSynchro>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d005      	beq.n	800a7d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2203      	movs	r2, #3
 800a7ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a7d6:	4b05      	ldr	r3, [pc, #20]	@ (800a7ec <RTC_ExitInitMode+0x78>)
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	4a04      	ldr	r2, [pc, #16]	@ (800a7ec <RTC_ExitInitMode+0x78>)
 800a7dc:	f043 0320 	orr.w	r3, r3, #32
 800a7e0:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	46007800 	.word	0x46007800

0800a7f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800a802:	e005      	b.n	800a810 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3301      	adds	r3, #1
 800a808:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800a80a:	7afb      	ldrb	r3, [r7, #11]
 800a80c:	3b0a      	subs	r3, #10
 800a80e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	2b09      	cmp	r3, #9
 800a814:	d8f6      	bhi.n	800a804 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	011b      	lsls	r3, r3, #4
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	7afb      	ldrb	r3, [r7, #11]
 800a820:	4313      	orrs	r3, r2
 800a822:	b2db      	uxtb	r3, r3
}
 800a824:	4618      	mov	r0, r3
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	4910      	ldr	r1, [pc, #64]	@ (800a884 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a844:	4313      	orrs	r3, r2
 800a846:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	431a      	orrs	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	490c      	ldr	r1, [pc, #48]	@ (800a888 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a858:	4313      	orrs	r3, r2
 800a85a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800a85c:	4b0a      	ldr	r3, [pc, #40]	@ (800a888 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	6919      	ldr	r1, [r3, #16]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	041b      	lsls	r3, r3, #16
 800a86e:	430b      	orrs	r3, r1
 800a870:	4905      	ldr	r1, [pc, #20]	@ (800a888 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a872:	4313      	orrs	r3, r2
 800a874:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	46007800 	.word	0x46007800
 800a888:	46007c00 	.word	0x46007c00

0800a88c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08a      	sub	sp, #40	@ 0x28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e1ce      	b.n	800ac3c <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d10e      	bne.n	800a8c6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a83      	ldr	r2, [pc, #524]	@ (800aabc <HAL_SAI_Init+0x230>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d107      	bne.n	800a8c2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d103      	bne.n	800a8c2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e1ba      	b.n	800ac3c <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7f7 ff06 	bl	80026ec <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f9b7 	bl	800ac54 <SAI_Disable>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e1a5      	b.n	800ac3c <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d00c      	beq.n	800a91a <HAL_SAI_Init+0x8e>
 800a900:	2b02      	cmp	r3, #2
 800a902:	d80d      	bhi.n	800a920 <HAL_SAI_Init+0x94>
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <HAL_SAI_Init+0x82>
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d003      	beq.n	800a914 <HAL_SAI_Init+0x88>
 800a90c:	e008      	b.n	800a920 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a912:	e008      	b.n	800a926 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a914:	2310      	movs	r3, #16
 800a916:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a918:	e005      	b.n	800a926 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a91a:	2320      	movs	r3, #32
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a91e:	e002      	b.n	800a926 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a924:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d81d      	bhi.n	800a96a <HAL_SAI_Init+0xde>
 800a92e:	a201      	add	r2, pc, #4	@ (adr r2, 800a934 <HAL_SAI_Init+0xa8>)
 800a930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a94b 	.word	0x0800a94b
 800a93c:	0800a953 	.word	0x0800a953
 800a940:	0800a95b 	.word	0x0800a95b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	61fb      	str	r3, [r7, #28]
      break;
 800a948:	e012      	b.n	800a970 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a94a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a94e:	61fb      	str	r3, [r7, #28]
      break;
 800a950:	e00e      	b.n	800a970 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a952:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a956:	61fb      	str	r3, [r7, #28]
      break;
 800a958:	e00a      	b.n	800a970 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a95a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a95e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	f043 0301 	orr.w	r3, r3, #1
 800a966:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a968:	e002      	b.n	800a970 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61fb      	str	r3, [r7, #28]
      break;
 800a96e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a51      	ldr	r2, [pc, #324]	@ (800aabc <HAL_SAI_Init+0x230>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d004      	beq.n	800a984 <HAL_SAI_Init+0xf8>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a50      	ldr	r2, [pc, #320]	@ (800aac0 <HAL_SAI_Init+0x234>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d103      	bne.n	800a98c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800a984:	4a4f      	ldr	r2, [pc, #316]	@ (800aac4 <HAL_SAI_Init+0x238>)
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	e002      	b.n	800a992 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a98c:	4a4e      	ldr	r2, [pc, #312]	@ (800aac8 <HAL_SAI_Init+0x23c>)
 800a98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a990:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d077      	beq.n	800aa8a <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a47      	ldr	r2, [pc, #284]	@ (800aabc <HAL_SAI_Init+0x230>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d004      	beq.n	800a9ae <HAL_SAI_Init+0x122>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a45      	ldr	r2, [pc, #276]	@ (800aac0 <HAL_SAI_Init+0x234>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d107      	bne.n	800a9be <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a9ae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a9b2:	f04f 0100 	mov.w	r1, #0
 800a9b6:	f7fe f91f 	bl	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9ba:	61b8      	str	r0, [r7, #24]
 800a9bc:	e006      	b.n	800a9cc <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a9be:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a9c2:	f04f 0100 	mov.w	r1, #0
 800a9c6:	f7fe f917 	bl	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9ca:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a9d4:	d120      	bne.n	800aa18 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	d102      	bne.n	800a9e4 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a9de:	2340      	movs	r3, #64	@ 0x40
 800a9e0:	613b      	str	r3, [r7, #16]
 800a9e2:	e00a      	b.n	800a9fa <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d103      	bne.n	800a9f4 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a9ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9f0:	613b      	str	r3, [r7, #16]
 800a9f2:	e002      	b.n	800a9fa <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a9fa:	69ba      	ldr	r2, [r7, #24]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	4619      	mov	r1, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	fb02 f303 	mul.w	r3, r2, r3
 800aa10:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	e017      	b.n	800aa48 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa20:	d101      	bne.n	800aa26 <HAL_SAI_Init+0x19a>
 800aa22:	2302      	movs	r3, #2
 800aa24:	e000      	b.n	800aa28 <HAL_SAI_Init+0x19c>
 800aa26:	2301      	movs	r3, #1
 800aa28:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	4619      	mov	r1, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	fb02 f303 	mul.w	r3, r2, r3
 800aa40:	021b      	lsls	r3, r3, #8
 800aa42:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa46:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	4a20      	ldr	r2, [pc, #128]	@ (800aacc <HAL_SAI_Init+0x240>)
 800aa4c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa50:	08da      	lsrs	r2, r3, #3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800aa56:	6979      	ldr	r1, [r7, #20]
 800aa58:	4b1c      	ldr	r3, [pc, #112]	@ (800aacc <HAL_SAI_Init+0x240>)
 800aa5a:	fba3 2301 	umull	r2, r3, r3, r1
 800aa5e:	08da      	lsrs	r2, r3, #3
 800aa60:	4613      	mov	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	1aca      	subs	r2, r1, r3
 800aa6a:	2a08      	cmp	r2, #8
 800aa6c:	d904      	bls.n	800aa78 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	d104      	bne.n	800aa8a <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa84:	085a      	lsrs	r2, r3, #1
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <HAL_SAI_Init+0x20e>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d109      	bne.n	800aaae <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d101      	bne.n	800aaa6 <HAL_SAI_Init+0x21a>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e001      	b.n	800aaaa <HAL_SAI_Init+0x21e>
 800aaa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aaaa:	623b      	str	r3, [r7, #32]
 800aaac:	e012      	b.n	800aad4 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d10c      	bne.n	800aad0 <HAL_SAI_Init+0x244>
 800aab6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aaba:	e00a      	b.n	800aad2 <HAL_SAI_Init+0x246>
 800aabc:	40015404 	.word	0x40015404
 800aac0:	40015424 	.word	0x40015424
 800aac4:	40015400 	.word	0x40015400
 800aac8:	40015800 	.word	0x40015800
 800aacc:	cccccccd 	.word	0xcccccccd
 800aad0:	2300      	movs	r3, #0
 800aad2:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6819      	ldr	r1, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	4b59      	ldr	r3, [pc, #356]	@ (800ac44 <HAL_SAI_Init+0x3b8>)
 800aae0:	400b      	ands	r3, r1
 800aae2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6819      	ldr	r1, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aaf8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aafe:	431a      	orrs	r2, r3
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800ab0c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab18:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	051b      	lsls	r3, r3, #20
 800ab20:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab26:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	6812      	ldr	r2, [r2, #0]
 800ab40:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ab44:	f023 030f 	bic.w	r3, r3, #15
 800ab48:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6859      	ldr	r1, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	69da      	ldr	r2, [r3, #28]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6899      	ldr	r1, [r3, #8]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	4b35      	ldr	r3, [pc, #212]	@ (800ac48 <HAL_SAI_Init+0x3bc>)
 800ab74:	400b      	ands	r3, r1
 800ab76:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6899      	ldr	r1, [r3, #8]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab82:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ab88:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800ab8e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800ab94:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ab9e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	430a      	orrs	r2, r1
 800aba6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68d9      	ldr	r1, [r3, #12]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800abb6:	400b      	ands	r3, r1
 800abb8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68d9      	ldr	r1, [r3, #12]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abc8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abce:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800abd0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd6:	3b01      	subs	r3, #1
 800abd8:	021b      	lsls	r3, r3, #8
 800abda:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	430a      	orrs	r2, r1
 800abe2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a18      	ldr	r2, [pc, #96]	@ (800ac4c <HAL_SAI_Init+0x3c0>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d119      	bne.n	800ac22 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800abee:	4b18      	ldr	r3, [pc, #96]	@ (800ac50 <HAL_SAI_Init+0x3c4>)
 800abf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abf2:	4a17      	ldr	r2, [pc, #92]	@ (800ac50 <HAL_SAI_Init+0x3c4>)
 800abf4:	f023 0301 	bic.w	r3, r3, #1
 800abf8:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d10e      	bne.n	800ac22 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ac10:	490f      	ldr	r1, [pc, #60]	@ (800ac50 <HAL_SAI_Init+0x3c4>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800ac16:	4b0e      	ldr	r3, [pc, #56]	@ (800ac50 <HAL_SAI_Init+0x3c4>)
 800ac18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1a:	4a0d      	ldr	r2, [pc, #52]	@ (800ac50 <HAL_SAI_Init+0x3c4>)
 800ac1c:	f043 0301 	orr.w	r3, r3, #1
 800ac20:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3728      	adds	r7, #40	@ 0x28
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	f005c010 	.word	0xf005c010
 800ac48:	fff88000 	.word	0xfff88000
 800ac4c:	40015404 	.word	0x40015404
 800ac50:	40015400 	.word	0x40015400

0800ac54 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ac5c:	4b18      	ldr	r3, [pc, #96]	@ (800acc0 <SAI_Disable+0x6c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a18      	ldr	r2, [pc, #96]	@ (800acc4 <SAI_Disable+0x70>)
 800ac62:	fba2 2303 	umull	r2, r3, r2, r3
 800ac66:	0b1b      	lsrs	r3, r3, #12
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ac7e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10a      	bne.n	800ac9c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ac96:	2303      	movs	r3, #3
 800ac98:	72fb      	strb	r3, [r7, #11]
      break;
 800ac9a:	e009      	b.n	800acb0 <SAI_Disable+0x5c>
    }
    count--;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e7      	bne.n	800ac80 <SAI_Disable+0x2c>

  return status;
 800acb0:	7afb      	ldrb	r3, [r7, #11]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	20000000 	.word	0x20000000
 800acc4:	95cbec1b 	.word	0x95cbec1b

0800acc8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e0fb      	b.n	800aed2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a7f      	ldr	r2, [pc, #508]	@ (800aedc <HAL_SPI_Init+0x214>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d004      	beq.n	800acee <HAL_SPI_Init+0x26>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a7d      	ldr	r2, [pc, #500]	@ (800aee0 <HAL_SPI_Init+0x218>)
 800acea:	4293      	cmp	r3, r2
 800acec:	e000      	b.n	800acf0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800acee:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a78      	ldr	r2, [pc, #480]	@ (800aedc <HAL_SPI_Init+0x214>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d004      	beq.n	800ad0a <HAL_SPI_Init+0x42>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a76      	ldr	r2, [pc, #472]	@ (800aee0 <HAL_SPI_Init+0x218>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d105      	bne.n	800ad16 <HAL_SPI_Init+0x4e>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	2b0f      	cmp	r3, #15
 800ad10:	d901      	bls.n	800ad16 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e0dd      	b.n	800aed2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fbac 	bl	800b474 <SPI_GetPacketSize>
 800ad1c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a6e      	ldr	r2, [pc, #440]	@ (800aedc <HAL_SPI_Init+0x214>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d004      	beq.n	800ad32 <HAL_SPI_Init+0x6a>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a6c      	ldr	r2, [pc, #432]	@ (800aee0 <HAL_SPI_Init+0x218>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d102      	bne.n	800ad38 <HAL_SPI_Init+0x70>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b08      	cmp	r3, #8
 800ad36:	d816      	bhi.n	800ad66 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad3c:	4a69      	ldr	r2, [pc, #420]	@ (800aee4 <HAL_SPI_Init+0x21c>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d00e      	beq.n	800ad60 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a68      	ldr	r2, [pc, #416]	@ (800aee8 <HAL_SPI_Init+0x220>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d009      	beq.n	800ad60 <HAL_SPI_Init+0x98>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a66      	ldr	r2, [pc, #408]	@ (800aeec <HAL_SPI_Init+0x224>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d004      	beq.n	800ad60 <HAL_SPI_Init+0x98>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a65      	ldr	r2, [pc, #404]	@ (800aef0 <HAL_SPI_Init+0x228>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d104      	bne.n	800ad6a <HAL_SPI_Init+0xa2>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b10      	cmp	r3, #16
 800ad64:	d901      	bls.n	800ad6a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e0b3      	b.n	800aed2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7f7 f8f4 	bl	8001f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 0201 	bic.w	r2, r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ada6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adb0:	d119      	bne.n	800ade6 <HAL_SPI_Init+0x11e>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800adba:	d103      	bne.n	800adc4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d008      	beq.n	800add6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10c      	bne.n	800ade6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800add0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800add4:	d107      	bne.n	800ade6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ade4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00f      	beq.n	800ae12 <HAL_SPI_Init+0x14a>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	2b06      	cmp	r3, #6
 800adf8:	d90b      	bls.n	800ae12 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	e007      	b.n	800ae22 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	69da      	ldr	r2, [r3, #28]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae34:	ea42 0103 	orr.w	r1, r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68da      	ldr	r2, [r3, #12]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	430a      	orrs	r2, r1
 800ae42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae52:	431a      	orrs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	431a      	orrs	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	431a      	orrs	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae82:	431a      	orrs	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae88:	431a      	orrs	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae8e:	ea42 0103 	orr.w	r1, r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	46002000 	.word	0x46002000
 800aee0:	56002000 	.word	0x56002000
 800aee4:	40013000 	.word	0x40013000
 800aee8:	50013000 	.word	0x50013000
 800aeec:	40003800 	.word	0x40003800
 800aef0:	50003800 	.word	0x50003800

0800aef4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08a      	sub	sp, #40	@ 0x28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800af0c:	6a3a      	ldr	r2, [r7, #32]
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	4013      	ands	r3, r2
 800af12:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800af26:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3330      	adds	r3, #48	@ 0x30
 800af2e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af36:	2b00      	cmp	r3, #0
 800af38:	d010      	beq.n	800af5c <HAL_SPI_IRQHandler+0x68>
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	f003 0308 	and.w	r3, r3, #8
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00b      	beq.n	800af5c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af52:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f9c9 	bl	800b2ec <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800af5a:	e19a      	b.n	800b292 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d113      	bne.n	800af8e <HAL_SPI_IRQHandler+0x9a>
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10e      	bne.n	800af8e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	4798      	blx	r3
    hspi->RxISR(hspi);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
    handled = 1UL;
 800af8a:	2301      	movs	r3, #1
 800af8c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10f      	bne.n	800afb8 <HAL_SPI_IRQHandler+0xc4>
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	f003 0301 	and.w	r3, r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00a      	beq.n	800afb8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	4798      	blx	r3
    handled = 1UL;
 800afb4:	2301      	movs	r3, #1
 800afb6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	f003 0320 	and.w	r3, r3, #32
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10f      	bne.n	800afe2 <HAL_SPI_IRQHandler+0xee>
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	f003 0302 	and.w	r3, r3, #2
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00a      	beq.n	800afe2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d105      	bne.n	800afe2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3
    handled = 1UL;
 800afde:	2301      	movs	r3, #1
 800afe0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800afe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f040 814f 	bne.w	800b288 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	f003 0308 	and.w	r3, r3, #8
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 808b 	beq.w	800b10c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	699a      	ldr	r2, [r3, #24]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f042 0208 	orr.w	r2, r2, #8
 800b004:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	699a      	ldr	r2, [r3, #24]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f042 0210 	orr.w	r2, r2, #16
 800b014:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	699a      	ldr	r2, [r3, #24]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b024:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	691a      	ldr	r2, [r3, #16]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f022 0208 	bic.w	r2, r2, #8
 800b034:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d13d      	bne.n	800b0c0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b044:	e036      	b.n	800b0b4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	2b0f      	cmp	r3, #15
 800b04c:	d90b      	bls.n	800b066 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b056:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b058:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b05e:	1d1a      	adds	r2, r3, #4
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b064:	e01d      	b.n	800b0a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	2b07      	cmp	r3, #7
 800b06c:	d90b      	bls.n	800b086 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	8812      	ldrh	r2, [r2, #0]
 800b076:	b292      	uxth	r2, r2
 800b078:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b07e:	1c9a      	adds	r2, r3, #2
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b084:	e00d      	b.n	800b0a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b092:	7812      	ldrb	r2, [r2, #0]
 800b094:	b2d2      	uxtb	r2, r2
 800b096:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1c2      	bne.n	800b046 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f937 	bl	800b334 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f8fd 	bl	800b2d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b0de:	e0d8      	b.n	800b292 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b0e0:	7cfb      	ldrb	r3, [r7, #19]
 800b0e2:	2b05      	cmp	r3, #5
 800b0e4:	d103      	bne.n	800b0ee <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f8ec 	bl	800b2c4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b0ec:	e0ce      	b.n	800b28c <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b0ee:	7cfb      	ldrb	r3, [r7, #19]
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	d103      	bne.n	800b0fc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f8db 	bl	800b2b0 <HAL_SPI_RxCpltCallback>
    return;
 800b0fa:	e0c7      	b.n	800b28c <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b0fc:	7cfb      	ldrb	r3, [r7, #19]
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	f040 80c4 	bne.w	800b28c <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f8c9 	bl	800b29c <HAL_SPI_TxCpltCallback>
    return;
 800b10a:	e0bf      	b.n	800b28c <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 80bd 	beq.w	800b292 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00f      	beq.n	800b142 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b128:	f043 0204 	orr.w	r2, r3, #4
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	699a      	ldr	r2, [r3, #24]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b140:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00f      	beq.n	800b16c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b152:	f043 0201 	orr.w	r2, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	699a      	ldr	r2, [r3, #24]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b16a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00f      	beq.n	800b196 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b17c:	f043 0208 	orr.w	r2, r3, #8
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	699a      	ldr	r2, [r3, #24]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b194:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	f003 0320 	and.w	r3, r3, #32
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00f      	beq.n	800b1c0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0220 	orr.w	r2, r2, #32
 800b1be:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d062      	beq.n	800b290 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f022 0201 	bic.w	r2, r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	6812      	ldr	r2, [r2, #0]
 800b1e4:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800b1e8:	f023 0303 	bic.w	r3, r3, #3
 800b1ec:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b1f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b1f8:	d13e      	bne.n	800b278 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	689a      	ldr	r2, [r3, #8]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b208:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b210:	2b00      	cmp	r3, #0
 800b212:	d015      	beq.n	800b240 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b21a:	4a1f      	ldr	r2, [pc, #124]	@ (800b298 <HAL_SPI_IRQHandler+0x3a4>)
 800b21c:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b224:	4618      	mov	r0, r3
 800b226:	f7f7 ffef 	bl	8003208 <HAL_DMA_Abort_IT>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d007      	beq.n	800b240 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b236:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b246:	2b00      	cmp	r3, #0
 800b248:	d022      	beq.n	800b290 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b250:	4a11      	ldr	r2, [pc, #68]	@ (800b298 <HAL_SPI_IRQHandler+0x3a4>)
 800b252:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7f7 ffd4 	bl	8003208 <HAL_DMA_Abort_IT>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d014      	beq.n	800b290 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b26c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b276:	e00b      	b.n	800b290 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f829 	bl	800b2d8 <HAL_SPI_ErrorCallback>
    return;
 800b286:	e003      	b.n	800b290 <HAL_SPI_IRQHandler+0x39c>
    return;
 800b288:	bf00      	nop
 800b28a:	e002      	b.n	800b292 <HAL_SPI_IRQHandler+0x39e>
    return;
 800b28c:	bf00      	nop
 800b28e:	e000      	b.n	800b292 <HAL_SPI_IRQHandler+0x39e>
    return;
 800b290:	bf00      	nop
  }
}
 800b292:	3728      	adds	r7, #40	@ 0x28
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	0800b301 	.word	0x0800b301

0800b29c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b30c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2200      	movs	r2, #0
 800b312:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7ff ffd6 	bl	800b2d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b32c:	bf00      	nop
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	699a      	ldr	r2, [r3, #24]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f042 0208 	orr.w	r2, r2, #8
 800b352:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	699a      	ldr	r2, [r3, #24]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f042 0210 	orr.w	r2, r2, #16
 800b362:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f022 0201 	bic.w	r2, r2, #1
 800b372:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	6812      	ldr	r2, [r2, #0]
 800b37e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800b382:	f023 0303 	bic.w	r3, r3, #3
 800b386:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689a      	ldr	r2, [r3, #8]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b396:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	d014      	beq.n	800b3ce <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f003 0320 	and.w	r3, r3, #32
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00f      	beq.n	800b3ce <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	699a      	ldr	r2, [r3, #24]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f042 0220 	orr.w	r2, r2, #32
 800b3cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d014      	beq.n	800b404 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00f      	beq.n	800b404 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3ea:	f043 0204 	orr.w	r2, r3, #4
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	699a      	ldr	r2, [r3, #24]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b402:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00f      	beq.n	800b42e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b414:	f043 0201 	orr.w	r2, r3, #1
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	699a      	ldr	r2, [r3, #24]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b42c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00f      	beq.n	800b458 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b43e:	f043 0208 	orr.w	r2, r3, #8
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	699a      	ldr	r2, [r3, #24]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b456:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800b468:	bf00      	nop
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b480:	095b      	lsrs	r3, r3, #5
 800b482:	3301      	adds	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	3301      	adds	r3, #1
 800b48c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	3307      	adds	r3, #7
 800b492:	08db      	lsrs	r3, r3, #3
 800b494:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b083      	sub	sp, #12
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d12e      	bne.n	800b51e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	e028      	b.n	800b520 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f022 0201 	bic.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800b4fa:	ea42 0103 	orr.w	r1, r2, r3
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	e000      	b.n	800b520 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
  }
}
 800b520:	4618      	mov	r0, r3
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e049      	b.n	800b5d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d106      	bne.n	800b558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7f6 ff38 	bl	80023c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2202      	movs	r2, #2
 800b55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3304      	adds	r3, #4
 800b568:	4619      	mov	r1, r3
 800b56a:	4610      	mov	r0, r2
 800b56c:	f000 fb5a 	bl	800bc24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d001      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e072      	b.n	800b6da <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f042 0201 	orr.w	r2, r2, #1
 800b60a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a35      	ldr	r2, [pc, #212]	@ (800b6e8 <HAL_TIM_Base_Start_IT+0x10c>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d040      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a34      	ldr	r2, [pc, #208]	@ (800b6ec <HAL_TIM_Base_Start_IT+0x110>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d03b      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b628:	d036      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b632:	d031      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a2d      	ldr	r2, [pc, #180]	@ (800b6f0 <HAL_TIM_Base_Start_IT+0x114>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d02c      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a2c      	ldr	r2, [pc, #176]	@ (800b6f4 <HAL_TIM_Base_Start_IT+0x118>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d027      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a2a      	ldr	r2, [pc, #168]	@ (800b6f8 <HAL_TIM_Base_Start_IT+0x11c>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d022      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a29      	ldr	r2, [pc, #164]	@ (800b6fc <HAL_TIM_Base_Start_IT+0x120>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d01d      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a27      	ldr	r2, [pc, #156]	@ (800b700 <HAL_TIM_Base_Start_IT+0x124>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d018      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a26      	ldr	r2, [pc, #152]	@ (800b704 <HAL_TIM_Base_Start_IT+0x128>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d013      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a24      	ldr	r2, [pc, #144]	@ (800b708 <HAL_TIM_Base_Start_IT+0x12c>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d00e      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a23      	ldr	r2, [pc, #140]	@ (800b70c <HAL_TIM_Base_Start_IT+0x130>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d009      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a21      	ldr	r2, [pc, #132]	@ (800b710 <HAL_TIM_Base_Start_IT+0x134>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d004      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0xbc>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a20      	ldr	r2, [pc, #128]	@ (800b714 <HAL_TIM_Base_Start_IT+0x138>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d115      	bne.n	800b6c4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	689a      	ldr	r2, [r3, #8]
 800b69e:	4b1e      	ldr	r3, [pc, #120]	@ (800b718 <HAL_TIM_Base_Start_IT+0x13c>)
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b06      	cmp	r3, #6
 800b6a8:	d015      	beq.n	800b6d6 <HAL_TIM_Base_Start_IT+0xfa>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6b0:	d011      	beq.n	800b6d6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f042 0201 	orr.w	r2, r2, #1
 800b6c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6c2:	e008      	b.n	800b6d6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f042 0201 	orr.w	r2, r2, #1
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e000      	b.n	800b6d8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	40012c00 	.word	0x40012c00
 800b6ec:	50012c00 	.word	0x50012c00
 800b6f0:	40000400 	.word	0x40000400
 800b6f4:	50000400 	.word	0x50000400
 800b6f8:	40000800 	.word	0x40000800
 800b6fc:	50000800 	.word	0x50000800
 800b700:	40000c00 	.word	0x40000c00
 800b704:	50000c00 	.word	0x50000c00
 800b708:	40013400 	.word	0x40013400
 800b70c:	50013400 	.word	0x50013400
 800b710:	40014000 	.word	0x40014000
 800b714:	50014000 	.word	0x50014000
 800b718:	00010007 	.word	0x00010007

0800b71c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d020      	beq.n	800b780 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f003 0302 	and.w	r3, r3, #2
 800b744:	2b00      	cmp	r3, #0
 800b746:	d01b      	beq.n	800b780 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f06f 0202 	mvn.w	r2, #2
 800b750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fa3e 	bl	800bbe8 <HAL_TIM_IC_CaptureCallback>
 800b76c:	e005      	b.n	800b77a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fa30 	bl	800bbd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fa41 	bl	800bbfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f003 0304 	and.w	r3, r3, #4
 800b786:	2b00      	cmp	r3, #0
 800b788:	d020      	beq.n	800b7cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b00      	cmp	r3, #0
 800b792:	d01b      	beq.n	800b7cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f06f 0204 	mvn.w	r2, #4
 800b79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fa18 	bl	800bbe8 <HAL_TIM_IC_CaptureCallback>
 800b7b8:	e005      	b.n	800b7c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fa0a 	bl	800bbd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fa1b 	bl	800bbfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	f003 0308 	and.w	r3, r3, #8
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d020      	beq.n	800b818 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f003 0308 	and.w	r3, r3, #8
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d01b      	beq.n	800b818 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f06f 0208 	mvn.w	r2, #8
 800b7e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2204      	movs	r2, #4
 800b7ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	f003 0303 	and.w	r3, r3, #3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f9f2 	bl	800bbe8 <HAL_TIM_IC_CaptureCallback>
 800b804:	e005      	b.n	800b812 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f9e4 	bl	800bbd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f9f5 	bl	800bbfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f003 0310 	and.w	r3, r3, #16
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d020      	beq.n	800b864 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f003 0310 	and.w	r3, r3, #16
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d01b      	beq.n	800b864 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f06f 0210 	mvn.w	r2, #16
 800b834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2208      	movs	r2, #8
 800b83a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f9cc 	bl	800bbe8 <HAL_TIM_IC_CaptureCallback>
 800b850:	e005      	b.n	800b85e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 f9be 	bl	800bbd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f9cf 	bl	800bbfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00c      	beq.n	800b888 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d007      	beq.n	800b888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f06f 0201 	mvn.w	r2, #1
 800b880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f99c 	bl	800bbc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d104      	bne.n	800b89c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00c      	beq.n	800b8b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d007      	beq.n	800b8b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b8ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fc25 	bl	800c100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00c      	beq.n	800b8da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d007      	beq.n	800b8da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b8d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fc1d 	bl	800c114 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00c      	beq.n	800b8fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d007      	beq.n	800b8fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f989 	bl	800bc10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f003 0320 	and.w	r3, r3, #32
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00c      	beq.n	800b922 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f003 0320 	and.w	r3, r3, #32
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d007      	beq.n	800b922 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f06f 0220 	mvn.w	r2, #32
 800b91a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fbe5 	bl	800c0ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00c      	beq.n	800b946 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d007      	beq.n	800b946 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fbf1 	bl	800c128 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00c      	beq.n	800b96a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d007      	beq.n	800b96a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fbe9 	bl	800c13c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00c      	beq.n	800b98e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d007      	beq.n	800b98e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fbe1 	bl	800c150 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00c      	beq.n	800b9b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d007      	beq.n	800b9b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fbd9 	bl	800c164 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9b2:	bf00      	nop
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <HAL_TIM_ConfigClockSource+0x1c>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e0e6      	b.n	800bba6 <HAL_TIM_ConfigClockSource+0x1ea>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b9f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b9fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a67      	ldr	r2, [pc, #412]	@ (800bbb0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	f000 80b1 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800ba18:	4a65      	ldr	r2, [pc, #404]	@ (800bbb0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	f200 80b6 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba20:	4a64      	ldr	r2, [pc, #400]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	f000 80a9 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800ba28:	4a62      	ldr	r2, [pc, #392]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	f200 80ae 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba30:	4a61      	ldr	r2, [pc, #388]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	f000 80a1 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800ba38:	4a5f      	ldr	r2, [pc, #380]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	f200 80a6 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba40:	4a5e      	ldr	r2, [pc, #376]	@ (800bbbc <HAL_TIM_ConfigClockSource+0x200>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	f000 8099 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800ba48:	4a5c      	ldr	r2, [pc, #368]	@ (800bbbc <HAL_TIM_ConfigClockSource+0x200>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	f200 809e 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba54:	f000 8091 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800ba58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba5c:	f200 8096 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba64:	f000 8089 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800ba68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba6c:	f200 808e 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba74:	d03e      	beq.n	800baf4 <HAL_TIM_ConfigClockSource+0x138>
 800ba76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba7a:	f200 8087 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba82:	f000 8086 	beq.w	800bb92 <HAL_TIM_ConfigClockSource+0x1d6>
 800ba86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba8a:	d87f      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba8c:	2b70      	cmp	r3, #112	@ 0x70
 800ba8e:	d01a      	beq.n	800bac6 <HAL_TIM_ConfigClockSource+0x10a>
 800ba90:	2b70      	cmp	r3, #112	@ 0x70
 800ba92:	d87b      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba94:	2b60      	cmp	r3, #96	@ 0x60
 800ba96:	d050      	beq.n	800bb3a <HAL_TIM_ConfigClockSource+0x17e>
 800ba98:	2b60      	cmp	r3, #96	@ 0x60
 800ba9a:	d877      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800ba9c:	2b50      	cmp	r3, #80	@ 0x50
 800ba9e:	d03c      	beq.n	800bb1a <HAL_TIM_ConfigClockSource+0x15e>
 800baa0:	2b50      	cmp	r3, #80	@ 0x50
 800baa2:	d873      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800baa4:	2b40      	cmp	r3, #64	@ 0x40
 800baa6:	d058      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x19e>
 800baa8:	2b40      	cmp	r3, #64	@ 0x40
 800baaa:	d86f      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800baac:	2b30      	cmp	r3, #48	@ 0x30
 800baae:	d064      	beq.n	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800bab0:	2b30      	cmp	r3, #48	@ 0x30
 800bab2:	d86b      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d060      	beq.n	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800bab8:	2b20      	cmp	r3, #32
 800baba:	d867      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
 800babc:	2b00      	cmp	r3, #0
 800babe:	d05c      	beq.n	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800bac0:	2b10      	cmp	r3, #16
 800bac2:	d05a      	beq.n	800bb7a <HAL_TIM_ConfigClockSource+0x1be>
 800bac4:	e062      	b.n	800bb8c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bad6:	f000 fa27 	bl	800bf28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	609a      	str	r2, [r3, #8]
      break;
 800baf2:	e04f      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb04:	f000 fa10 	bl	800bf28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689a      	ldr	r2, [r3, #8]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb16:	609a      	str	r2, [r3, #8]
      break;
 800bb18:	e03c      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb26:	461a      	mov	r2, r3
 800bb28:	f000 f982 	bl	800be30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2150      	movs	r1, #80	@ 0x50
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f9db 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800bb38:	e02c      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb46:	461a      	mov	r2, r3
 800bb48:	f000 f9a1 	bl	800be8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2160      	movs	r1, #96	@ 0x60
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 f9cb 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800bb58:	e01c      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb66:	461a      	mov	r2, r3
 800bb68:	f000 f962 	bl	800be30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2140      	movs	r1, #64	@ 0x40
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f9bb 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800bb78:	e00c      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4619      	mov	r1, r3
 800bb84:	4610      	mov	r0, r2
 800bb86:	f000 f9b2 	bl	800beee <TIM_ITRx_SetConfig>
      break;
 800bb8a:	e003      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb90:	e000      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800bb92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	00100070 	.word	0x00100070
 800bbb4:	00100040 	.word	0x00100040
 800bbb8:	00100030 	.word	0x00100030
 800bbbc:	00100020 	.word	0x00100020

0800bbc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a6e      	ldr	r2, [pc, #440]	@ (800bdf0 <TIM_Base_SetConfig+0x1cc>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d02b      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a6d      	ldr	r2, [pc, #436]	@ (800bdf4 <TIM_Base_SetConfig+0x1d0>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d027      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc4a:	d023      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc52:	d01f      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a68      	ldr	r2, [pc, #416]	@ (800bdf8 <TIM_Base_SetConfig+0x1d4>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d01b      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a67      	ldr	r2, [pc, #412]	@ (800bdfc <TIM_Base_SetConfig+0x1d8>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d017      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a66      	ldr	r2, [pc, #408]	@ (800be00 <TIM_Base_SetConfig+0x1dc>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d013      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a65      	ldr	r2, [pc, #404]	@ (800be04 <TIM_Base_SetConfig+0x1e0>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d00f      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a64      	ldr	r2, [pc, #400]	@ (800be08 <TIM_Base_SetConfig+0x1e4>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d00b      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a63      	ldr	r2, [pc, #396]	@ (800be0c <TIM_Base_SetConfig+0x1e8>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d007      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a62      	ldr	r2, [pc, #392]	@ (800be10 <TIM_Base_SetConfig+0x1ec>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d003      	beq.n	800bc94 <TIM_Base_SetConfig+0x70>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a61      	ldr	r2, [pc, #388]	@ (800be14 <TIM_Base_SetConfig+0x1f0>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d108      	bne.n	800bca6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a51      	ldr	r2, [pc, #324]	@ (800bdf0 <TIM_Base_SetConfig+0x1cc>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d043      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a50      	ldr	r2, [pc, #320]	@ (800bdf4 <TIM_Base_SetConfig+0x1d0>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d03f      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcbc:	d03b      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcc4:	d037      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a4b      	ldr	r2, [pc, #300]	@ (800bdf8 <TIM_Base_SetConfig+0x1d4>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d033      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a4a      	ldr	r2, [pc, #296]	@ (800bdfc <TIM_Base_SetConfig+0x1d8>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d02f      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a49      	ldr	r2, [pc, #292]	@ (800be00 <TIM_Base_SetConfig+0x1dc>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d02b      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a48      	ldr	r2, [pc, #288]	@ (800be04 <TIM_Base_SetConfig+0x1e0>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d027      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a47      	ldr	r2, [pc, #284]	@ (800be08 <TIM_Base_SetConfig+0x1e4>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d023      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a46      	ldr	r2, [pc, #280]	@ (800be0c <TIM_Base_SetConfig+0x1e8>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d01f      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a45      	ldr	r2, [pc, #276]	@ (800be10 <TIM_Base_SetConfig+0x1ec>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d01b      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a44      	ldr	r2, [pc, #272]	@ (800be14 <TIM_Base_SetConfig+0x1f0>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d017      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a43      	ldr	r2, [pc, #268]	@ (800be18 <TIM_Base_SetConfig+0x1f4>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d013      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a42      	ldr	r2, [pc, #264]	@ (800be1c <TIM_Base_SetConfig+0x1f8>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d00f      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a41      	ldr	r2, [pc, #260]	@ (800be20 <TIM_Base_SetConfig+0x1fc>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d00b      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a40      	ldr	r2, [pc, #256]	@ (800be24 <TIM_Base_SetConfig+0x200>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d007      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a3f      	ldr	r2, [pc, #252]	@ (800be28 <TIM_Base_SetConfig+0x204>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d003      	beq.n	800bd36 <TIM_Base_SetConfig+0x112>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a3e      	ldr	r2, [pc, #248]	@ (800be2c <TIM_Base_SetConfig+0x208>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d108      	bne.n	800bd48 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a20      	ldr	r2, [pc, #128]	@ (800bdf0 <TIM_Base_SetConfig+0x1cc>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d023      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a1f      	ldr	r2, [pc, #124]	@ (800bdf4 <TIM_Base_SetConfig+0x1d0>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d01f      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a24      	ldr	r2, [pc, #144]	@ (800be10 <TIM_Base_SetConfig+0x1ec>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d01b      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a23      	ldr	r2, [pc, #140]	@ (800be14 <TIM_Base_SetConfig+0x1f0>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d017      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a22      	ldr	r2, [pc, #136]	@ (800be18 <TIM_Base_SetConfig+0x1f4>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d013      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a21      	ldr	r2, [pc, #132]	@ (800be1c <TIM_Base_SetConfig+0x1f8>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d00f      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a20      	ldr	r2, [pc, #128]	@ (800be20 <TIM_Base_SetConfig+0x1fc>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d00b      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a1f      	ldr	r2, [pc, #124]	@ (800be24 <TIM_Base_SetConfig+0x200>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d007      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a1e      	ldr	r2, [pc, #120]	@ (800be28 <TIM_Base_SetConfig+0x204>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d003      	beq.n	800bdbc <TIM_Base_SetConfig+0x198>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a1d      	ldr	r2, [pc, #116]	@ (800be2c <TIM_Base_SetConfig+0x208>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d103      	bne.n	800bdc4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	691a      	ldr	r2, [r3, #16]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	f003 0301 	and.w	r3, r3, #1
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d105      	bne.n	800bde2 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	f023 0201 	bic.w	r2, r3, #1
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	611a      	str	r2, [r3, #16]
  }
}
 800bde2:	bf00      	nop
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	40012c00 	.word	0x40012c00
 800bdf4:	50012c00 	.word	0x50012c00
 800bdf8:	40000400 	.word	0x40000400
 800bdfc:	50000400 	.word	0x50000400
 800be00:	40000800 	.word	0x40000800
 800be04:	50000800 	.word	0x50000800
 800be08:	40000c00 	.word	0x40000c00
 800be0c:	50000c00 	.word	0x50000c00
 800be10:	40013400 	.word	0x40013400
 800be14:	50013400 	.word	0x50013400
 800be18:	40014000 	.word	0x40014000
 800be1c:	50014000 	.word	0x50014000
 800be20:	40014400 	.word	0x40014400
 800be24:	50014400 	.word	0x50014400
 800be28:	40014800 	.word	0x40014800
 800be2c:	50014800 	.word	0x50014800

0800be30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	f023 0201 	bic.w	r2, r3, #1
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	011b      	lsls	r3, r3, #4
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	4313      	orrs	r3, r2
 800be64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f023 030a 	bic.w	r3, r3, #10
 800be6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	4313      	orrs	r3, r2
 800be74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	621a      	str	r2, [r3, #32]
}
 800be82:	bf00      	nop
 800be84:	371c      	adds	r7, #28
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be8e:	b480      	push	{r7}
 800be90:	b087      	sub	sp, #28
 800be92:	af00      	add	r7, sp, #0
 800be94:	60f8      	str	r0, [r7, #12]
 800be96:	60b9      	str	r1, [r7, #8]
 800be98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	f023 0210 	bic.w	r2, r3, #16
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800beb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	031b      	lsls	r3, r3, #12
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800beca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	011b      	lsls	r3, r3, #4
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	621a      	str	r2, [r3, #32]
}
 800bee2:	bf00      	nop
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bf04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	f043 0307 	orr.w	r3, r3, #7
 800bf14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	609a      	str	r2, [r3, #8]
}
 800bf1c:	bf00      	nop
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	021a      	lsls	r2, r3, #8
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	431a      	orrs	r2, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	697a      	ldr	r2, [r7, #20]
 800bf5a:	609a      	str	r2, [r3, #8]
}
 800bf5c:	bf00      	nop
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d101      	bne.n	800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e097      	b.n	800c0b0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a45      	ldr	r2, [pc, #276]	@ (800c0bc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d00e      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a44      	ldr	r2, [pc, #272]	@ (800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d009      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a42      	ldr	r2, [pc, #264]	@ (800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d004      	beq.n	800bfc8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a41      	ldr	r2, [pc, #260]	@ (800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d108      	bne.n	800bfda <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bfce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bfe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a2f      	ldr	r2, [pc, #188]	@ (800c0bc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d040      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a2e      	ldr	r2, [pc, #184]	@ (800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d03b      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c014:	d036      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c01e:	d031      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a29      	ldr	r2, [pc, #164]	@ (800c0cc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d02c      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a28      	ldr	r2, [pc, #160]	@ (800c0d0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d027      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a26      	ldr	r2, [pc, #152]	@ (800c0d4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d022      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a25      	ldr	r2, [pc, #148]	@ (800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d01d      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a23      	ldr	r2, [pc, #140]	@ (800c0dc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d018      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a22      	ldr	r2, [pc, #136]	@ (800c0e0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d013      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a18      	ldr	r2, [pc, #96]	@ (800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d00e      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a17      	ldr	r2, [pc, #92]	@ (800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d009      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a1b      	ldr	r2, [pc, #108]	@ (800c0e4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d004      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a1a      	ldr	r2, [pc, #104]	@ (800c0e8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d10c      	bne.n	800c09e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c08a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	4313      	orrs	r3, r2
 800c094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	40012c00 	.word	0x40012c00
 800c0c0:	50012c00 	.word	0x50012c00
 800c0c4:	40013400 	.word	0x40013400
 800c0c8:	50013400 	.word	0x50013400
 800c0cc:	40000400 	.word	0x40000400
 800c0d0:	50000400 	.word	0x50000400
 800c0d4:	40000800 	.word	0x40000800
 800c0d8:	50000800 	.word	0x50000800
 800c0dc:	40000c00 	.word	0x40000c00
 800c0e0:	50000c00 	.word	0x50000c00
 800c0e4:	40014000 	.word	0x40014000
 800c0e8:	50014000 	.word	0x50014000

0800c0ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e042      	b.n	800c210 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c190:	2b00      	cmp	r3, #0
 800c192:	d106      	bne.n	800c1a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7f6 f963 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2224      	movs	r2, #36	@ 0x24
 800c1a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f022 0201 	bic.w	r2, r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d002      	beq.n	800c1c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f9ca 	bl	800c55c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f825 	bl	800c218 <UART_SetConfig>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d101      	bne.n	800c1d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e01b      	b.n	800c210 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	685a      	ldr	r2, [r3, #4]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f042 0201 	orr.w	r2, r2, #1
 800c206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fa49 	bl	800c6a0 <UART_CheckIdleState>
 800c20e:	4603      	mov	r3, r0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c21c:	b094      	sub	sp, #80	@ 0x50
 800c21e:	af00      	add	r7, sp, #0
 800c220:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	4b7e      	ldr	r3, [pc, #504]	@ (800c428 <UART_SetConfig+0x210>)
 800c22e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c232:	689a      	ldr	r2, [r3, #8]
 800c234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	431a      	orrs	r2, r3
 800c23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	431a      	orrs	r2, r3
 800c240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c242:	69db      	ldr	r3, [r3, #28]
 800c244:	4313      	orrs	r3, r2
 800c246:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4977      	ldr	r1, [pc, #476]	@ (800c42c <UART_SetConfig+0x214>)
 800c250:	4019      	ands	r1, r3
 800c252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c258:	430b      	orrs	r3, r1
 800c25a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c268:	68d9      	ldr	r1, [r3, #12]
 800c26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	ea40 0301 	orr.w	r3, r0, r1
 800c272:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	4b6a      	ldr	r3, [pc, #424]	@ (800c428 <UART_SetConfig+0x210>)
 800c280:	429a      	cmp	r2, r3
 800c282:	d009      	beq.n	800c298 <UART_SetConfig+0x80>
 800c284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	4b69      	ldr	r3, [pc, #420]	@ (800c430 <UART_SetConfig+0x218>)
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d004      	beq.n	800c298 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c290:	6a1a      	ldr	r2, [r3, #32]
 800c292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c294:	4313      	orrs	r3, r2
 800c296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c2a2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2ac:	430b      	orrs	r3, r1
 800c2ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b6:	f023 000f 	bic.w	r0, r3, #15
 800c2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	ea40 0301 	orr.w	r3, r0, r1
 800c2c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	4b59      	ldr	r3, [pc, #356]	@ (800c434 <UART_SetConfig+0x21c>)
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d102      	bne.n	800c2d8 <UART_SetConfig+0xc0>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2d6:	e029      	b.n	800c32c <UART_SetConfig+0x114>
 800c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	4b56      	ldr	r3, [pc, #344]	@ (800c438 <UART_SetConfig+0x220>)
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d102      	bne.n	800c2e8 <UART_SetConfig+0xd0>
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2e6:	e021      	b.n	800c32c <UART_SetConfig+0x114>
 800c2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	4b53      	ldr	r3, [pc, #332]	@ (800c43c <UART_SetConfig+0x224>)
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d102      	bne.n	800c2f8 <UART_SetConfig+0xe0>
 800c2f2:	2304      	movs	r3, #4
 800c2f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2f6:	e019      	b.n	800c32c <UART_SetConfig+0x114>
 800c2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	4b50      	ldr	r3, [pc, #320]	@ (800c440 <UART_SetConfig+0x228>)
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d102      	bne.n	800c308 <UART_SetConfig+0xf0>
 800c302:	2308      	movs	r3, #8
 800c304:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c306:	e011      	b.n	800c32c <UART_SetConfig+0x114>
 800c308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	4b4d      	ldr	r3, [pc, #308]	@ (800c444 <UART_SetConfig+0x22c>)
 800c30e:	429a      	cmp	r2, r3
 800c310:	d102      	bne.n	800c318 <UART_SetConfig+0x100>
 800c312:	2310      	movs	r3, #16
 800c314:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c316:	e009      	b.n	800c32c <UART_SetConfig+0x114>
 800c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	4b42      	ldr	r3, [pc, #264]	@ (800c428 <UART_SetConfig+0x210>)
 800c31e:	429a      	cmp	r2, r3
 800c320:	d102      	bne.n	800c328 <UART_SetConfig+0x110>
 800c322:	2320      	movs	r3, #32
 800c324:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c326:	e001      	b.n	800c32c <UART_SetConfig+0x114>
 800c328:	2300      	movs	r3, #0
 800c32a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	4b3d      	ldr	r3, [pc, #244]	@ (800c428 <UART_SetConfig+0x210>)
 800c332:	429a      	cmp	r2, r3
 800c334:	d005      	beq.n	800c342 <UART_SetConfig+0x12a>
 800c336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	4b3d      	ldr	r3, [pc, #244]	@ (800c430 <UART_SetConfig+0x218>)
 800c33c:	429a      	cmp	r2, r3
 800c33e:	f040 8085 	bne.w	800c44c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c344:	2200      	movs	r2, #0
 800c346:	623b      	str	r3, [r7, #32]
 800c348:	627a      	str	r2, [r7, #36]	@ 0x24
 800c34a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c34e:	f7fc fc53 	bl	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c352:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c356:	2b00      	cmp	r3, #0
 800c358:	f000 80e8 	beq.w	800c52c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c360:	4a39      	ldr	r2, [pc, #228]	@ (800c448 <UART_SetConfig+0x230>)
 800c362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c366:	461a      	mov	r2, r3
 800c368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c36a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c36e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	4613      	mov	r3, r2
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	4413      	add	r3, r2
 800c37a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d305      	bcc.n	800c38c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c388:	429a      	cmp	r2, r3
 800c38a:	d903      	bls.n	800c394 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c392:	e048      	b.n	800c426 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c396:	2200      	movs	r2, #0
 800c398:	61bb      	str	r3, [r7, #24]
 800c39a:	61fa      	str	r2, [r7, #28]
 800c39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a0:	4a29      	ldr	r2, [pc, #164]	@ (800c448 <UART_SetConfig+0x230>)
 800c3a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	613b      	str	r3, [r7, #16]
 800c3ac:	617a      	str	r2, [r7, #20]
 800c3ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c3b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c3b6:	f7f3 ff5f 	bl	8000278 <__aeabi_uldivmod>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4610      	mov	r0, r2
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	f04f 0200 	mov.w	r2, #0
 800c3c6:	f04f 0300 	mov.w	r3, #0
 800c3ca:	020b      	lsls	r3, r1, #8
 800c3cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c3d0:	0202      	lsls	r2, r0, #8
 800c3d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3d4:	6849      	ldr	r1, [r1, #4]
 800c3d6:	0849      	lsrs	r1, r1, #1
 800c3d8:	2000      	movs	r0, #0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	4605      	mov	r5, r0
 800c3de:	eb12 0804 	adds.w	r8, r2, r4
 800c3e2:	eb43 0905 	adc.w	r9, r3, r5
 800c3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	60bb      	str	r3, [r7, #8]
 800c3ee:	60fa      	str	r2, [r7, #12]
 800c3f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	f7f3 ff3e 	bl	8000278 <__aeabi_uldivmod>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	4613      	mov	r3, r2
 800c402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c40a:	d308      	bcc.n	800c41e <UART_SetConfig+0x206>
 800c40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c40e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c412:	d204      	bcs.n	800c41e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800c414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c41a:	60da      	str	r2, [r3, #12]
 800c41c:	e003      	b.n	800c426 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c424:	e082      	b.n	800c52c <UART_SetConfig+0x314>
 800c426:	e081      	b.n	800c52c <UART_SetConfig+0x314>
 800c428:	46002400 	.word	0x46002400
 800c42c:	cfff69f3 	.word	0xcfff69f3
 800c430:	56002400 	.word	0x56002400
 800c434:	40013800 	.word	0x40013800
 800c438:	40004400 	.word	0x40004400
 800c43c:	40004800 	.word	0x40004800
 800c440:	40004c00 	.word	0x40004c00
 800c444:	40005000 	.word	0x40005000
 800c448:	0800d248 	.word	0x0800d248
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c44e:	69db      	ldr	r3, [r3, #28]
 800c450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c454:	d13c      	bne.n	800c4d0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c458:	2200      	movs	r2, #0
 800c45a:	603b      	str	r3, [r7, #0]
 800c45c:	607a      	str	r2, [r7, #4]
 800c45e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c462:	f7fc fbc9 	bl	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c466:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d05e      	beq.n	800c52c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c472:	4a39      	ldr	r2, [pc, #228]	@ (800c558 <UART_SetConfig+0x340>)
 800c474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c478:	461a      	mov	r2, r3
 800c47a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c47c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c480:	005a      	lsls	r2, r3, #1
 800c482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	085b      	lsrs	r3, r3, #1
 800c488:	441a      	add	r2, r3
 800c48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c492:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c496:	2b0f      	cmp	r3, #15
 800c498:	d916      	bls.n	800c4c8 <UART_SetConfig+0x2b0>
 800c49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c49c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4a0:	d212      	bcs.n	800c4c8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	f023 030f 	bic.w	r3, r3, #15
 800c4aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ae:	085b      	lsrs	r3, r3, #1
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	f003 0307 	and.w	r3, r3, #7
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c4c4:	60da      	str	r2, [r3, #12]
 800c4c6:	e031      	b.n	800c52c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c4ce:	e02d      	b.n	800c52c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c4d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	469a      	mov	sl, r3
 800c4d6:	4693      	mov	fp, r2
 800c4d8:	4650      	mov	r0, sl
 800c4da:	4659      	mov	r1, fp
 800c4dc:	f7fc fb8c 	bl	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c4e0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c4e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d021      	beq.n	800c52c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ec:	4a1a      	ldr	r2, [pc, #104]	@ (800c558 <UART_SetConfig+0x340>)
 800c4ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	085b      	lsrs	r3, r3, #1
 800c500:	441a      	add	r2, r3
 800c502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c50e:	2b0f      	cmp	r3, #15
 800c510:	d909      	bls.n	800c526 <UART_SetConfig+0x30e>
 800c512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c518:	d205      	bcs.n	800c526 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60da      	str	r2, [r3, #12]
 800c524:	e002      	b.n	800c52c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52e:	2201      	movs	r2, #1
 800c530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	2201      	movs	r2, #1
 800c538:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53e:	2200      	movs	r2, #0
 800c540:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c544:	2200      	movs	r2, #0
 800c546:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c548:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3750      	adds	r7, #80	@ 0x50
 800c550:	46bd      	mov	sp, r7
 800c552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c556:	bf00      	nop
 800c558:	0800d248 	.word	0x0800d248

0800c55c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c568:	f003 0308 	and.w	r3, r3, #8
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00a      	beq.n	800c586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	430a      	orrs	r2, r1
 800c584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00a      	beq.n	800c5a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	430a      	orrs	r2, r1
 800c5a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ac:	f003 0302 	and.w	r3, r3, #2
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00a      	beq.n	800c5ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	430a      	orrs	r2, r1
 800c5c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ce:	f003 0304 	and.w	r3, r3, #4
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	430a      	orrs	r2, r1
 800c5ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f0:	f003 0310 	and.w	r3, r3, #16
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00a      	beq.n	800c60e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c612:	f003 0320 	and.w	r3, r3, #32
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00a      	beq.n	800c630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	430a      	orrs	r2, r1
 800c62e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d01a      	beq.n	800c672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	430a      	orrs	r2, r1
 800c650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c65a:	d10a      	bne.n	800c672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	430a      	orrs	r2, r1
 800c670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00a      	beq.n	800c694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	430a      	orrs	r2, r1
 800c692:	605a      	str	r2, [r3, #4]
  }
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b098      	sub	sp, #96	@ 0x60
 800c6a4:	af02      	add	r7, sp, #8
 800c6a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c6b0:	f7f6 faba 	bl	8002c28 <HAL_GetTick>
 800c6b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f003 0308 	and.w	r3, r3, #8
 800c6c0:	2b08      	cmp	r3, #8
 800c6c2:	d12f      	bne.n	800c724 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f88e 	bl	800c7f4 <UART_WaitOnFlagUntilTimeout>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d022      	beq.n	800c724 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e6:	e853 3f00 	ldrex	r3, [r3]
 800c6ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c700:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c704:	e841 2300 	strex	r3, r2, [r1]
 800c708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c70a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1e6      	bne.n	800c6de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2220      	movs	r2, #32
 800c714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c720:	2303      	movs	r3, #3
 800c722:	e063      	b.n	800c7ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 0304 	and.w	r3, r3, #4
 800c72e:	2b04      	cmp	r3, #4
 800c730:	d149      	bne.n	800c7c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c732:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c73a:	2200      	movs	r2, #0
 800c73c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f857 	bl	800c7f4 <UART_WaitOnFlagUntilTimeout>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d03c      	beq.n	800c7c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c754:	e853 3f00 	ldrex	r3, [r3]
 800c758:	623b      	str	r3, [r7, #32]
   return(result);
 800c75a:	6a3b      	ldr	r3, [r7, #32]
 800c75c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c76a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c76c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c772:	e841 2300 	strex	r3, r2, [r1]
 800c776:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e6      	bne.n	800c74c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	3308      	adds	r3, #8
 800c784:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	e853 3f00 	ldrex	r3, [r3]
 800c78c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f023 0301 	bic.w	r3, r3, #1
 800c794:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3308      	adds	r3, #8
 800c79c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c79e:	61fa      	str	r2, [r7, #28]
 800c7a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a2:	69b9      	ldr	r1, [r7, #24]
 800c7a4:	69fa      	ldr	r2, [r7, #28]
 800c7a6:	e841 2300 	strex	r3, r2, [r1]
 800c7aa:	617b      	str	r3, [r7, #20]
   return(result);
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1e5      	bne.n	800c77e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2220      	movs	r2, #32
 800c7b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	e012      	b.n	800c7ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2220      	movs	r2, #32
 800c7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3758      	adds	r7, #88	@ 0x58
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	603b      	str	r3, [r7, #0]
 800c800:	4613      	mov	r3, r2
 800c802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c804:	e04f      	b.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c80c:	d04b      	beq.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c80e:	f7f6 fa0b 	bl	8002c28 <HAL_GetTick>
 800c812:	4602      	mov	r2, r0
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	69ba      	ldr	r2, [r7, #24]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d302      	bcc.n	800c824 <UART_WaitOnFlagUntilTimeout+0x30>
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	e04e      	b.n	800c8c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0304 	and.w	r3, r3, #4
 800c832:	2b00      	cmp	r3, #0
 800c834:	d037      	beq.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b80      	cmp	r3, #128	@ 0x80
 800c83a:	d034      	beq.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b40      	cmp	r3, #64	@ 0x40
 800c840:	d031      	beq.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69db      	ldr	r3, [r3, #28]
 800c848:	f003 0308 	and.w	r3, r3, #8
 800c84c:	2b08      	cmp	r3, #8
 800c84e:	d110      	bne.n	800c872 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2208      	movs	r2, #8
 800c856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f000 f838 	bl	800c8ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2208      	movs	r2, #8
 800c862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	e029      	b.n	800c8c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	69db      	ldr	r3, [r3, #28]
 800c878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c87c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c880:	d111      	bne.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c88a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 f81e 	bl	800c8ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2220      	movs	r2, #32
 800c896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e00f      	b.n	800c8c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	69da      	ldr	r2, [r3, #28]
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	bf0c      	ite	eq
 800c8b6:	2301      	moveq	r3, #1
 800c8b8:	2300      	movne	r3, #0
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	461a      	mov	r2, r3
 800c8be:	79fb      	ldrb	r3, [r7, #7]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d0a0      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8ce:	b480      	push	{r7}
 800c8d0:	b095      	sub	sp, #84	@ 0x54
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8de:	e853 3f00 	ldrex	r3, [r3]
 800c8e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c8fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8fc:	e841 2300 	strex	r3, r2, [r1]
 800c900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1e6      	bne.n	800c8d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3308      	adds	r3, #8
 800c90e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	e853 3f00 	ldrex	r3, [r3]
 800c916:	61fb      	str	r3, [r7, #28]
   return(result);
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c91e:	f023 0301 	bic.w	r3, r3, #1
 800c922:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3308      	adds	r3, #8
 800c92a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c92c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c92e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c930:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c934:	e841 2300 	strex	r3, r2, [r1]
 800c938:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1e3      	bne.n	800c908 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c944:	2b01      	cmp	r3, #1
 800c946:	d118      	bne.n	800c97a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	e853 3f00 	ldrex	r3, [r3]
 800c954:	60bb      	str	r3, [r7, #8]
   return(result);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	f023 0310 	bic.w	r3, r3, #16
 800c95c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c966:	61bb      	str	r3, [r7, #24]
 800c968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96a:	6979      	ldr	r1, [r7, #20]
 800c96c:	69ba      	ldr	r2, [r7, #24]
 800c96e:	e841 2300 	strex	r3, r2, [r1]
 800c972:	613b      	str	r3, [r7, #16]
   return(result);
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1e6      	bne.n	800c948 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2220      	movs	r2, #32
 800c97e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c98e:	bf00      	nop
 800c990:	3754      	adds	r7, #84	@ 0x54
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c99a:	b480      	push	{r7}
 800c99c:	b085      	sub	sp, #20
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d101      	bne.n	800c9b0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	e027      	b.n	800ca00 <HAL_UARTEx_DisableFifoMode+0x66>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2224      	movs	r2, #36	@ 0x24
 800c9bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f022 0201 	bic.w	r2, r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c9de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2220      	movs	r2, #32
 800c9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d101      	bne.n	800ca24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca20:	2302      	movs	r3, #2
 800ca22:	e02d      	b.n	800ca80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2224      	movs	r2, #36	@ 0x24
 800ca30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f022 0201 	bic.w	r2, r2, #1
 800ca4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	430a      	orrs	r2, r1
 800ca5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f84f 	bl	800cb04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2220      	movs	r2, #32
 800ca72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d101      	bne.n	800caa0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e02d      	b.n	800cafc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2224      	movs	r2, #36	@ 0x24
 800caac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f022 0201 	bic.w	r2, r2, #1
 800cac6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f811 	bl	800cb04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2220      	movs	r2, #32
 800caee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d108      	bne.n	800cb26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb24:	e031      	b.n	800cb8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb26:	2308      	movs	r3, #8
 800cb28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	0e5b      	lsrs	r3, r3, #25
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	f003 0307 	and.w	r3, r3, #7
 800cb3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	0f5b      	lsrs	r3, r3, #29
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	f003 0307 	and.w	r3, r3, #7
 800cb4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb4e:	7bbb      	ldrb	r3, [r7, #14]
 800cb50:	7b3a      	ldrb	r2, [r7, #12]
 800cb52:	4911      	ldr	r1, [pc, #68]	@ (800cb98 <UARTEx_SetNbDataToProcess+0x94>)
 800cb54:	5c8a      	ldrb	r2, [r1, r2]
 800cb56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb5a:	7b3a      	ldrb	r2, [r7, #12]
 800cb5c:	490f      	ldr	r1, [pc, #60]	@ (800cb9c <UARTEx_SetNbDataToProcess+0x98>)
 800cb5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb60:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	7b7a      	ldrb	r2, [r7, #13]
 800cb70:	4909      	ldr	r1, [pc, #36]	@ (800cb98 <UARTEx_SetNbDataToProcess+0x94>)
 800cb72:	5c8a      	ldrb	r2, [r1, r2]
 800cb74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb78:	7b7a      	ldrb	r2, [r7, #13]
 800cb7a:	4908      	ldr	r1, [pc, #32]	@ (800cb9c <UARTEx_SetNbDataToProcess+0x98>)
 800cb7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cb8a:	bf00      	nop
 800cb8c:	3714      	adds	r7, #20
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	0800d260 	.word	0x0800d260
 800cb9c:	0800d268 	.word	0x0800d268

0800cba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cba0:	b084      	sub	sp, #16
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b084      	sub	sp, #16
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	f107 001c 	add.w	r0, r7, #28
 800cbae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fa6c 	bl	800d09c <USB_CoreReset>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800cbc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d106      	bne.n	800cbde <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	639a      	str	r2, [r3, #56]	@ 0x38
 800cbdc:	e005      	b.n	800cbea <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbe2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbf6:	b004      	add	sp, #16
 800cbf8:	4770      	bx	lr

0800cbfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b083      	sub	sp, #12
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	f023 0201 	bic.w	r2, r3, #1
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cc38:	78fb      	ldrb	r3, [r7, #3]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d115      	bne.n	800cc6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cc4a:	200a      	movs	r0, #10
 800cc4c:	f7f5 fff8 	bl	8002c40 <HAL_Delay>
      ms += 10U;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	330a      	adds	r3, #10
 800cc54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fa12 	bl	800d080 <USB_GetMode>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d01e      	beq.n	800cca0 <USB_SetCurrentMode+0x84>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2bc7      	cmp	r3, #199	@ 0xc7
 800cc66:	d9f0      	bls.n	800cc4a <USB_SetCurrentMode+0x2e>
 800cc68:	e01a      	b.n	800cca0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc6a:	78fb      	ldrb	r3, [r7, #3]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d115      	bne.n	800cc9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cc7c:	200a      	movs	r0, #10
 800cc7e:	f7f5 ffdf 	bl	8002c40 <HAL_Delay>
      ms += 10U;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	330a      	adds	r3, #10
 800cc86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 f9f9 	bl	800d080 <USB_GetMode>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d005      	beq.n	800cca0 <USB_SetCurrentMode+0x84>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2bc7      	cmp	r3, #199	@ 0xc7
 800cc98:	d9f0      	bls.n	800cc7c <USB_SetCurrentMode+0x60>
 800cc9a:	e001      	b.n	800cca0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e005      	b.n	800ccac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2bc8      	cmp	r3, #200	@ 0xc8
 800cca4:	d101      	bne.n	800ccaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e000      	b.n	800ccac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b086      	sub	sp, #24
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ccc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ccce:	2300      	movs	r3, #0
 800ccd0:	613b      	str	r3, [r7, #16]
 800ccd2:	e009      	b.n	800cce8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	3340      	adds	r3, #64	@ 0x40
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	2200      	movs	r2, #0
 800cce0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	3301      	adds	r3, #1
 800cce6:	613b      	str	r3, [r7, #16]
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	2b0e      	cmp	r3, #14
 800ccec:	d9f2      	bls.n	800ccd4 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ccee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d11c      	bne.n	800cd30 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cd04:	f043 0302 	orr.w	r3, r3, #2
 800cd08:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd0e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	e005      	b.n	800cd3c <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd34:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cd42:	461a      	mov	r2, r3
 800cd44:	2300      	movs	r3, #0
 800cd46:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cd48:	2103      	movs	r1, #3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f95e 	bl	800d00c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd50:	2110      	movs	r1, #16
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 f8fa 	bl	800cf4c <USB_FlushTxFifo>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f924 	bl	800cfb0 <USB_FlushRxFifo>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d001      	beq.n	800cd72 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd78:	461a      	mov	r2, r3
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd84:	461a      	mov	r2, r3
 800cd86:	2300      	movs	r3, #0
 800cd88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd90:	461a      	mov	r2, r3
 800cd92:	2300      	movs	r3, #0
 800cd94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd96:	2300      	movs	r3, #0
 800cd98:	613b      	str	r3, [r7, #16]
 800cd9a:	e043      	b.n	800ce24 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	015a      	lsls	r2, r3, #5
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	4413      	add	r3, r2
 800cda4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cdae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cdb2:	d118      	bne.n	800cde6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10a      	bne.n	800cdd0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	015a      	lsls	r2, r3, #5
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cdcc:	6013      	str	r3, [r2, #0]
 800cdce:	e013      	b.n	800cdf8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cddc:	461a      	mov	r2, r3
 800cdde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cde2:	6013      	str	r3, [r2, #0]
 800cde4:	e008      	b.n	800cdf8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	015a      	lsls	r2, r3, #5
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	4413      	add	r3, r2
 800cdee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	015a      	lsls	r2, r3, #5
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	4413      	add	r3, r2
 800ce00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce04:	461a      	mov	r2, r3
 800ce06:	2300      	movs	r3, #0
 800ce08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	015a      	lsls	r2, r3, #5
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	4413      	add	r3, r2
 800ce12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce16:	461a      	mov	r2, r3
 800ce18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ce1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	3301      	adds	r3, #1
 800ce22:	613b      	str	r3, [r7, #16]
 800ce24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ce28:	461a      	mov	r2, r3
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d3b5      	bcc.n	800cd9c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce30:	2300      	movs	r3, #0
 800ce32:	613b      	str	r3, [r7, #16]
 800ce34:	e043      	b.n	800cebe <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	015a      	lsls	r2, r3, #5
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce4c:	d118      	bne.n	800ce80 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10a      	bne.n	800ce6a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce60:	461a      	mov	r2, r3
 800ce62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ce66:	6013      	str	r3, [r2, #0]
 800ce68:	e013      	b.n	800ce92 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	015a      	lsls	r2, r3, #5
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	4413      	add	r3, r2
 800ce72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce76:	461a      	mov	r2, r3
 800ce78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	e008      	b.n	800ce92 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	2300      	movs	r3, #0
 800ce90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	015a      	lsls	r2, r3, #5
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce9e:	461a      	mov	r2, r3
 800cea0:	2300      	movs	r3, #0
 800cea2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ceb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	3301      	adds	r3, #1
 800cebc:	613b      	str	r3, [r7, #16]
 800cebe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cec2:	461a      	mov	r2, r3
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d3b5      	bcc.n	800ce36 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ced8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cedc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ceea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ceec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d105      	bne.n	800cf00 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	f043 0210 	orr.w	r2, r3, #16
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	699a      	ldr	r2, [r3, #24]
 800cf04:	4b10      	ldr	r3, [pc, #64]	@ (800cf48 <USB_DevInit+0x294>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cf0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d005      	beq.n	800cf20 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	f043 0208 	orr.w	r2, r3, #8
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cf20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d107      	bne.n	800cf38 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cf30:	f043 0304 	orr.w	r3, r3, #4
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3718      	adds	r7, #24
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf44:	b004      	add	sp, #16
 800cf46:	4770      	bx	lr
 800cf48:	803c3800 	.word	0x803c3800

0800cf4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cf56:	2300      	movs	r3, #0
 800cf58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cf66:	d901      	bls.n	800cf6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e01b      	b.n	800cfa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	daf2      	bge.n	800cf5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	019b      	lsls	r3, r3, #6
 800cf7c:	f043 0220 	orr.w	r2, r3, #32
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3301      	adds	r3, #1
 800cf88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cf90:	d901      	bls.n	800cf96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e006      	b.n	800cfa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	f003 0320 	and.w	r3, r3, #32
 800cf9e:	2b20      	cmp	r3, #32
 800cfa0:	d0f0      	beq.n	800cf84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cfa2:	2300      	movs	r3, #0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cfc8:	d901      	bls.n	800cfce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e018      	b.n	800d000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	daf2      	bge.n	800cfbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2210      	movs	r2, #16
 800cfde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cfec:	d901      	bls.n	800cff2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cfee:	2303      	movs	r3, #3
 800cff0:	e006      	b.n	800d000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	f003 0310 	and.w	r3, r3, #16
 800cffa:	2b10      	cmp	r3, #16
 800cffc:	d0f0      	beq.n	800cfe0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3714      	adds	r7, #20
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	78fb      	ldrb	r3, [r7, #3]
 800d026:	68f9      	ldr	r1, [r7, #12]
 800d028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d02c:	4313      	orrs	r3, r2
 800d02e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr

0800d03e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d03e:	b480      	push	{r7}
 800d040:	b085      	sub	sp, #20
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d058:	f023 0303 	bic.w	r3, r3, #3
 800d05c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d06c:	f043 0302 	orr.w	r3, r3, #2
 800d070:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3714      	adds	r7, #20
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	695b      	ldr	r3, [r3, #20]
 800d08c:	f003 0301 	and.w	r3, r3, #1
}
 800d090:	4618      	mov	r0, r3
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0b4:	d901      	bls.n	800d0ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	e01b      	b.n	800d0f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	daf2      	bge.n	800d0a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	f043 0201 	orr.w	r2, r3, #1
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0de:	d901      	bls.n	800d0e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	e006      	b.n	800d0f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d0f0      	beq.n	800d0d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <memset>:
 800d0fe:	4402      	add	r2, r0
 800d100:	4603      	mov	r3, r0
 800d102:	4293      	cmp	r3, r2
 800d104:	d100      	bne.n	800d108 <memset+0xa>
 800d106:	4770      	bx	lr
 800d108:	f803 1b01 	strb.w	r1, [r3], #1
 800d10c:	e7f9      	b.n	800d102 <memset+0x4>
	...

0800d110 <__libc_init_array>:
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	4d0d      	ldr	r5, [pc, #52]	@ (800d148 <__libc_init_array+0x38>)
 800d114:	2600      	movs	r6, #0
 800d116:	4c0d      	ldr	r4, [pc, #52]	@ (800d14c <__libc_init_array+0x3c>)
 800d118:	1b64      	subs	r4, r4, r5
 800d11a:	10a4      	asrs	r4, r4, #2
 800d11c:	42a6      	cmp	r6, r4
 800d11e:	d109      	bne.n	800d134 <__libc_init_array+0x24>
 800d120:	4d0b      	ldr	r5, [pc, #44]	@ (800d150 <__libc_init_array+0x40>)
 800d122:	2600      	movs	r6, #0
 800d124:	4c0b      	ldr	r4, [pc, #44]	@ (800d154 <__libc_init_array+0x44>)
 800d126:	f000 f817 	bl	800d158 <_init>
 800d12a:	1b64      	subs	r4, r4, r5
 800d12c:	10a4      	asrs	r4, r4, #2
 800d12e:	42a6      	cmp	r6, r4
 800d130:	d105      	bne.n	800d13e <__libc_init_array+0x2e>
 800d132:	bd70      	pop	{r4, r5, r6, pc}
 800d134:	f855 3b04 	ldr.w	r3, [r5], #4
 800d138:	3601      	adds	r6, #1
 800d13a:	4798      	blx	r3
 800d13c:	e7ee      	b.n	800d11c <__libc_init_array+0xc>
 800d13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d142:	3601      	adds	r6, #1
 800d144:	4798      	blx	r3
 800d146:	e7f2      	b.n	800d12e <__libc_init_array+0x1e>
 800d148:	0800d278 	.word	0x0800d278
 800d14c:	0800d278 	.word	0x0800d278
 800d150:	0800d278 	.word	0x0800d278
 800d154:	0800d27c 	.word	0x0800d27c

0800d158 <_init>:
 800d158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15a:	bf00      	nop
 800d15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d15e:	bc08      	pop	{r3}
 800d160:	469e      	mov	lr, r3
 800d162:	4770      	bx	lr

0800d164 <_fini>:
 800d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d166:	bf00      	nop
 800d168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16a:	bc08      	pop	{r3}
 800d16c:	469e      	mov	lr, r3
 800d16e:	4770      	bx	lr
